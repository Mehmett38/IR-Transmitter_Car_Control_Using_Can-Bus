
019_EmbeddedProjeF44.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090f8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c08  080092c8  080092c8  000192c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aed0  0800aed0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800aed0  0800aed0  0001aed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aed8  0800aed8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aed8  0800aed8  0001aed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aedc  0800aedc  0001aedc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800aee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042b0  20000078  0800af58  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004328  0800af58  00024328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e382  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043d8  00000000  00000000  0003e42a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c8  00000000  00000000  00042808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016e8  00000000  00000000  000440d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a73  00000000  00000000  000457b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dd64  00000000  00000000  0006c22b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3711  00000000  00000000  00089f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016d6a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b60  00000000  00000000  0016d6f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080092b0 	.word	0x080092b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	080092b0 	.word	0x080092b0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 80005ba:	2300      	movs	r3, #0
 80005bc:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 80005be:	2300      	movs	r3, #0
 80005c0:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 80005c2:	2300      	movs	r3, #0
 80005c4:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 80005c6:	2300      	movs	r3, #0
 80005c8:	71fb      	strb	r3, [r7, #7]
  
  RXM1reg.RXM1SIDH = 0x00;
 80005ca:	2300      	movs	r3, #0
 80005cc:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 80005ce:	2300      	movs	r3, #0
 80005d0:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 80005d2:	2300      	movs	r3, #0
 80005d4:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 80005d6:	2300      	movs	r3, #0
 80005d8:	70fb      	strb	r3, [r7, #3]
  
  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;      
 80005da:	2300      	movs	r3, #0
 80005dc:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 80005de:	2300      	movs	r3, #0
 80005e0:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 80005e2:	2300      	movs	r3, #0
 80005e4:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 80005e6:	2300      	movs	r3, #0
 80005e8:	77fb      	strb	r3, [r7, #31]
  
  RXF1reg.RXF1SIDH = 0x00;
 80005ea:	2300      	movs	r3, #0
 80005ec:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 80005ee:	2308      	movs	r3, #8
 80005f0:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 80005f2:	2300      	movs	r3, #0
 80005f4:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 80005f6:	2300      	movs	r3, #0
 80005f8:	76fb      	strb	r3, [r7, #27]
  
  RXF2reg.RXF2SIDH = 0x00;
 80005fa:	2300      	movs	r3, #0
 80005fc:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 80005fe:	2300      	movs	r3, #0
 8000600:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8000602:	2300      	movs	r3, #0
 8000604:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 8000606:	2300      	movs	r3, #0
 8000608:	75fb      	strb	r3, [r7, #23]
  
  RXF3reg.RXF3SIDH = 0x00;
 800060a:	2300      	movs	r3, #0
 800060c:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 800060e:	2300      	movs	r3, #0
 8000610:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8000612:	2300      	movs	r3, #0
 8000614:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 8000616:	2300      	movs	r3, #0
 8000618:	74fb      	strb	r3, [r7, #19]
  
  RXF4reg.RXF4SIDH = 0x00;
 800061a:	2300      	movs	r3, #0
 800061c:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 800061e:	2300      	movs	r3, #0
 8000620:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8000622:	2300      	movs	r3, #0
 8000624:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 8000626:	2300      	movs	r3, #0
 8000628:	73fb      	strb	r3, [r7, #15]
  
  RXF5reg.RXF5SIDH = 0x00;
 800062a:	2300      	movs	r3, #0
 800062c:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 800062e:	2308      	movs	r3, #8
 8000630:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8000632:	2300      	movs	r3, #0
 8000634:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 8000636:	2300      	movs	r3, #0
 8000638:	72fb      	strb	r3, [r7, #11]
  
  /* Intialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
 800063a:	f000 fff5 	bl	8001628 <MCP2515_Initialize>
 800063e:	4603      	mov	r3, r0
 8000640:	f083 0301 	eor.w	r3, r3, #1
 8000644:	b2db      	uxtb	r3, r3
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <CANSPI_Initialize+0x9a>
  {
    return false;
 800064a:	2300      	movs	r3, #0
 800064c:	e05e      	b.n	800070c <CANSPI_Initialize+0x158>
  }
    
  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
 800064e:	f001 f80d 	bl	800166c <MCP2515_SetConfigMode>
 8000652:	4603      	mov	r3, r0
 8000654:	f083 0301 	eor.w	r3, r3, #1
 8000658:	b2db      	uxtb	r3, r3
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <CANSPI_Initialize+0xae>
  {
    return false;
 800065e:	2300      	movs	r3, #0
 8000660:	e054      	b.n	800070c <CANSPI_Initialize+0x158>
  }
  
  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	461a      	mov	r2, r3
 8000666:	2123      	movs	r1, #35	; 0x23
 8000668:	2020      	movs	r0, #32
 800066a:	f001 f8a3 	bl	80017b4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 800066e:	463b      	mov	r3, r7
 8000670:	461a      	mov	r2, r3
 8000672:	2127      	movs	r1, #39	; 0x27
 8000674:	2024      	movs	r0, #36	; 0x24
 8000676:	f001 f89d 	bl	80017b4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	461a      	mov	r2, r3
 8000680:	2103      	movs	r1, #3
 8000682:	2000      	movs	r0, #0
 8000684:	f001 f896 	bl	80017b4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8000688:	f107 0318 	add.w	r3, r7, #24
 800068c:	461a      	mov	r2, r3
 800068e:	2107      	movs	r1, #7
 8000690:	2004      	movs	r0, #4
 8000692:	f001 f88f 	bl	80017b4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	461a      	mov	r2, r3
 800069c:	210b      	movs	r1, #11
 800069e:	2008      	movs	r0, #8
 80006a0:	f001 f888 	bl	80017b4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	461a      	mov	r2, r3
 80006aa:	2113      	movs	r1, #19
 80006ac:	2010      	movs	r0, #16
 80006ae:	f001 f881 	bl	80017b4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	461a      	mov	r2, r3
 80006b8:	2117      	movs	r1, #23
 80006ba:	2014      	movs	r0, #20
 80006bc:	f001 f87a 	bl	80017b4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 80006c0:	f107 0308 	add.w	r3, r7, #8
 80006c4:	461a      	mov	r2, r3
 80006c6:	211b      	movs	r1, #27
 80006c8:	2018      	movs	r0, #24
 80006ca:	f001 f873 	bl	80017b4 <MCP2515_WriteByteSequence>
  
  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 80006ce:	2104      	movs	r1, #4
 80006d0:	2060      	movs	r0, #96	; 0x60
 80006d2:	f001 f84b 	bl	800176c <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 80006d6:	2101      	movs	r1, #1
 80006d8:	2070      	movs	r0, #112	; 0x70
 80006da:	f001 f847 	bl	800176c <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 80006de:	2100      	movs	r1, #0
 80006e0:	202a      	movs	r0, #42	; 0x2a
 80006e2:	f001 f843 	bl	800176c <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */  
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 80006e6:	21e5      	movs	r1, #229	; 0xe5
 80006e8:	2029      	movs	r0, #41	; 0x29
 80006ea:	f001 f83f 	bl	800176c <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 80006ee:	2183      	movs	r1, #131	; 0x83
 80006f0:	2028      	movs	r0, #40	; 0x28
 80006f2:	f001 f83b 	bl	800176c <MCP2515_WriteByte>
  
  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 80006f6:	f000 ffd7 	bl	80016a8 <MCP2515_SetNormalMode>
 80006fa:	4603      	mov	r3, r0
 80006fc:	f083 0301 	eor.w	r3, r3, #1
 8000700:	b2db      	uxtb	r3, r3
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <CANSPI_Initialize+0x156>
    return false;
 8000706:	2300      	movs	r3, #0
 8000708:	e000      	b.n	800070c <CANSPI_Initialize+0x158>
  
  return true;
 800070a:	2301      	movs	r3, #1
}
 800070c:	4618      	mov	r0, r3
 800070e:	3720      	adds	r7, #32
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <CANSPI_Transmit>:

/* Transmit CAN message */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg) 
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	73fb      	strb	r3, [r7, #15]
  
  idReg.tempSIDH = 0;
 8000720:	4b36      	ldr	r3, [pc, #216]	; (80007fc <CANSPI_Transmit+0xe8>)
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8000726:	4b35      	ldr	r3, [pc, #212]	; (80007fc <CANSPI_Transmit+0xe8>)
 8000728:	2200      	movs	r2, #0
 800072a:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 800072c:	4b33      	ldr	r3, [pc, #204]	; (80007fc <CANSPI_Transmit+0xe8>)
 800072e:	2200      	movs	r2, #0
 8000730:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 8000732:	4b32      	ldr	r3, [pc, #200]	; (80007fc <CANSPI_Transmit+0xe8>)
 8000734:	2200      	movs	r2, #0
 8000736:	70da      	strb	r2, [r3, #3]
  
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8000738:	f001 f8aa 	bl	8001890 <MCP2515_ReadStatus>
 800073c:	4603      	mov	r3, r0
 800073e:	461a      	mov	r2, r3
 8000740:	4b2f      	ldr	r3, [pc, #188]	; (8000800 <CANSPI_Transmit+0xec>)
 8000742:	701a      	strb	r2, [r3, #0]
  
  /* Finding empty buffer */
  if (ctrlStatus.TXB0REQ != 1)
 8000744:	4b2e      	ldr	r3, [pc, #184]	; (8000800 <CANSPI_Transmit+0xec>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	f003 0304 	and.w	r3, r3, #4
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	d115      	bne.n	800077e <CANSPI_Transmit+0x6a>
  {
    /* convert CAN ID for register */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6858      	ldr	r0, [r3, #4]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	4a28      	ldr	r2, [pc, #160]	; (80007fc <CANSPI_Transmit+0xe8>)
 800075c:	4619      	mov	r1, r3
 800075e:	f000 f928 	bl	80009b2 <convertCANid2Reg>
    
    /* Load data to Tx Buffer */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	7a1a      	ldrb	r2, [r3, #8]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	3309      	adds	r3, #9
 800076a:	4924      	ldr	r1, [pc, #144]	; (80007fc <CANSPI_Transmit+0xe8>)
 800076c:	2040      	movs	r0, #64	; 0x40
 800076e:	f001 f84b 	bl	8001808 <MCP2515_LoadTxSequence>
    
    /* Request to transmit */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 8000772:	2081      	movs	r0, #129	; 0x81
 8000774:	f001 f872 	bl	800185c <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000778:	2301      	movs	r3, #1
 800077a:	73fb      	strb	r3, [r7, #15]
 800077c:	e038      	b.n	80007f0 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 800077e:	4b20      	ldr	r3, [pc, #128]	; (8000800 <CANSPI_Transmit+0xec>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	f003 0310 	and.w	r3, r3, #16
 8000786:	b2db      	uxtb	r3, r3
 8000788:	2b00      	cmp	r3, #0
 800078a:	d115      	bne.n	80007b8 <CANSPI_Transmit+0xa4>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	6858      	ldr	r0, [r3, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	4a19      	ldr	r2, [pc, #100]	; (80007fc <CANSPI_Transmit+0xe8>)
 8000796:	4619      	mov	r1, r3
 8000798:	f000 f90b 	bl	80009b2 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	7a1a      	ldrb	r2, [r3, #8]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3309      	adds	r3, #9
 80007a4:	4915      	ldr	r1, [pc, #84]	; (80007fc <CANSPI_Transmit+0xe8>)
 80007a6:	2042      	movs	r0, #66	; 0x42
 80007a8:	f001 f82e 	bl	8001808 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 80007ac:	2082      	movs	r0, #130	; 0x82
 80007ae:	f001 f855 	bl	800185c <MCP2515_RequestToSend>
    
    returnValue = 1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	73fb      	strb	r3, [r7, #15]
 80007b6:	e01b      	b.n	80007f0 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <CANSPI_Transmit+0xec>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d114      	bne.n	80007f0 <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	6858      	ldr	r0, [r3, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	4a0b      	ldr	r2, [pc, #44]	; (80007fc <CANSPI_Transmit+0xe8>)
 80007d0:	4619      	mov	r1, r3
 80007d2:	f000 f8ee 	bl	80009b2 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	7a1a      	ldrb	r2, [r3, #8]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	3309      	adds	r3, #9
 80007de:	4907      	ldr	r1, [pc, #28]	; (80007fc <CANSPI_Transmit+0xe8>)
 80007e0:	2044      	movs	r0, #68	; 0x44
 80007e2:	f001 f811 	bl	8001808 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 80007e6:	2084      	movs	r0, #132	; 0x84
 80007e8:	f001 f838 	bl	800185c <MCP2515_RequestToSend>
    
    returnValue = 1;
 80007ec:	2301      	movs	r3, #1
 80007ee:	73fb      	strb	r3, [r7, #15]
  }
  
  return (returnValue);
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000098 	.word	0x20000098
 8000800:	20000094 	.word	0x20000094

08000804 <CANSPI_Receive>:

/* Receive CAN message */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg) 
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 8000810:	f001 f85a 	bl	80018c8 <MCP2515_GetRxStatus>
 8000814:	4603      	mov	r3, r0
 8000816:	733b      	strb	r3, [r7, #12]
  
  /* Check receive buffer */
  if (rxStatus.rxBuffer != 0)
 8000818:	7b3b      	ldrb	r3, [r7, #12]
 800081a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800081e:	b2db      	uxtb	r3, r3
 8000820:	2b00      	cmp	r3, #0
 8000822:	d066      	beq.n	80008f2 <CANSPI_Receive+0xee>
  {
    /* finding buffer which has a message */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8000824:	7b3b      	ldrb	r3, [r7, #12]
 8000826:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800082a:	b2db      	uxtb	r3, r3
 800082c:	2b40      	cmp	r3, #64	; 0x40
 800082e:	bf0c      	ite	eq
 8000830:	2301      	moveq	r3, #1
 8000832:	2300      	movne	r3, #0
 8000834:	b2da      	uxtb	r2, r3
 8000836:	7b3b      	ldrb	r3, [r7, #12]
 8000838:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800083c:	b2db      	uxtb	r3, r3
 800083e:	2bc0      	cmp	r3, #192	; 0xc0
 8000840:	bf0c      	ite	eq
 8000842:	2301      	moveq	r3, #1
 8000844:	2300      	movne	r3, #0
 8000846:	b2db      	uxtb	r3, r3
 8000848:	4313      	orrs	r3, r2
 800084a:	b2db      	uxtb	r3, r3
 800084c:	2b00      	cmp	r3, #0
 800084e:	d007      	beq.n	8000860 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	220d      	movs	r2, #13
 8000856:	4619      	mov	r1, r3
 8000858:	2090      	movs	r0, #144	; 0x90
 800085a:	f000 ff65 	bl	8001728 <MCP2515_ReadRxSequence>
 800085e:	e00c      	b.n	800087a <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8000860:	7b3b      	ldrb	r3, [r7, #12]
 8000862:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000866:	b2db      	uxtb	r3, r3
 8000868:	2b80      	cmp	r3, #128	; 0x80
 800086a:	d106      	bne.n	800087a <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	220d      	movs	r2, #13
 8000872:	4619      	mov	r1, r3
 8000874:	2094      	movs	r0, #148	; 0x94
 8000876:	f000 ff57 	bl	8001728 <MCP2515_ReadRxSequence>
    }
    
    /* if the message is extended CAN type */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 800087a:	7b3b      	ldrb	r3, [r7, #12]
 800087c:	f003 0318 	and.w	r3, r3, #24
 8000880:	b2db      	uxtb	r3, r3
 8000882:	2b10      	cmp	r3, #16
 8000884:	d10c      	bne.n	80008a0 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2202      	movs	r2, #2
 800088a:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 800088c:	7cb8      	ldrb	r0, [r7, #18]
 800088e:	7cf9      	ldrb	r1, [r7, #19]
 8000890:	7c3a      	ldrb	r2, [r7, #16]
 8000892:	7c7b      	ldrb	r3, [r7, #17]
 8000894:	f000 f832 	bl	80008fc <convertReg2ExtendedCANid>
 8000898:	4602      	mov	r2, r0
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	e00b      	b.n	80008b8 <CANSPI_Receive+0xb4>
    } 
    else 
    {
      /* Standard type */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2201      	movs	r2, #1
 80008a4:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80008a6:	7c3b      	ldrb	r3, [r7, #16]
 80008a8:	7c7a      	ldrb	r2, [r7, #17]
 80008aa:	4611      	mov	r1, r2
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 f863 	bl	8000978 <convertReg2StandardCANid>
 80008b2:	4602      	mov	r2, r0
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	605a      	str	r2, [r3, #4]
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 80008b8:	7d3a      	ldrb	r2, [r7, #20]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 80008be:	7d7a      	ldrb	r2, [r7, #21]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 80008c4:	7dba      	ldrb	r2, [r7, #22]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 80008ca:	7dfa      	ldrb	r2, [r7, #23]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 80008d0:	7e3a      	ldrb	r2, [r7, #24]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 80008d6:	7e7a      	ldrb	r2, [r7, #25]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 80008dc:	7eba      	ldrb	r2, [r7, #26]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 80008e2:	7efa      	ldrb	r2, [r7, #27]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 80008e8:	7f3a      	ldrb	r2, [r7, #28]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	741a      	strb	r2, [r3, #16]
    
    returnValue = 1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	77fb      	strb	r3, [r7, #31]
  }
  
  return (returnValue);
 80008f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3720      	adds	r7, #32
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* convert register value to extended CAN ID */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 80008fc:	b490      	push	{r4, r7}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	4604      	mov	r4, r0
 8000904:	4608      	mov	r0, r1
 8000906:	4611      	mov	r1, r2
 8000908:	461a      	mov	r2, r3
 800090a:	4623      	mov	r3, r4
 800090c:	71fb      	strb	r3, [r7, #7]
 800090e:	4603      	mov	r3, r0
 8000910:	71bb      	strb	r3, [r7, #6]
 8000912:	460b      	mov	r3, r1
 8000914:	717b      	strb	r3, [r7, #5]
 8000916:	4613      	mov	r3, r2
 8000918:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 8000922:	793b      	ldrb	r3, [r7, #4]
 8000924:	f003 0303 	and.w	r3, r3, #3
 8000928:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 800092a:	793b      	ldrb	r3, [r7, #4]
 800092c:	095b      	lsrs	r3, r3, #5
 800092e:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 8000930:	797b      	ldrb	r3, [r7, #5]
 8000932:	00db      	lsls	r3, r3, #3
 8000934:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 8000936:	7bbb      	ldrb	r3, [r7, #14]
 8000938:	693a      	ldr	r2, [r7, #16]
 800093a:	4413      	add	r3, r2
 800093c:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8000944:	7bfb      	ldrb	r3, [r7, #15]
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	4413      	add	r3, r2
 800094a:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	021b      	lsls	r3, r3, #8
 8000950:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	4413      	add	r3, r2
 8000958:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	021b      	lsls	r3, r3, #8
 800095e:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8000960:	79bb      	ldrb	r3, [r7, #6]
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	4413      	add	r3, r2
 8000966:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;    
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	617b      	str	r3, [r7, #20]
  return (returnValue);
 800096c:	697b      	ldr	r3, [r7, #20]
}
 800096e:	4618      	mov	r0, r3
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bc90      	pop	{r4, r7}
 8000976:	4770      	bx	lr

08000978 <convertReg2StandardCANid>:

/* convert register value to standard CAN ID */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	460a      	mov	r2, r1
 8000982:	71fb      	strb	r3, [r7, #7]
 8000984:	4613      	mov	r3, r2
 8000986:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;
  
  ConvertedID = (tempRXBn_SIDH << 3);
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	00db      	lsls	r3, r3, #3
 8000990:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8000992:	79bb      	ldrb	r3, [r7, #6]
 8000994:	095b      	lsrs	r3, r3, #5
 8000996:	b2db      	uxtb	r3, r3
 8000998:	461a      	mov	r2, r3
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	4413      	add	r3, r2
 800099e:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	60fb      	str	r3, [r7, #12]
  
  return (returnValue);
 80009a4:	68fb      	ldr	r3, [r7, #12]
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <convertCANid2Reg>:

/* convert CAN ID to register value */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
 80009b2:	b480      	push	{r7}
 80009b4:	b087      	sub	sp, #28
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	60f8      	str	r0, [r7, #12]
 80009ba:	460b      	mov	r3, r1
 80009bc:	607a      	str	r2, [r7, #4]
 80009be:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	75fb      	strb	r3, [r7, #23]
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 80009c4:	7afb      	ldrb	r3, [r7, #11]
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d12e      	bne.n	8000a28 <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	0a1b      	lsrs	r3, r3, #8
 80009d6:	60fb      	str	r3, [r7, #12]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	0a1b      	lsrs	r3, r3, #8
 80009e4:	60fb      	str	r3, [r7, #12]
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	f003 0303 	and.w	r3, r3, #3
 80009ee:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	00db      	lsls	r3, r3, #3
 80009f4:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	f023 031f 	bic.w	r3, r3, #31
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	7dfb      	ldrb	r3, [r7, #23]
 8000a02:	4413      	add	r3, r2
 8000a04:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 8000a06:	7dfb      	ldrb	r3, [r7, #23]
 8000a08:	3308      	adds	r3, #8
 8000a0a:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8000a0c:	7dfb      	ldrb	r3, [r7, #23]
 8000a0e:	f023 0314 	bic.w	r3, r3, #20
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	705a      	strb	r2, [r3, #1]
    
    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	0a1b      	lsrs	r3, r3, #8
 8000a1c:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 8000a26:	e013      	b.n	8000a50 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2200      	movs	r2, #0
 8000a32:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	015b      	lsls	r3, r3, #5
 8000a38:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	0a1b      	lsrs	r3, r3, #8
 8000a46:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	701a      	strb	r2, [r3, #0]
}
 8000a50:	bf00      	nop
 8000a52:	371c      	adds	r7, #28
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <ILI9341_DrawHollowCircle>:
	us *= (SystemCoreClock / 1000000);
	while (us--);
}

void ILI9341_DrawHollowCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b089      	sub	sp, #36	; 0x24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4604      	mov	r4, r0
 8000a64:	4608      	mov	r0, r1
 8000a66:	4611      	mov	r1, r2
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4623      	mov	r3, r4
 8000a6c:	80fb      	strh	r3, [r7, #6]
 8000a6e:	4603      	mov	r3, r0
 8000a70:	80bb      	strh	r3, [r7, #4]
 8000a72:	460b      	mov	r3, r1
 8000a74:	807b      	strh	r3, [r7, #2]
 8000a76:	4613      	mov	r3, r2
 8000a78:	803b      	strh	r3, [r7, #0]
	int x = radius-1;
 8000a7a:	887b      	ldrh	r3, [r7, #2]
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	61fb      	str	r3, [r7, #28]
	int y = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61bb      	str	r3, [r7, #24]
	int dx = 1;
 8000a84:	2301      	movs	r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
	int dy = 1;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	613b      	str	r3, [r7, #16]
	int err = dx - (radius << 1);
 8000a8c:	887b      	ldrh	r3, [r7, #2]
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	697a      	ldr	r2, [r7, #20]
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	60fb      	str	r3, [r7, #12]

	while (x >= y)
 8000a96:	e08d      	b.n	8000bb4 <ILI9341_DrawHollowCircle+0x158>
	{
		ILI9341_DrawPixel(X + x, Y + y, color);
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	88fb      	ldrh	r3, [r7, #6]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	b298      	uxth	r0, r3
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	88bb      	ldrh	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	883a      	ldrh	r2, [r7, #0]
 8000aae:	4619      	mov	r1, r3
 8000ab0:	f000 fc70 	bl	8001394 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y + x, color);
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	88fb      	ldrh	r3, [r7, #6]
 8000aba:	4413      	add	r3, r2
 8000abc:	b298      	uxth	r0, r3
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	88bb      	ldrh	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	883a      	ldrh	r2, [r7, #0]
 8000aca:	4619      	mov	r1, r3
 8000acc:	f000 fc62 	bl	8001394 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y + x, color);
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	88fa      	ldrh	r2, [r7, #6]
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	b298      	uxth	r0, r3
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	88bb      	ldrh	r3, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	883a      	ldrh	r2, [r7, #0]
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f000 fc54 	bl	8001394 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y + y, color);
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	88fa      	ldrh	r2, [r7, #6]
 8000af2:	1ad3      	subs	r3, r2, r3
 8000af4:	b298      	uxth	r0, r3
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	88bb      	ldrh	r3, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	883a      	ldrh	r2, [r7, #0]
 8000b02:	4619      	mov	r1, r3
 8000b04:	f000 fc46 	bl	8001394 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y - y, color);
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	88fa      	ldrh	r2, [r7, #6]
 8000b0e:	1ad3      	subs	r3, r2, r3
 8000b10:	b298      	uxth	r0, r3
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	88ba      	ldrh	r2, [r7, #4]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	883a      	ldrh	r2, [r7, #0]
 8000b1e:	4619      	mov	r1, r3
 8000b20:	f000 fc38 	bl	8001394 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y - x, color);
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	88fa      	ldrh	r2, [r7, #6]
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	b298      	uxth	r0, r3
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	88ba      	ldrh	r2, [r7, #4]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	883a      	ldrh	r2, [r7, #0]
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	f000 fc2a 	bl	8001394 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y - x, color);
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	88fb      	ldrh	r3, [r7, #6]
 8000b46:	4413      	add	r3, r2
 8000b48:	b298      	uxth	r0, r3
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	88ba      	ldrh	r2, [r7, #4]
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	883a      	ldrh	r2, [r7, #0]
 8000b56:	4619      	mov	r1, r3
 8000b58:	f000 fc1c 	bl	8001394 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + x, Y - y, color);
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	88fb      	ldrh	r3, [r7, #6]
 8000b62:	4413      	add	r3, r2
 8000b64:	b298      	uxth	r0, r3
 8000b66:	69bb      	ldr	r3, [r7, #24]
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	88ba      	ldrh	r2, [r7, #4]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	883a      	ldrh	r2, [r7, #0]
 8000b72:	4619      	mov	r1, r3
 8000b74:	f000 fc0e 	bl	8001394 <ILI9341_DrawPixel>

		if (err <= 0)
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	dc09      	bgt.n	8000b92 <ILI9341_DrawHollowCircle+0x136>
		{
			y++;
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	3301      	adds	r3, #1
 8000b82:	61bb      	str	r3, [r7, #24]
			err += dy;
 8000b84:	68fa      	ldr	r2, [r7, #12]
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	4413      	add	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]
			dy += 2;
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	3302      	adds	r3, #2
 8000b90:	613b      	str	r3, [r7, #16]
		}

		if (err > 0)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	dd0d      	ble.n	8000bb4 <ILI9341_DrawHollowCircle+0x158>
		{
			x--;
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	61fb      	str	r3, [r7, #28]
			dx += 2;
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	3302      	adds	r3, #2
 8000ba2:	617b      	str	r3, [r7, #20]
			err += (-radius << 1) + dx;
 8000ba4:	887b      	ldrh	r3, [r7, #2]
 8000ba6:	425b      	negs	r3, r3
 8000ba8:	005a      	lsls	r2, r3, #1
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	4413      	add	r3, r2
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]
	while (x >= y)
 8000bb4:	69fa      	ldr	r2, [r7, #28]
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	f6bf af6d 	bge.w	8000a98 <ILI9341_DrawHollowCircle+0x3c>
		}
	}
}
 8000bbe:	bf00      	nop
 8000bc0:	bf00      	nop
 8000bc2:	3724      	adds	r7, #36	; 0x24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd90      	pop	{r4, r7, pc}

08000bc8 <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b08d      	sub	sp, #52	; 0x34
 8000bcc:	af02      	add	r7, sp, #8
 8000bce:	60b9      	str	r1, [r7, #8]
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	73fb      	strb	r3, [r7, #15]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	81bb      	strh	r3, [r7, #12]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
 8000be2:	2b1e      	cmp	r3, #30
 8000be4:	d961      	bls.n	8000caa <ILI9341_DrawChar+0xe2>
 8000be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	db5d      	blt.n	8000caa <ILI9341_DrawChar+0xe2>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	785b      	ldrb	r3, [r3, #1]
 8000bf8:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	789b      	ldrb	r3, [r3, #2]
 8000bfe:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	78db      	ldrb	r3, [r3, #3]
 8000c04:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8000c06:	7bfb      	ldrb	r3, [r7, #15]
 8000c08:	3b20      	subs	r3, #32
 8000c0a:	7ffa      	ldrb	r2, [r7, #31]
 8000c0c:	fb02 f303 	mul.w	r3, r2, r3
 8000c10:	3304      	adds	r3, #4
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	4413      	add	r3, r2
 8000c16:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8000c18:	7fbb      	ldrb	r3, [r7, #30]
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	7f7b      	ldrb	r3, [r7, #29]
 8000c1e:	b29c      	uxth	r4, r3
 8000c20:	88f9      	ldrh	r1, [r7, #6]
 8000c22:	89b8      	ldrh	r0, [r7, #12]
 8000c24:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	4623      	mov	r3, r4
 8000c2a:	f000 fc19 	bl	8001460 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
 8000c32:	e035      	b.n	8000ca0 <ILI9341_DrawChar+0xd8>
	{
		for (int i=0; i < fWidth; i++)
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
 8000c38:	e02b      	b.n	8000c92 <ILI9341_DrawChar+0xca>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8000c3a:	7f3b      	ldrb	r3, [r7, #28]
 8000c3c:	6a3a      	ldr	r2, [r7, #32]
 8000c3e:	fb03 f202 	mul.w	r2, r3, r2
 8000c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c44:	10db      	asrs	r3, r3, #3
 8000c46:	f003 031f 	and.w	r3, r3, #31
 8000c4a:	4413      	add	r3, r2
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	4413      	add	r3, r2
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8000c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c58:	f003 0307 	and.w	r3, r3, #7
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 8000c64:	7dfa      	ldrb	r2, [r7, #23]
 8000c66:	7dbb      	ldrb	r3, [r7, #22]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d00d      	beq.n	8000c8c <ILI9341_DrawChar+0xc4>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 8000c70:	6a3b      	ldr	r3, [r7, #32]
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	89bb      	ldrh	r3, [r7, #12]
 8000c76:	4413      	add	r3, r2
 8000c78:	b298      	uxth	r0, r3
 8000c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	88fb      	ldrh	r3, [r7, #6]
 8000c80:	4413      	add	r3, r2
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000c86:	4619      	mov	r1, r3
 8000c88:	f000 fb84 	bl	8001394 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8000c8c:	6a3b      	ldr	r3, [r7, #32]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	623b      	str	r3, [r7, #32]
 8000c92:	7fbb      	ldrb	r3, [r7, #30]
 8000c94:	6a3a      	ldr	r2, [r7, #32]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	dbcf      	blt.n	8000c3a <ILI9341_DrawChar+0x72>
	for (int j=0; j < fHeight; j++)
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8000ca0:	7f7b      	ldrb	r3, [r7, #29]
 8000ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	dbc5      	blt.n	8000c34 <ILI9341_DrawChar+0x6c>
 8000ca8:	e000      	b.n	8000cac <ILI9341_DrawChar+0xe4>
	if ((ch < 31) || (ch > 127)) return;
 8000caa:	bf00      	nop
			}
		}
	}
}
 8000cac:	372c      	adds	r7, #44	; 0x2c
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd90      	pop	{r4, r7, pc}

08000cb2 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b08a      	sub	sp, #40	; 0x28
 8000cb6:	af02      	add	r7, sp, #8
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	4611      	mov	r1, r2
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	80fb      	strh	r3, [r7, #6]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	785b      	ldrb	r3, [r3, #1]
 8000cd2:	77bb      	strb	r3, [r7, #30]

	while (*str)
 8000cd4:	e02d      	b.n	8000d32 <ILI9341_DrawText+0x80>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	7818      	ldrb	r0, [r3, #0]
 8000cda:	88b9      	ldrh	r1, [r7, #4]
 8000cdc:	88fa      	ldrh	r2, [r7, #6]
 8000cde:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000ce0:	9301      	str	r3, [sp, #4]
 8000ce2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000ce4:	9300      	str	r3, [sp, #0]
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	68b9      	ldr	r1, [r7, #8]
 8000cea:	f7ff ff6d 	bl	8000bc8 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	3b20      	subs	r3, #32
 8000cf4:	7ffa      	ldrb	r2, [r7, #31]
 8000cf6:	fb02 f303 	mul.w	r3, r2, r3
 8000cfa:	3304      	adds	r3, #4
 8000cfc:	68ba      	ldr	r2, [r7, #8]
 8000cfe:	4413      	add	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 8000d08:	7dfb      	ldrb	r3, [r7, #23]
 8000d0a:	1c9a      	adds	r2, r3, #2
 8000d0c:	7fbb      	ldrb	r3, [r7, #30]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	da07      	bge.n	8000d22 <ILI9341_DrawText+0x70>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8000d12:	7dfb      	ldrb	r3, [r7, #23]
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	88fb      	ldrh	r3, [r7, #6]
 8000d18:	4413      	add	r3, r2
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	3302      	adds	r3, #2
 8000d1e:	80fb      	strh	r3, [r7, #6]
 8000d20:	e004      	b.n	8000d2c <ILI9341_DrawText+0x7a>
		}
		else
		{
			X += fWidth;
 8000d22:	7fbb      	ldrb	r3, [r7, #30]
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	4413      	add	r3, r2
 8000d2a:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	60fb      	str	r3, [r7, #12]
	while (*str)
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1cd      	bne.n	8000cd6 <ILI9341_DrawText+0x24>
	}
}
 8000d3a:	bf00      	nop
 8000d3c:	bf00      	nop
 8000d3e:	3720      	adds	r7, #32
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a06      	ldr	r2, [pc, #24]	; (8000d68 <HAL_SPI_TxCpltCallback+0x24>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d104      	bne.n	8000d5e <HAL_SPI_TxCpltCallback+0x1a>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	2102      	movs	r1, #2
 8000d58:	4804      	ldr	r0, [pc, #16]	; (8000d6c <HAL_SPI_TxCpltCallback+0x28>)
 8000d5a:	f002 fea7 	bl	8003aac <HAL_GPIO_WritePin>
  }
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000378 	.word	0x20000378
 8000d6c:	40020800 	.word	0x40020800

08000d70 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000d7a:	bf00      	nop
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <ILI9341_SPI_Tx+0x30>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d1f8      	bne.n	8000d7c <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 8000d8a:	1dfb      	adds	r3, r7, #7
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4803      	ldr	r0, [pc, #12]	; (8000da0 <ILI9341_SPI_Tx+0x30>)
 8000d92:	f005 f9ff 	bl	8006194 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000378 	.word	0x20000378

08000da4 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000db0:	bf00      	nop
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <ILI9341_SPI_TxBuffer+0x30>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f003 0302 	and.w	r3, r3, #2
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d1f8      	bne.n	8000db2 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 8000dc0:	887b      	ldrh	r3, [r7, #2]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	6879      	ldr	r1, [r7, #4]
 8000dc6:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <ILI9341_SPI_TxBuffer+0x30>)
 8000dc8:	f005 f9e4 	bl	8006194 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000378 	.word	0x20000378

08000dd8 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8000de2:	2200      	movs	r2, #0
 8000de4:	2104      	movs	r1, #4
 8000de6:	4808      	ldr	r0, [pc, #32]	; (8000e08 <ILI9341_WriteCommand+0x30>)
 8000de8:	f002 fe60 	bl	8003aac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000dec:	2200      	movs	r2, #0
 8000dee:	2102      	movs	r1, #2
 8000df0:	4805      	ldr	r0, [pc, #20]	; (8000e08 <ILI9341_WriteCommand+0x30>)
 8000df2:	f002 fe5b 	bl	8003aac <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ffb9 	bl	8000d70 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40020800 	.word	0x40020800

08000e0c <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000e16:	2201      	movs	r2, #1
 8000e18:	2104      	movs	r1, #4
 8000e1a:	4808      	ldr	r0, [pc, #32]	; (8000e3c <ILI9341_WriteData+0x30>)
 8000e1c:	f002 fe46 	bl	8003aac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000e20:	2200      	movs	r2, #0
 8000e22:	2102      	movs	r1, #2
 8000e24:	4805      	ldr	r0, [pc, #20]	; (8000e3c <ILI9341_WriteData+0x30>)
 8000e26:	f002 fe41 	bl	8003aac <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ff9f 	bl	8000d70 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40020800 	.word	0x40020800

08000e40 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	2104      	movs	r1, #4
 8000e50:	4808      	ldr	r0, [pc, #32]	; (8000e74 <ILI9341_WriteBuffer+0x34>)
 8000e52:	f002 fe2b 	bl	8003aac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000e56:	2200      	movs	r2, #0
 8000e58:	2102      	movs	r1, #2
 8000e5a:	4806      	ldr	r0, [pc, #24]	; (8000e74 <ILI9341_WriteBuffer+0x34>)
 8000e5c:	f002 fe26 	bl	8003aac <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8000e60:	887b      	ldrh	r3, [r7, #2]
 8000e62:	4619      	mov	r1, r3
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ff9d 	bl	8000da4 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40020800 	.word	0x40020800

08000e78 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4604      	mov	r4, r0
 8000e80:	4608      	mov	r0, r1
 8000e82:	4611      	mov	r1, r2
 8000e84:	461a      	mov	r2, r3
 8000e86:	4623      	mov	r3, r4
 8000e88:	80fb      	strh	r3, [r7, #6]
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	80bb      	strh	r3, [r7, #4]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	807b      	strh	r3, [r7, #2]
 8000e92:	4613      	mov	r3, r2
 8000e94:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 8000ea6:	887b      	ldrh	r3, [r7, #2]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 8000eb0:	887b      	ldrh	r3, [r7, #2]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 8000eb6:	202a      	movs	r0, #42	; 0x2a
 8000eb8:	f7ff ff8e 	bl	8000dd8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	2104      	movs	r1, #4
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ffbc 	bl	8000e40 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8000ec8:	88bb      	ldrh	r3, [r7, #4]
 8000eca:	0a1b      	lsrs	r3, r3, #8
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8000ed2:	88bb      	ldrh	r3, [r7, #4]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8000ed8:	883b      	ldrh	r3, [r7, #0]
 8000eda:	0a1b      	lsrs	r3, r3, #8
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8000ee2:	883b      	ldrh	r3, [r7, #0]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8000ee8:	202b      	movs	r0, #43	; 0x2b
 8000eea:	f7ff ff75 	bl	8000dd8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000eee:	f107 030c 	add.w	r3, r7, #12
 8000ef2:	2104      	movs	r1, #4
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ffa3 	bl	8000e40 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8000efa:	202c      	movs	r0, #44	; 0x2c
 8000efc:	f7ff ff6c 	bl	8000dd8 <ILI9341_WriteCommand>
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd90      	pop	{r4, r7, pc}

08000f08 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2108      	movs	r1, #8
 8000f10:	480c      	ldr	r0, [pc, #48]	; (8000f44 <ILI9341_Reset+0x3c>)
 8000f12:	f002 fdcb 	bl	8003aac <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f16:	200a      	movs	r0, #10
 8000f18:	f001 ff84 	bl	8002e24 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2102      	movs	r1, #2
 8000f20:	4808      	ldr	r0, [pc, #32]	; (8000f44 <ILI9341_Reset+0x3c>)
 8000f22:	f002 fdc3 	bl	8003aac <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f26:	200a      	movs	r0, #10
 8000f28:	f001 ff7c 	bl	8002e24 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2108      	movs	r1, #8
 8000f30:	4804      	ldr	r0, [pc, #16]	; (8000f44 <ILI9341_Reset+0x3c>)
 8000f32:	f002 fdbb 	bl	8003aac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8000f36:	2201      	movs	r2, #1
 8000f38:	2102      	movs	r1, #2
 8000f3a:	4802      	ldr	r0, [pc, #8]	; (8000f44 <ILI9341_Reset+0x3c>)
 8000f3c:	f002 fdb6 	bl	8003aac <HAL_GPIO_WritePin>
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40020800 	.word	0x40020800

08000f48 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	2108      	movs	r1, #8
 8000f50:	4802      	ldr	r0, [pc, #8]	; (8000f5c <ILI9341_Enable+0x14>)
 8000f52:	f002 fdab 	bl	8003aac <HAL_GPIO_WritePin>
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40020800 	.word	0x40020800

08000f60 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8000f64:	f7ff fff0 	bl	8000f48 <ILI9341_Enable>
	ILI9341_Reset();
 8000f68:	f7ff ffce 	bl	8000f08 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f7ff ff33 	bl	8000dd8 <ILI9341_WriteCommand>
	HAL_Delay(10);
 8000f72:	200a      	movs	r0, #10
 8000f74:	f001 ff56 	bl	8002e24 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8000f78:	20cb      	movs	r0, #203	; 0xcb
 8000f7a:	f7ff ff2d 	bl	8000dd8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8000f7e:	2039      	movs	r0, #57	; 0x39
 8000f80:	f7ff ff44 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8000f84:	202c      	movs	r0, #44	; 0x2c
 8000f86:	f7ff ff41 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f7ff ff3e 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8000f90:	2034      	movs	r0, #52	; 0x34
 8000f92:	f7ff ff3b 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8000f96:	2002      	movs	r0, #2
 8000f98:	f7ff ff38 	bl	8000e0c <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8000f9c:	20cf      	movs	r0, #207	; 0xcf
 8000f9e:	f7ff ff1b 	bl	8000dd8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f7ff ff32 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000fa8:	20c1      	movs	r0, #193	; 0xc1
 8000faa:	f7ff ff2f 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8000fae:	2030      	movs	r0, #48	; 0x30
 8000fb0:	f7ff ff2c 	bl	8000e0c <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8000fb4:	20e8      	movs	r0, #232	; 0xe8
 8000fb6:	f7ff ff0f 	bl	8000dd8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8000fba:	2085      	movs	r0, #133	; 0x85
 8000fbc:	f7ff ff26 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f7ff ff23 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 8000fc6:	2078      	movs	r0, #120	; 0x78
 8000fc8:	f7ff ff20 	bl	8000e0c <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8000fcc:	20ea      	movs	r0, #234	; 0xea
 8000fce:	f7ff ff03 	bl	8000dd8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f7ff ff1a 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f7ff ff17 	bl	8000e0c <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8000fde:	20ed      	movs	r0, #237	; 0xed
 8000fe0:	f7ff fefa 	bl	8000dd8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8000fe4:	2064      	movs	r0, #100	; 0x64
 8000fe6:	f7ff ff11 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000fea:	2003      	movs	r0, #3
 8000fec:	f7ff ff0e 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000ff0:	2012      	movs	r0, #18
 8000ff2:	f7ff ff0b 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000ff6:	2081      	movs	r0, #129	; 0x81
 8000ff8:	f7ff ff08 	bl	8000e0c <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000ffc:	20f7      	movs	r0, #247	; 0xf7
 8000ffe:	f7ff feeb 	bl	8000dd8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8001002:	2020      	movs	r0, #32
 8001004:	f7ff ff02 	bl	8000e0c <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8001008:	20c0      	movs	r0, #192	; 0xc0
 800100a:	f7ff fee5 	bl	8000dd8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 800100e:	2023      	movs	r0, #35	; 0x23
 8001010:	f7ff fefc 	bl	8000e0c <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8001014:	20c1      	movs	r0, #193	; 0xc1
 8001016:	f7ff fedf 	bl	8000dd8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 800101a:	2010      	movs	r0, #16
 800101c:	f7ff fef6 	bl	8000e0c <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8001020:	20c5      	movs	r0, #197	; 0xc5
 8001022:	f7ff fed9 	bl	8000dd8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8001026:	203e      	movs	r0, #62	; 0x3e
 8001028:	f7ff fef0 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 800102c:	2028      	movs	r0, #40	; 0x28
 800102e:	f7ff feed 	bl	8000e0c <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8001032:	20c7      	movs	r0, #199	; 0xc7
 8001034:	f7ff fed0 	bl	8000dd8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8001038:	2086      	movs	r0, #134	; 0x86
 800103a:	f7ff fee7 	bl	8000e0c <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 800103e:	2036      	movs	r0, #54	; 0x36
 8001040:	f7ff feca 	bl	8000dd8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8001044:	2048      	movs	r0, #72	; 0x48
 8001046:	f7ff fee1 	bl	8000e0c <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 800104a:	203a      	movs	r0, #58	; 0x3a
 800104c:	f7ff fec4 	bl	8000dd8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8001050:	2055      	movs	r0, #85	; 0x55
 8001052:	f7ff fedb 	bl	8000e0c <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8001056:	20b1      	movs	r0, #177	; 0xb1
 8001058:	f7ff febe 	bl	8000dd8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800105c:	2000      	movs	r0, #0
 800105e:	f7ff fed5 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8001062:	2018      	movs	r0, #24
 8001064:	f7ff fed2 	bl	8000e0c <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8001068:	20b6      	movs	r0, #182	; 0xb6
 800106a:	f7ff feb5 	bl	8000dd8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 800106e:	2008      	movs	r0, #8
 8001070:	f7ff fecc 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8001074:	2082      	movs	r0, #130	; 0x82
 8001076:	f7ff fec9 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 800107a:	2027      	movs	r0, #39	; 0x27
 800107c:	f7ff fec6 	bl	8000e0c <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8001080:	20f2      	movs	r0, #242	; 0xf2
 8001082:	f7ff fea9 	bl	8000dd8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001086:	2000      	movs	r0, #0
 8001088:	f7ff fec0 	bl	8000e0c <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 800108c:	2026      	movs	r0, #38	; 0x26
 800108e:	f7ff fea3 	bl	8000dd8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8001092:	2001      	movs	r0, #1
 8001094:	f7ff feba 	bl	8000e0c <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8001098:	20e0      	movs	r0, #224	; 0xe0
 800109a:	f7ff fe9d 	bl	8000dd8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 800109e:	200f      	movs	r0, #15
 80010a0:	f7ff feb4 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80010a4:	2031      	movs	r0, #49	; 0x31
 80010a6:	f7ff feb1 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 80010aa:	202b      	movs	r0, #43	; 0x2b
 80010ac:	f7ff feae 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 80010b0:	200c      	movs	r0, #12
 80010b2:	f7ff feab 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80010b6:	200e      	movs	r0, #14
 80010b8:	f7ff fea8 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 80010bc:	2008      	movs	r0, #8
 80010be:	f7ff fea5 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 80010c2:	204e      	movs	r0, #78	; 0x4e
 80010c4:	f7ff fea2 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 80010c8:	20f1      	movs	r0, #241	; 0xf1
 80010ca:	f7ff fe9f 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 80010ce:	2037      	movs	r0, #55	; 0x37
 80010d0:	f7ff fe9c 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 80010d4:	2007      	movs	r0, #7
 80010d6:	f7ff fe99 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 80010da:	2010      	movs	r0, #16
 80010dc:	f7ff fe96 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80010e0:	2003      	movs	r0, #3
 80010e2:	f7ff fe93 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80010e6:	200e      	movs	r0, #14
 80010e8:	f7ff fe90 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 80010ec:	2009      	movs	r0, #9
 80010ee:	f7ff fe8d 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80010f2:	2000      	movs	r0, #0
 80010f4:	f7ff fe8a 	bl	8000e0c <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 80010f8:	20e1      	movs	r0, #225	; 0xe1
 80010fa:	f7ff fe6d 	bl	8000dd8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80010fe:	2000      	movs	r0, #0
 8001100:	f7ff fe84 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001104:	200e      	movs	r0, #14
 8001106:	f7ff fe81 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 800110a:	2014      	movs	r0, #20
 800110c:	f7ff fe7e 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001110:	2003      	movs	r0, #3
 8001112:	f7ff fe7b 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8001116:	2011      	movs	r0, #17
 8001118:	f7ff fe78 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 800111c:	2007      	movs	r0, #7
 800111e:	f7ff fe75 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001122:	2031      	movs	r0, #49	; 0x31
 8001124:	f7ff fe72 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001128:	20c1      	movs	r0, #193	; 0xc1
 800112a:	f7ff fe6f 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 800112e:	2048      	movs	r0, #72	; 0x48
 8001130:	f7ff fe6c 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001134:	2008      	movs	r0, #8
 8001136:	f7ff fe69 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 800113a:	200f      	movs	r0, #15
 800113c:	f7ff fe66 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8001140:	200c      	movs	r0, #12
 8001142:	f7ff fe63 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001146:	2031      	movs	r0, #49	; 0x31
 8001148:	f7ff fe60 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 800114c:	2036      	movs	r0, #54	; 0x36
 800114e:	f7ff fe5d 	bl	8000e0c <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8001152:	200f      	movs	r0, #15
 8001154:	f7ff fe5a 	bl	8000e0c <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8001158:	2011      	movs	r0, #17
 800115a:	f7ff fe3d 	bl	8000dd8 <ILI9341_WriteCommand>
	HAL_Delay(100);
 800115e:	2064      	movs	r0, #100	; 0x64
 8001160:	f001 fe60 	bl	8002e24 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8001164:	2029      	movs	r0, #41	; 0x29
 8001166:	f7ff fe37 	bl	8000dd8 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 800116a:	2000      	movs	r0, #0
 800116c:	f000 f802 	bl	8001174 <ILI9341_SetRotation>
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}

08001174 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 800117e:	2036      	movs	r0, #54	; 0x36
 8001180:	f7ff fe2a 	bl	8000dd8 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8001184:	2001      	movs	r0, #1
 8001186:	f001 fe4d 	bl	8002e24 <HAL_Delay>

	switch(rotation)
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	2b03      	cmp	r3, #3
 800118e:	d837      	bhi.n	8001200 <ILI9341_SetRotation+0x8c>
 8001190:	a201      	add	r2, pc, #4	; (adr r2, 8001198 <ILI9341_SetRotation+0x24>)
 8001192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001196:	bf00      	nop
 8001198:	080011a9 	.word	0x080011a9
 800119c:	080011bf 	.word	0x080011bf
 80011a0:	080011d5 	.word	0x080011d5
 80011a4:	080011eb 	.word	0x080011eb
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 80011a8:	2048      	movs	r0, #72	; 0x48
 80011aa:	f7ff fe2f 	bl	8000e0c <ILI9341_WriteData>
		LCD_WIDTH = 240;
 80011ae:	4b17      	ldr	r3, [pc, #92]	; (800120c <ILI9341_SetRotation+0x98>)
 80011b0:	22f0      	movs	r2, #240	; 0xf0
 80011b2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80011b4:	4b16      	ldr	r3, [pc, #88]	; (8001210 <ILI9341_SetRotation+0x9c>)
 80011b6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80011ba:	801a      	strh	r2, [r3, #0]
		break;
 80011bc:	e021      	b.n	8001202 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 80011be:	2028      	movs	r0, #40	; 0x28
 80011c0:	f7ff fe24 	bl	8000e0c <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <ILI9341_SetRotation+0x98>)
 80011c6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80011ca:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80011cc:	4b10      	ldr	r3, [pc, #64]	; (8001210 <ILI9341_SetRotation+0x9c>)
 80011ce:	22f0      	movs	r2, #240	; 0xf0
 80011d0:	801a      	strh	r2, [r3, #0]
		break;
 80011d2:	e016      	b.n	8001202 <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 80011d4:	2088      	movs	r0, #136	; 0x88
 80011d6:	f7ff fe19 	bl	8000e0c <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <ILI9341_SetRotation+0x98>)
 80011dc:	22f0      	movs	r2, #240	; 0xf0
 80011de:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <ILI9341_SetRotation+0x9c>)
 80011e2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80011e6:	801a      	strh	r2, [r3, #0]
		break;
 80011e8:	e00b      	b.n	8001202 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 80011ea:	20e8      	movs	r0, #232	; 0xe8
 80011ec:	f7ff fe0e 	bl	8000e0c <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <ILI9341_SetRotation+0x98>)
 80011f2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80011f6:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <ILI9341_SetRotation+0x9c>)
 80011fa:	22f0      	movs	r2, #240	; 0xf0
 80011fc:	801a      	strh	r2, [r3, #0]
		break;
 80011fe:	e000      	b.n	8001202 <ILI9341_SetRotation+0x8e>
	default:
		break;
 8001200:	bf00      	nop
	}
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000002 	.word	0x20000002
 8001210:	20000000 	.word	0x20000000

08001214 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8001214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001218:	b08d      	sub	sp, #52	; 0x34
 800121a:	af00      	add	r7, sp, #0
 800121c:	4603      	mov	r3, r0
 800121e:	6039      	str	r1, [r7, #0]
 8001220:	80fb      	strh	r3, [r7, #6]
 8001222:	466b      	mov	r3, sp
 8001224:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	; 0x24

	if((size*2) < BURST_MAX_SIZE)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001232:	d202      	bcs.n	800123a <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
 8001238:	e002      	b.n	8001240 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 800123a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001240:	2201      	movs	r2, #1
 8001242:	2104      	movs	r1, #4
 8001244:	483e      	ldr	r0, [pc, #248]	; (8001340 <ILI9341_DrawColorBurst+0x12c>)
 8001246:	f002 fc31 	bl	8003aac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	2102      	movs	r1, #2
 800124e:	483c      	ldr	r0, [pc, #240]	; (8001340 <ILI9341_DrawColorBurst+0x12c>)
 8001250:	f002 fc2c 	bl	8003aac <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	0a1b      	lsrs	r3, r3, #8
 8001258:	b29b      	uxth	r3, r3
 800125a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 800125e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001260:	460b      	mov	r3, r1
 8001262:	3b01      	subs	r3, #1
 8001264:	61fb      	str	r3, [r7, #28]
 8001266:	2300      	movs	r3, #0
 8001268:	4688      	mov	r8, r1
 800126a:	4699      	mov	r9, r3
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001278:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800127c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001280:	2300      	movs	r3, #0
 8001282:	460c      	mov	r4, r1
 8001284:	461d      	mov	r5, r3
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	f04f 0300 	mov.w	r3, #0
 800128e:	00eb      	lsls	r3, r5, #3
 8001290:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001294:	00e2      	lsls	r2, r4, #3
 8001296:	1dcb      	adds	r3, r1, #7
 8001298:	08db      	lsrs	r3, r3, #3
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	ebad 0d03 	sub.w	sp, sp, r3
 80012a0:	466b      	mov	r3, sp
 80012a2:	3300      	adds	r3, #0
 80012a4:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 80012a6:	2300      	movs	r3, #0
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80012aa:	e00e      	b.n	80012ca <ILI9341_DrawColorBurst+0xb6>
	{
		BurstBuffer[j] = chifted;
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b0:	4413      	add	r3, r2
 80012b2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80012b6:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 80012b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ba:	3301      	adds	r3, #1
 80012bc:	88fa      	ldrh	r2, [r7, #6]
 80012be:	b2d1      	uxtb	r1, r2
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 80012c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c6:	3302      	adds	r3, #2
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80012ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d3ec      	bcc.n	80012ac <ILI9341_DrawColorBurst+0x98>
	}

	uint32_t SendingSize = size * 2;
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e0:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80012ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012ec:	fb01 f202 	mul.w	r2, r1, r2
 80012f0:	1a9b      	subs	r3, r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d010      	beq.n	800131c <ILI9341_DrawColorBurst+0x108>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012fe:	e009      	b.n	8001314 <ILI9341_DrawColorBurst+0x100>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8001300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001302:	b29a      	uxth	r2, r3
 8001304:	230a      	movs	r3, #10
 8001306:	69b9      	ldr	r1, [r7, #24]
 8001308:	480e      	ldr	r0, [pc, #56]	; (8001344 <ILI9341_DrawColorBurst+0x130>)
 800130a:	f004 fb53 	bl	80059b4 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 800130e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001310:	3301      	adds	r3, #1
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	429a      	cmp	r2, r3
 800131a:	d3f1      	bcc.n	8001300 <ILI9341_DrawColorBurst+0xec>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	b29a      	uxth	r2, r3
 8001320:	230a      	movs	r3, #10
 8001322:	69b9      	ldr	r1, [r7, #24]
 8001324:	4807      	ldr	r0, [pc, #28]	; (8001344 <ILI9341_DrawColorBurst+0x130>)
 8001326:	f004 fb45 	bl	80059b4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800132a:	2201      	movs	r2, #1
 800132c:	2102      	movs	r1, #2
 800132e:	4804      	ldr	r0, [pc, #16]	; (8001340 <ILI9341_DrawColorBurst+0x12c>)
 8001330:	f002 fbbc 	bl	8003aac <HAL_GPIO_WritePin>
 8001334:	46b5      	mov	sp, r6
}
 8001336:	bf00      	nop
 8001338:	3734      	adds	r7, #52	; 0x34
 800133a:	46bd      	mov	sp, r7
 800133c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001340:	40020800 	.word	0x40020800
 8001344:	20000378 	.word	0x20000378

08001348 <ILI9341_FillScreen>:

/*Colors located int here COLOR_LOCATION */
void ILI9341_FillScreen(uint16_t color)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <ILI9341_FillScreen+0x44>)
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	b29a      	uxth	r2, r3
 8001358:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <ILI9341_FillScreen+0x48>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	b29b      	uxth	r3, r3
 800135e:	2100      	movs	r1, #0
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff fd89 	bl	8000e78 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <ILI9341_FillScreen+0x44>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	b29b      	uxth	r3, r3
 800136c:	461a      	mov	r2, r3
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <ILI9341_FillScreen+0x48>)
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	b29b      	uxth	r3, r3
 8001374:	fb02 f303 	mul.w	r3, r2, r3
 8001378:	461a      	mov	r2, r3
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	4611      	mov	r1, r2
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ff48 	bl	8001214 <ILI9341_DrawColorBurst>
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000002 	.word	0x20000002
 8001390:	20000000 	.word	0x20000000

08001394 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	80fb      	strh	r3, [r7, #6]
 800139e:	460b      	mov	r3, r1
 80013a0:	80bb      	strh	r3, [r7, #4]
 80013a2:	4613      	mov	r3, r2
 80013a4:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80013a6:	4b2c      	ldr	r3, [pc, #176]	; (8001458 <ILI9341_DrawPixel+0xc4>)
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	88fa      	ldrh	r2, [r7, #6]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d24d      	bcs.n	800144e <ILI9341_DrawPixel+0xba>
 80013b2:	4b2a      	ldr	r3, [pc, #168]	; (800145c <ILI9341_DrawPixel+0xc8>)
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	88ba      	ldrh	r2, [r7, #4]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d247      	bcs.n	800144e <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 80013be:	88fb      	ldrh	r3, [r7, #6]
 80013c0:	0a1b      	lsrs	r3, r3, #8
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	753b      	strb	r3, [r7, #20]
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	757b      	strb	r3, [r7, #21]
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	3301      	adds	r3, #1
 80013d2:	121b      	asrs	r3, r3, #8
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	75bb      	strb	r3, [r7, #22]
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	3301      	adds	r3, #1
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 80013e2:	88bb      	ldrh	r3, [r7, #4]
 80013e4:	0a1b      	lsrs	r3, r3, #8
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	743b      	strb	r3, [r7, #16]
 80013ec:	88bb      	ldrh	r3, [r7, #4]
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	747b      	strb	r3, [r7, #17]
 80013f2:	88bb      	ldrh	r3, [r7, #4]
 80013f4:	3301      	adds	r3, #1
 80013f6:	121b      	asrs	r3, r3, #8
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	74bb      	strb	r3, [r7, #18]
 80013fc:	88bb      	ldrh	r3, [r7, #4]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	3301      	adds	r3, #1
 8001402:	b2db      	uxtb	r3, r3
 8001404:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8001406:	887b      	ldrh	r3, [r7, #2]
 8001408:	0a1b      	lsrs	r3, r3, #8
 800140a:	b29b      	uxth	r3, r3
 800140c:	b2db      	uxtb	r3, r3
 800140e:	733b      	strb	r3, [r7, #12]
 8001410:	887b      	ldrh	r3, [r7, #2]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8001416:	202a      	movs	r0, #42	; 0x2a
 8001418:	f7ff fcde 	bl	8000dd8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	2104      	movs	r1, #4
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fd0c 	bl	8000e40 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8001428:	202b      	movs	r0, #43	; 0x2b
 800142a:	f7ff fcd5 	bl	8000dd8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 800142e:	f107 0310 	add.w	r3, r7, #16
 8001432:	2104      	movs	r1, #4
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fd03 	bl	8000e40 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 800143a:	202c      	movs	r0, #44	; 0x2c
 800143c:	f7ff fccc 	bl	8000dd8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	2102      	movs	r1, #2
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fcfa 	bl	8000e40 <ILI9341_WriteBuffer>
 800144c:	e000      	b.n	8001450 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800144e:	bf00      	nop
}
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000002 	.word	0x20000002
 800145c:	20000000 	.word	0x20000000

08001460 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4604      	mov	r4, r0
 8001468:	4608      	mov	r0, r1
 800146a:	4611      	mov	r1, r2
 800146c:	461a      	mov	r2, r3
 800146e:	4623      	mov	r3, r4
 8001470:	80fb      	strh	r3, [r7, #6]
 8001472:	4603      	mov	r3, r0
 8001474:	80bb      	strh	r3, [r7, #4]
 8001476:	460b      	mov	r3, r1
 8001478:	807b      	strh	r3, [r7, #2]
 800147a:	4613      	mov	r3, r2
 800147c:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800147e:	4b24      	ldr	r3, [pc, #144]	; (8001510 <ILI9341_DrawRectangle+0xb0>)
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	b29b      	uxth	r3, r3
 8001484:	88fa      	ldrh	r2, [r7, #6]
 8001486:	429a      	cmp	r2, r3
 8001488:	d23d      	bcs.n	8001506 <ILI9341_DrawRectangle+0xa6>
 800148a:	4b22      	ldr	r3, [pc, #136]	; (8001514 <ILI9341_DrawRectangle+0xb4>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	b29b      	uxth	r3, r3
 8001490:	88ba      	ldrh	r2, [r7, #4]
 8001492:	429a      	cmp	r2, r3
 8001494:	d237      	bcs.n	8001506 <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8001496:	88fa      	ldrh	r2, [r7, #6]
 8001498:	887b      	ldrh	r3, [r7, #2]
 800149a:	4413      	add	r3, r2
 800149c:	4a1c      	ldr	r2, [pc, #112]	; (8001510 <ILI9341_DrawRectangle+0xb0>)
 800149e:	8812      	ldrh	r2, [r2, #0]
 80014a0:	b292      	uxth	r2, r2
 80014a2:	4293      	cmp	r3, r2
 80014a4:	dd05      	ble.n	80014b2 <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 80014a6:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <ILI9341_DrawRectangle+0xb0>)
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 80014b2:	88ba      	ldrh	r2, [r7, #4]
 80014b4:	883b      	ldrh	r3, [r7, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	4a16      	ldr	r2, [pc, #88]	; (8001514 <ILI9341_DrawRectangle+0xb4>)
 80014ba:	8812      	ldrh	r2, [r2, #0]
 80014bc:	b292      	uxth	r2, r2
 80014be:	4293      	cmp	r3, r2
 80014c0:	dd05      	ble.n	80014ce <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <ILI9341_DrawRectangle+0xb4>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	88bb      	ldrh	r3, [r7, #4]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 80014ce:	88fa      	ldrh	r2, [r7, #6]
 80014d0:	887b      	ldrh	r3, [r7, #2]
 80014d2:	4413      	add	r3, r2
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	3b01      	subs	r3, #1
 80014d8:	b29c      	uxth	r4, r3
 80014da:	88ba      	ldrh	r2, [r7, #4]
 80014dc:	883b      	ldrh	r3, [r7, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	3b01      	subs	r3, #1
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	88b9      	ldrh	r1, [r7, #4]
 80014e8:	88f8      	ldrh	r0, [r7, #6]
 80014ea:	4622      	mov	r2, r4
 80014ec:	f7ff fcc4 	bl	8000e78 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 80014f0:	883b      	ldrh	r3, [r7, #0]
 80014f2:	887a      	ldrh	r2, [r7, #2]
 80014f4:	fb02 f303 	mul.w	r3, r2, r3
 80014f8:	461a      	mov	r2, r3
 80014fa:	8b3b      	ldrh	r3, [r7, #24]
 80014fc:	4611      	mov	r1, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fe88 	bl	8001214 <ILI9341_DrawColorBurst>
 8001504:	e000      	b.n	8001508 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001506:	bf00      	nop
}
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	bd90      	pop	{r4, r7, pc}
 800150e:	bf00      	nop
 8001510:	20000002 	.word	0x20000002
 8001514:	20000000 	.word	0x20000000

08001518 <ILI9341_DrawHLine>:

void ILI9341_DrawHLine(uint16_t x, uint16_t y, uint16_t width, uint16_t color)
{
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4604      	mov	r4, r0
 8001520:	4608      	mov	r0, r1
 8001522:	4611      	mov	r1, r2
 8001524:	461a      	mov	r2, r3
 8001526:	4623      	mov	r3, r4
 8001528:	80fb      	strh	r3, [r7, #6]
 800152a:	4603      	mov	r3, r0
 800152c:	80bb      	strh	r3, [r7, #4]
 800152e:	460b      	mov	r3, r1
 8001530:	807b      	strh	r3, [r7, #2]
 8001532:	4613      	mov	r3, r2
 8001534:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001536:	4b18      	ldr	r3, [pc, #96]	; (8001598 <ILI9341_DrawHLine+0x80>)
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	b29b      	uxth	r3, r3
 800153c:	88fa      	ldrh	r2, [r7, #6]
 800153e:	429a      	cmp	r2, r3
 8001540:	d225      	bcs.n	800158e <ILI9341_DrawHLine+0x76>
 8001542:	4b16      	ldr	r3, [pc, #88]	; (800159c <ILI9341_DrawHLine+0x84>)
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	b29b      	uxth	r3, r3
 8001548:	88ba      	ldrh	r2, [r7, #4]
 800154a:	429a      	cmp	r2, r3
 800154c:	d21f      	bcs.n	800158e <ILI9341_DrawHLine+0x76>

	if((x+width-1)>=LCD_WIDTH)
 800154e:	88fa      	ldrh	r2, [r7, #6]
 8001550:	887b      	ldrh	r3, [r7, #2]
 8001552:	4413      	add	r3, r2
 8001554:	4a10      	ldr	r2, [pc, #64]	; (8001598 <ILI9341_DrawHLine+0x80>)
 8001556:	8812      	ldrh	r2, [r2, #0]
 8001558:	b292      	uxth	r2, r2
 800155a:	4293      	cmp	r3, r2
 800155c:	dd05      	ble.n	800156a <ILI9341_DrawHLine+0x52>
	{
		width=LCD_WIDTH-x;
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <ILI9341_DrawHLine+0x80>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	b29a      	uxth	r2, r3
 8001564:	88fb      	ldrh	r3, [r7, #6]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x+width-1, y);
 800156a:	88fa      	ldrh	r2, [r7, #6]
 800156c:	887b      	ldrh	r3, [r7, #2]
 800156e:	4413      	add	r3, r2
 8001570:	b29b      	uxth	r3, r3
 8001572:	3b01      	subs	r3, #1
 8001574:	b29a      	uxth	r2, r3
 8001576:	88bb      	ldrh	r3, [r7, #4]
 8001578:	88b9      	ldrh	r1, [r7, #4]
 800157a:	88f8      	ldrh	r0, [r7, #6]
 800157c:	f7ff fc7c 	bl	8000e78 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, width);
 8001580:	887a      	ldrh	r2, [r7, #2]
 8001582:	883b      	ldrh	r3, [r7, #0]
 8001584:	4611      	mov	r1, r2
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fe44 	bl	8001214 <ILI9341_DrawColorBurst>
 800158c:	e000      	b.n	8001590 <ILI9341_DrawHLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800158e:	bf00      	nop
}
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bd90      	pop	{r4, r7, pc}
 8001596:	bf00      	nop
 8001598:	20000002 	.word	0x20000002
 800159c:	20000000 	.word	0x20000000

080015a0 <ILI9341_DrawVLine>:

void ILI9341_DrawVLine(uint16_t x, uint16_t y, uint16_t height, uint16_t color)
{
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4604      	mov	r4, r0
 80015a8:	4608      	mov	r0, r1
 80015aa:	4611      	mov	r1, r2
 80015ac:	461a      	mov	r2, r3
 80015ae:	4623      	mov	r3, r4
 80015b0:	80fb      	strh	r3, [r7, #6]
 80015b2:	4603      	mov	r3, r0
 80015b4:	80bb      	strh	r3, [r7, #4]
 80015b6:	460b      	mov	r3, r1
 80015b8:	807b      	strh	r3, [r7, #2]
 80015ba:	4613      	mov	r3, r2
 80015bc:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <ILI9341_DrawVLine+0x80>)
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	88fa      	ldrh	r2, [r7, #6]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d225      	bcs.n	8001616 <ILI9341_DrawVLine+0x76>
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <ILI9341_DrawVLine+0x84>)
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	88ba      	ldrh	r2, [r7, #4]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d21f      	bcs.n	8001616 <ILI9341_DrawVLine+0x76>

	if((y+height-1)>=LCD_HEIGHT)
 80015d6:	88ba      	ldrh	r2, [r7, #4]
 80015d8:	887b      	ldrh	r3, [r7, #2]
 80015da:	4413      	add	r3, r2
 80015dc:	4a11      	ldr	r2, [pc, #68]	; (8001624 <ILI9341_DrawVLine+0x84>)
 80015de:	8812      	ldrh	r2, [r2, #0]
 80015e0:	b292      	uxth	r2, r2
 80015e2:	4293      	cmp	r3, r2
 80015e4:	dd05      	ble.n	80015f2 <ILI9341_DrawVLine+0x52>
	{
		height=LCD_HEIGHT-y;
 80015e6:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <ILI9341_DrawVLine+0x84>)
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	88bb      	ldrh	r3, [r7, #4]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x, y+height-1);
 80015f2:	88ba      	ldrh	r2, [r7, #4]
 80015f4:	887b      	ldrh	r3, [r7, #2]
 80015f6:	4413      	add	r3, r2
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	3b01      	subs	r3, #1
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	88fa      	ldrh	r2, [r7, #6]
 8001600:	88b9      	ldrh	r1, [r7, #4]
 8001602:	88f8      	ldrh	r0, [r7, #6]
 8001604:	f7ff fc38 	bl	8000e78 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height);
 8001608:	887a      	ldrh	r2, [r7, #2]
 800160a:	883b      	ldrh	r3, [r7, #0]
 800160c:	4611      	mov	r1, r2
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fe00 	bl	8001214 <ILI9341_DrawColorBurst>
 8001614:	e000      	b.n	8001618 <ILI9341_DrawVLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001616:	bf00      	nop
}
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	bd90      	pop	{r4, r7, pc}
 800161e:	bf00      	nop
 8001620:	20000002 	.word	0x20000002
 8001624:	20000000 	.word	0x20000000

08001628 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();    
 800162e:	2201      	movs	r2, #1
 8001630:	2104      	movs	r1, #4
 8001632:	480c      	ldr	r0, [pc, #48]	; (8001664 <MCP2515_Initialize+0x3c>)
 8001634:	f002 fa3a 	bl	8003aac <HAL_GPIO_WritePin>
  
  uint8_t loop = 10;
 8001638:	230a      	movs	r3, #10
 800163a:	71fb      	strb	r3, [r7, #7]
  
  do {
    /* check SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 800163c:	480a      	ldr	r0, [pc, #40]	; (8001668 <MCP2515_Initialize+0x40>)
 800163e:	f004 ff73 	bl	8006528 <HAL_SPI_GetState>
 8001642:	4603      	mov	r3, r0
 8001644:	2b01      	cmp	r3, #1
 8001646:	d101      	bne.n	800164c <MCP2515_Initialize+0x24>
      return true;
 8001648:	2301      	movs	r3, #1
 800164a:	e006      	b.n	800165a <MCP2515_Initialize+0x32>
    
    loop--;
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	3b01      	subs	r3, #1
 8001650:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1f1      	bne.n	800163c <MCP2515_Initialize+0x14>
      
  return false;
 8001658:	2300      	movs	r3, #0
  /*ilgili SPI hattının boş olup olmadığını 10 defa kontrol ediyor*/
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40020c00 	.word	0x40020c00
 8001668:	200003d0 	.word	0x200003d0

0800166c <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8001672:	2180      	movs	r1, #128	; 0x80
 8001674:	200f      	movs	r0, #15
 8001676:	f000 f879 	bl	800176c <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 800167a:	230a      	movs	r3, #10
 800167c:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 800167e:	200e      	movs	r0, #14
 8001680:	f000 f830 	bl	80016e4 <MCP2515_ReadByte>
 8001684:	4603      	mov	r3, r0
 8001686:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800168a:	2b80      	cmp	r3, #128	; 0x80
 800168c:	d101      	bne.n	8001692 <MCP2515_SetConfigMode+0x26>
      return true;
 800168e:	2301      	movs	r3, #1
 8001690:	e006      	b.n	80016a0 <MCP2515_SetConfigMode+0x34>
    
    loop--;
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	3b01      	subs	r3, #1
 8001696:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1ef      	bne.n	800167e <MCP2515_SetConfigMode+0x12>
  
  return false;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <MCP2515_SetNormalMode>:

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 80016ae:	2100      	movs	r1, #0
 80016b0:	200f      	movs	r0, #15
 80016b2:	f000 f85b 	bl	800176c <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 80016b6:	230a      	movs	r3, #10
 80016b8:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 80016ba:	200e      	movs	r0, #14
 80016bc:	f000 f812 	bl	80016e4 <MCP2515_ReadByte>
 80016c0:	4603      	mov	r3, r0
 80016c2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <MCP2515_SetNormalMode+0x26>
      return true;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e006      	b.n	80016dc <MCP2515_SetNormalMode+0x34>
    
    loop--;
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	3b01      	subs	r3, #1
 80016d2:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1ef      	bne.n	80016ba <MCP2515_SetNormalMode+0x12>
  
  return false;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 80016ee:	2200      	movs	r2, #0
 80016f0:	2104      	movs	r1, #4
 80016f2:	480c      	ldr	r0, [pc, #48]	; (8001724 <MCP2515_ReadByte+0x40>)
 80016f4:	f002 f9da 	bl	8003aac <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ);
 80016f8:	2003      	movs	r0, #3
 80016fa:	f000 f901 	bl	8001900 <SPI_Tx>
  SPI_Tx(address);
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	4618      	mov	r0, r3
 8001702:	f000 f8fd 	bl	8001900 <SPI_Tx>
  retVal = SPI_Rx();
 8001706:	f000 f921 	bl	800194c <SPI_Rx>
 800170a:	4603      	mov	r3, r0
 800170c:	73fb      	strb	r3, [r7, #15]
      
  MCP2515_CS_HIGH();
 800170e:	2201      	movs	r2, #1
 8001710:	2104      	movs	r1, #4
 8001712:	4804      	ldr	r0, [pc, #16]	; (8001724 <MCP2515_ReadByte+0x40>)
 8001714:	f002 f9ca 	bl	8003aac <HAL_GPIO_WritePin>
  
  return retVal;
 8001718:	7bfb      	ldrb	r3, [r7, #15]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40020c00 	.word	0x40020c00

08001728 <MCP2515_ReadRxSequence>:

/* read buffer */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	6039      	str	r1, [r7, #0]
 8001732:	71fb      	strb	r3, [r7, #7]
 8001734:	4613      	mov	r3, r2
 8001736:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001738:	2200      	movs	r2, #0
 800173a:	2104      	movs	r1, #4
 800173c:	480a      	ldr	r0, [pc, #40]	; (8001768 <MCP2515_ReadRxSequence+0x40>)
 800173e:	f002 f9b5 	bl	8003aac <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);        
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	4618      	mov	r0, r3
 8001746:	f000 f8db 	bl	8001900 <SPI_Tx>
  SPI_RxBuffer(data, length);
 800174a:	79bb      	ldrb	r3, [r7, #6]
 800174c:	4619      	mov	r1, r3
 800174e:	6838      	ldr	r0, [r7, #0]
 8001750:	f000 f90c 	bl	800196c <SPI_RxBuffer>
    
  MCP2515_CS_HIGH();
 8001754:	2201      	movs	r2, #1
 8001756:	2104      	movs	r1, #4
 8001758:	4803      	ldr	r0, [pc, #12]	; (8001768 <MCP2515_ReadRxSequence+0x40>)
 800175a:	f002 f9a7 	bl	8003aac <HAL_GPIO_WritePin>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40020c00 	.word	0x40020c00

0800176c <MCP2515_WriteByte>:

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{    
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	460a      	mov	r2, r1
 8001776:	71fb      	strb	r3, [r7, #7]
 8001778:	4613      	mov	r3, r2
 800177a:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();  
 800177c:	2200      	movs	r2, #0
 800177e:	2104      	movs	r1, #4
 8001780:	480b      	ldr	r0, [pc, #44]	; (80017b0 <MCP2515_WriteByte+0x44>)
 8001782:	f002 f993 	bl	8003aac <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 8001786:	2002      	movs	r0, #2
 8001788:	f000 f8ba 	bl	8001900 <SPI_Tx>
  SPI_Tx(address);
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	4618      	mov	r0, r3
 8001790:	f000 f8b6 	bl	8001900 <SPI_Tx>
  SPI_Tx(data);  
 8001794:	79bb      	ldrb	r3, [r7, #6]
 8001796:	4618      	mov	r0, r3
 8001798:	f000 f8b2 	bl	8001900 <SPI_Tx>
    
  MCP2515_CS_HIGH();
 800179c:	2201      	movs	r2, #1
 800179e:	2104      	movs	r1, #4
 80017a0:	4803      	ldr	r0, [pc, #12]	; (80017b0 <MCP2515_WriteByte+0x44>)
 80017a2:	f002 f983 	bl	8003aac <HAL_GPIO_WritePin>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40020c00 	.word	0x40020c00

080017b4 <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	603a      	str	r2, [r7, #0]
 80017be:	71fb      	strb	r3, [r7, #7]
 80017c0:	460b      	mov	r3, r1
 80017c2:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80017c4:	2200      	movs	r2, #0
 80017c6:	2104      	movs	r1, #4
 80017c8:	480e      	ldr	r0, [pc, #56]	; (8001804 <MCP2515_WriteByteSequence+0x50>)
 80017ca:	f002 f96f 	bl	8003aac <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 80017ce:	2002      	movs	r0, #2
 80017d0:	f000 f896 	bl	8001900 <SPI_Tx>
  SPI_Tx(startAddress);
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 f892 	bl	8001900 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 80017dc:	79ba      	ldrb	r2, [r7, #6]
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	3301      	adds	r3, #1
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	4619      	mov	r1, r3
 80017ea:	6838      	ldr	r0, [r7, #0]
 80017ec:	f000 f89a 	bl	8001924 <SPI_TxBuffer>
  
  MCP2515_CS_HIGH();
 80017f0:	2201      	movs	r2, #1
 80017f2:	2104      	movs	r1, #4
 80017f4:	4803      	ldr	r0, [pc, #12]	; (8001804 <MCP2515_WriteByteSequence+0x50>)
 80017f6:	f002 f959 	bl	8003aac <HAL_GPIO_WritePin>
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40020c00 	.word	0x40020c00

08001808 <MCP2515_LoadTxSequence>:

/* write to TxBuffer */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{    
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	4603      	mov	r3, r0
 8001814:	73fb      	strb	r3, [r7, #15]
 8001816:	4613      	mov	r3, r2
 8001818:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 800181a:	2200      	movs	r2, #0
 800181c:	2104      	movs	r1, #4
 800181e:	480e      	ldr	r0, [pc, #56]	; (8001858 <MCP2515_LoadTxSequence+0x50>)
 8001820:	f002 f944 	bl	8003aac <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	4618      	mov	r0, r3
 8001828:	f000 f86a 	bl	8001900 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 800182c:	2104      	movs	r1, #4
 800182e:	68b8      	ldr	r0, [r7, #8]
 8001830:	f000 f878 	bl	8001924 <SPI_TxBuffer>
  SPI_Tx(dlc);
 8001834:	7bbb      	ldrb	r3, [r7, #14]
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f862 	bl	8001900 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 800183c:	7bbb      	ldrb	r3, [r7, #14]
 800183e:	4619      	mov	r1, r3
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 f86f 	bl	8001924 <SPI_TxBuffer>
       
  MCP2515_CS_HIGH();
 8001846:	2201      	movs	r2, #1
 8001848:	2104      	movs	r1, #4
 800184a:	4803      	ldr	r0, [pc, #12]	; (8001858 <MCP2515_LoadTxSequence+0x50>)
 800184c:	f002 f92e 	bl	8003aac <HAL_GPIO_WritePin>
}
 8001850:	bf00      	nop
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40020c00 	.word	0x40020c00

0800185c <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* request to send */
void MCP2515_RequestToSend(uint8_t instruction)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 8001866:	2200      	movs	r2, #0
 8001868:	2104      	movs	r1, #4
 800186a:	4808      	ldr	r0, [pc, #32]	; (800188c <MCP2515_RequestToSend+0x30>)
 800186c:	f002 f91e 	bl	8003aac <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	4618      	mov	r0, r3
 8001874:	f000 f844 	bl	8001900 <SPI_Tx>
      
  MCP2515_CS_HIGH();
 8001878:	2201      	movs	r2, #1
 800187a:	2104      	movs	r1, #4
 800187c:	4803      	ldr	r0, [pc, #12]	; (800188c <MCP2515_RequestToSend+0x30>)
 800187e:	f002 f915 	bl	8003aac <HAL_GPIO_WritePin>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40020c00 	.word	0x40020c00

08001890 <MCP2515_ReadStatus>:

/* read status */
uint8_t MCP2515_ReadStatus(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 8001896:	2200      	movs	r2, #0
 8001898:	2104      	movs	r1, #4
 800189a:	480a      	ldr	r0, [pc, #40]	; (80018c4 <MCP2515_ReadStatus+0x34>)
 800189c:	f002 f906 	bl	8003aac <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ_STATUS);
 80018a0:	20a0      	movs	r0, #160	; 0xa0
 80018a2:	f000 f82d 	bl	8001900 <SPI_Tx>
  retVal = SPI_Rx();
 80018a6:	f000 f851 	bl	800194c <SPI_Rx>
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 80018ae:	2201      	movs	r2, #1
 80018b0:	2104      	movs	r1, #4
 80018b2:	4804      	ldr	r0, [pc, #16]	; (80018c4 <MCP2515_ReadStatus+0x34>)
 80018b4:	f002 f8fa 	bl	8003aac <HAL_GPIO_WritePin>
  
  return retVal;
 80018b8:	79fb      	ldrb	r3, [r7, #7]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40020c00 	.word	0x40020c00

080018c8 <MCP2515_GetRxStatus>:

/* read RX STATUS register */
uint8_t MCP2515_GetRxStatus(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 80018ce:	2200      	movs	r2, #0
 80018d0:	2104      	movs	r1, #4
 80018d2:	480a      	ldr	r0, [pc, #40]	; (80018fc <MCP2515_GetRxStatus+0x34>)
 80018d4:	f002 f8ea 	bl	8003aac <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_RX_STATUS);
 80018d8:	20b0      	movs	r0, #176	; 0xb0
 80018da:	f000 f811 	bl	8001900 <SPI_Tx>
  retVal = SPI_Rx();
 80018de:	f000 f835 	bl	800194c <SPI_Rx>
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 80018e6:	2201      	movs	r2, #1
 80018e8:	2104      	movs	r1, #4
 80018ea:	4804      	ldr	r0, [pc, #16]	; (80018fc <MCP2515_GetRxStatus+0x34>)
 80018ec:	f002 f8de 	bl	8003aac <HAL_GPIO_WritePin>
  
  return retVal;
 80018f0:	79fb      	ldrb	r3, [r7, #7]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40020c00 	.word	0x40020c00

08001900 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 800190a:	1df9      	adds	r1, r7, #7
 800190c:	230a      	movs	r3, #10
 800190e:	2201      	movs	r2, #1
 8001910:	4803      	ldr	r0, [pc, #12]	; (8001920 <SPI_Tx+0x20>)
 8001912:	f004 f84f 	bl	80059b4 <HAL_SPI_Transmit>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200003d0 	.word	0x200003d0

08001924 <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 8001930:	78fb      	ldrb	r3, [r7, #3]
 8001932:	b29a      	uxth	r2, r3
 8001934:	230a      	movs	r3, #10
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	4803      	ldr	r0, [pc, #12]	; (8001948 <SPI_TxBuffer+0x24>)
 800193a:	f004 f83b 	bl	80059b4 <HAL_SPI_Transmit>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200003d0 	.word	0x200003d0

0800194c <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8001952:	1df9      	adds	r1, r7, #7
 8001954:	230a      	movs	r3, #10
 8001956:	2201      	movs	r2, #1
 8001958:	4803      	ldr	r0, [pc, #12]	; (8001968 <SPI_Rx+0x1c>)
 800195a:	f004 f967 	bl	8005c2c <HAL_SPI_Receive>
  return retVal;
 800195e:	79fb      	ldrb	r3, [r7, #7]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	200003d0 	.word	0x200003d0

0800196c <SPI_RxBuffer>:

/* SPI Rx wrapper function */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8001978:	78fb      	ldrb	r3, [r7, #3]
 800197a:	b29a      	uxth	r2, r3
 800197c:	230a      	movs	r3, #10
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	4803      	ldr	r0, [pc, #12]	; (8001990 <SPI_RxBuffer+0x24>)
 8001982:	f004 f953 	bl	8005c2c <HAL_SPI_Receive>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200003d0 	.word	0x200003d0

08001994 <MD_Intro>:


PAGE_SETTING pageSetting;

void MD_Intro(void)					// intro animation
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
	canTx(CAR_OPEN);
 800199a:	2006      	movs	r0, #6
 800199c:	f000 fb98 	bl	80020d0 <canTx>
	ILI9341_SetRotation(3);
 80019a0:	2003      	movs	r0, #3
 80019a2:	f7ff fbe7 	bl	8001174 <ILI9341_SetRotation>
	ILI9341_FillScreen(BLACK);
 80019a6:	2000      	movs	r0, #0
 80019a8:	f7ff fcce 	bl	8001348 <ILI9341_FillScreen>
	for(uint8_t i = 0; i < 10; i++)
 80019ac:	2300      	movs	r3, #0
 80019ae:	71fb      	strb	r3, [r7, #7]
 80019b0:	e039      	b.n	8001a26 <MD_Intro+0x92>
	{
		ILI9341_DrawVLine(i*16, 0, 240, CYAN);
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	b298      	uxth	r0, r3
 80019ba:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80019be:	22f0      	movs	r2, #240	; 0xf0
 80019c0:	2100      	movs	r1, #0
 80019c2:	f7ff fded 	bl	80015a0 <ILI9341_DrawVLine>
		ILI9341_DrawHLine(0, i*12, 320, CYAN);
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	461a      	mov	r2, r3
 80019cc:	0052      	lsls	r2, r2, #1
 80019ce:	4413      	add	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	b299      	uxth	r1, r3
 80019d4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80019d8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019dc:	2000      	movs	r0, #0
 80019de:	f7ff fd9b 	bl	8001518 <ILI9341_DrawHLine>
		ILI9341_DrawVLine(320-i*16, 0, 240, CYAN);
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	f1c3 0314 	rsb	r3, r3, #20
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	011b      	lsls	r3, r3, #4
 80019ec:	b298      	uxth	r0, r3
 80019ee:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80019f2:	22f0      	movs	r2, #240	; 0xf0
 80019f4:	2100      	movs	r1, #0
 80019f6:	f7ff fdd3 	bl	80015a0 <ILI9341_DrawVLine>
		ILI9341_DrawHLine(0, 240-i*12, 320, CYAN);
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	461a      	mov	r2, r3
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	33f0      	adds	r3, #240	; 0xf0
 8001a0a:	b299      	uxth	r1, r3
 8001a0c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001a10:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a14:	2000      	movs	r0, #0
 8001a16:	f7ff fd7f 	bl	8001518 <ILI9341_DrawHLine>
		HAL_Delay(175);
 8001a1a:	20af      	movs	r0, #175	; 0xaf
 8001a1c:	f001 fa02 	bl	8002e24 <HAL_Delay>
	for(uint8_t i = 0; i < 10; i++)
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	3301      	adds	r3, #1
 8001a24:	71fb      	strb	r3, [r7, #7]
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	2b09      	cmp	r3, #9
 8001a2a:	d9c2      	bls.n	80019b2 <MD_Intro+0x1e>
	}

	MD_Start();
 8001a2c:	f000 f804 	bl	8001a38 <MD_Start>
}
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <MD_Start>:

void MD_Start()						//first scren
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af02      	add	r7, sp, #8
	ILI9341_FillScreen(CYAN);
 8001a3e:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8001a42:	f7ff fc81 	bl	8001348 <ILI9341_FillScreen>

#define START_POINT			125
#define AUDI_DELAY			600

	char dateTx[20];
	sprintf(dateTx,"%02d/%02d/20%02d",sDate.Date,sDate.Month,sDate.Year);
 8001a46:	4b22      	ldr	r3, [pc, #136]	; (8001ad0 <MD_Start+0x98>)
 8001a48:	789b      	ldrb	r3, [r3, #2]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <MD_Start+0x98>)
 8001a4e:	785b      	ldrb	r3, [r3, #1]
 8001a50:	4619      	mov	r1, r3
 8001a52:	4b1f      	ldr	r3, [pc, #124]	; (8001ad0 <MD_Start+0x98>)
 8001a54:	78db      	ldrb	r3, [r3, #3]
 8001a56:	1d38      	adds	r0, r7, #4
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	491d      	ldr	r1, [pc, #116]	; (8001ad4 <MD_Start+0x9c>)
 8001a5e:	f007 f86d 	bl	8008b3c <siprintf>
	ILI9341_DrawText(dateTx, FONT3, 240, 10, BLACK, CYAN);
 8001a62:	1d38      	adds	r0, r7, #4
 8001a64:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001a68:	9301      	str	r3, [sp, #4]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	230a      	movs	r3, #10
 8001a70:	22f0      	movs	r2, #240	; 0xf0
 8001a72:	4919      	ldr	r1, [pc, #100]	; (8001ad8 <MD_Start+0xa0>)
 8001a74:	f7ff f91d 	bl	8000cb2 <ILI9341_DrawText>

	ILI9341_DrawHollowCircle(125, 100, 20, BLACK);
 8001a78:	2300      	movs	r3, #0
 8001a7a:	2214      	movs	r2, #20
 8001a7c:	2164      	movs	r1, #100	; 0x64
 8001a7e:	207d      	movs	r0, #125	; 0x7d
 8001a80:	f7fe ffec 	bl	8000a5c <ILI9341_DrawHollowCircle>
	HAL_Delay(AUDI_DELAY);
 8001a84:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001a88:	f001 f9cc 	bl	8002e24 <HAL_Delay>
	ILI9341_DrawHollowCircle(START_POINT + 25, 100, 20, BLACK);
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	2214      	movs	r2, #20
 8001a90:	2164      	movs	r1, #100	; 0x64
 8001a92:	2096      	movs	r0, #150	; 0x96
 8001a94:	f7fe ffe2 	bl	8000a5c <ILI9341_DrawHollowCircle>
	HAL_Delay(AUDI_DELAY);
 8001a98:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001a9c:	f001 f9c2 	bl	8002e24 <HAL_Delay>
	ILI9341_DrawHollowCircle(START_POINT + 50, 100, 20, BLACK);
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	2214      	movs	r2, #20
 8001aa4:	2164      	movs	r1, #100	; 0x64
 8001aa6:	20af      	movs	r0, #175	; 0xaf
 8001aa8:	f7fe ffd8 	bl	8000a5c <ILI9341_DrawHollowCircle>
	HAL_Delay(AUDI_DELAY);
 8001aac:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001ab0:	f001 f9b8 	bl	8002e24 <HAL_Delay>
	ILI9341_DrawHollowCircle(START_POINT + 75, 100, 20, BLACK);
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	2214      	movs	r2, #20
 8001ab8:	2164      	movs	r1, #100	; 0x64
 8001aba:	20c8      	movs	r0, #200	; 0xc8
 8001abc:	f7fe ffce 	bl	8000a5c <ILI9341_DrawHollowCircle>
	HAL_Delay(800);
 8001ac0:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001ac4:	f001 f9ae 	bl	8002e24 <HAL_Delay>
}
 8001ac8:	bf00      	nop
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	200004e8 	.word	0x200004e8
 8001ad4:	080092c8 	.word	0x080092c8
 8001ad8:	08009374 	.word	0x08009374

08001adc <MD_MainMenu>:

void MD_MainMenu()
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af02      	add	r7, sp, #8
	ILI9341_FillScreen(CYAN);
 8001ae2:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8001ae6:	f7ff fc2f 	bl	8001348 <ILI9341_FillScreen>

#define START_POINTMain		125
#define AUDI_DELAYMain		100

	char dateTx[20];
	sprintf(dateTx,"%02d/%02d/20%02d",sDate.Date,sDate.Month,sDate.Year);
 8001aea:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <MD_MainMenu+0x90>)
 8001aec:	789b      	ldrb	r3, [r3, #2]
 8001aee:	461a      	mov	r2, r3
 8001af0:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <MD_MainMenu+0x90>)
 8001af2:	785b      	ldrb	r3, [r3, #1]
 8001af4:	4619      	mov	r1, r3
 8001af6:	4b1d      	ldr	r3, [pc, #116]	; (8001b6c <MD_MainMenu+0x90>)
 8001af8:	78db      	ldrb	r3, [r3, #3]
 8001afa:	1d38      	adds	r0, r7, #4
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	460b      	mov	r3, r1
 8001b00:	491b      	ldr	r1, [pc, #108]	; (8001b70 <MD_MainMenu+0x94>)
 8001b02:	f007 f81b 	bl	8008b3c <siprintf>
	ILI9341_DrawText(dateTx, FONT3, 240, 10, BLACK, CYAN);
 8001b06:	1d38      	adds	r0, r7, #4
 8001b08:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001b0c:	9301      	str	r3, [sp, #4]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	230a      	movs	r3, #10
 8001b14:	22f0      	movs	r2, #240	; 0xf0
 8001b16:	4917      	ldr	r1, [pc, #92]	; (8001b74 <MD_MainMenu+0x98>)
 8001b18:	f7ff f8cb 	bl	8000cb2 <ILI9341_DrawText>

	ILI9341_DrawHollowCircle(125, 100, 20, BLACK);
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	2214      	movs	r2, #20
 8001b20:	2164      	movs	r1, #100	; 0x64
 8001b22:	207d      	movs	r0, #125	; 0x7d
 8001b24:	f7fe ff9a 	bl	8000a5c <ILI9341_DrawHollowCircle>
	HAL_Delay(AUDI_DELAYMain);
 8001b28:	2064      	movs	r0, #100	; 0x64
 8001b2a:	f001 f97b 	bl	8002e24 <HAL_Delay>
	ILI9341_DrawHollowCircle(START_POINT + 25, 100, 20, BLACK);
 8001b2e:	2300      	movs	r3, #0
 8001b30:	2214      	movs	r2, #20
 8001b32:	2164      	movs	r1, #100	; 0x64
 8001b34:	2096      	movs	r0, #150	; 0x96
 8001b36:	f7fe ff91 	bl	8000a5c <ILI9341_DrawHollowCircle>
	HAL_Delay(AUDI_DELAYMain);
 8001b3a:	2064      	movs	r0, #100	; 0x64
 8001b3c:	f001 f972 	bl	8002e24 <HAL_Delay>
	ILI9341_DrawHollowCircle(START_POINT + 50, 100, 20, BLACK);
 8001b40:	2300      	movs	r3, #0
 8001b42:	2214      	movs	r2, #20
 8001b44:	2164      	movs	r1, #100	; 0x64
 8001b46:	20af      	movs	r0, #175	; 0xaf
 8001b48:	f7fe ff88 	bl	8000a5c <ILI9341_DrawHollowCircle>
	HAL_Delay(AUDI_DELAYMain);
 8001b4c:	2064      	movs	r0, #100	; 0x64
 8001b4e:	f001 f969 	bl	8002e24 <HAL_Delay>
	ILI9341_DrawHollowCircle(START_POINT + 75, 100, 20, BLACK);
 8001b52:	2300      	movs	r3, #0
 8001b54:	2214      	movs	r2, #20
 8001b56:	2164      	movs	r1, #100	; 0x64
 8001b58:	20c8      	movs	r0, #200	; 0xc8
 8001b5a:	f7fe ff7f 	bl	8000a5c <ILI9341_DrawHollowCircle>
	HAL_Delay(200);
 8001b5e:	20c8      	movs	r0, #200	; 0xc8
 8001b60:	f001 f960 	bl	8002e24 <HAL_Delay>
}
 8001b64:	bf00      	nop
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	200004e8 	.word	0x200004e8
 8001b70:	080092c8 	.word	0x080092c8
 8001b74:	08009374 	.word	0x08009374

08001b78 <MD_TimeSet>:

void MD_TimeSet(void)			//set the time
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
	sTime.Hours = 12;
 8001b7c:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <MD_TimeSet+0x68>)
 8001b7e:	220c      	movs	r2, #12
 8001b80:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = 30;
 8001b82:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <MD_TimeSet+0x68>)
 8001b84:	221e      	movs	r2, #30
 8001b86:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = 0x0;
 8001b88:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <MD_TimeSet+0x68>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	709a      	strb	r2, [r3, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b8e:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <MD_TimeSet+0x68>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <MD_TimeSet+0x68>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	4910      	ldr	r1, [pc, #64]	; (8001be0 <MD_TimeSet+0x68>)
 8001b9e:	4811      	ldr	r0, [pc, #68]	; (8001be4 <MD_TimeSet+0x6c>)
 8001ba0:	f003 f9cc 	bl	8004f3c <HAL_RTC_SetTime>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MD_TimeSet+0x36>
	{
		Error_Handler();
 8001baa:	f000 fe62 	bl	8002872 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <MD_TimeSet+0x70>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]
	sDate.Month = RTC_MONTH_MAY;
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <MD_TimeSet+0x70>)
 8001bb6:	2205      	movs	r2, #5
 8001bb8:	705a      	strb	r2, [r3, #1]
	sDate.Date = 0x6;
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <MD_TimeSet+0x70>)
 8001bbc:	2206      	movs	r2, #6
 8001bbe:	709a      	strb	r2, [r3, #2]
	sDate.Year = 23;
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <MD_TimeSet+0x70>)
 8001bc2:	2217      	movs	r2, #23
 8001bc4:	70da      	strb	r2, [r3, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	4907      	ldr	r1, [pc, #28]	; (8001be8 <MD_TimeSet+0x70>)
 8001bca:	4806      	ldr	r0, [pc, #24]	; (8001be4 <MD_TimeSet+0x6c>)
 8001bcc:	f003 faae 	bl	800512c <HAL_RTC_SetDate>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MD_TimeSet+0x62>
	{
		Error_Handler();
 8001bd6:	f000 fe4c 	bl	8002872 <Error_Handler>
	}
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200004d4 	.word	0x200004d4
 8001be4:	20000358 	.word	0x20000358
 8001be8:	200004e8 	.word	0x200004e8

08001bec <MD_TimerConfig>:

void MD_TimerConfig()
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af02      	add	r7, sp, #8
	ILI9341_FillScreen(CYAN);
 8001bf2:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8001bf6:	f7ff fba7 	bl	8001348 <ILI9341_FillScreen>
	ILI9341_DrawText("ALARM KUR : ", FONT4, 50, 110, RED, CYAN);
 8001bfa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001bfe:	9301      	str	r3, [sp, #4]
 8001c00:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	236e      	movs	r3, #110	; 0x6e
 8001c08:	2232      	movs	r2, #50	; 0x32
 8001c0a:	4912      	ldr	r1, [pc, #72]	; (8001c54 <MD_TimerConfig+0x68>)
 8001c0c:	4812      	ldr	r0, [pc, #72]	; (8001c58 <MD_TimerConfig+0x6c>)
 8001c0e:	f7ff f850 	bl	8000cb2 <ILI9341_DrawText>
	char txTime[20];
	sprintf(txTime,"%02d:%02d:%02d",pageSetting.hour, pageSetting.minute, pageSetting.minute);
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <MD_TimerConfig+0x70>)
 8001c14:	78db      	ldrb	r3, [r3, #3]
 8001c16:	461a      	mov	r2, r3
 8001c18:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <MD_TimerConfig+0x70>)
 8001c1a:	791b      	ldrb	r3, [r3, #4]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <MD_TimerConfig+0x70>)
 8001c20:	791b      	ldrb	r3, [r3, #4]
 8001c22:	1d38      	adds	r0, r7, #4
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	460b      	mov	r3, r1
 8001c28:	490d      	ldr	r1, [pc, #52]	; (8001c60 <MD_TimerConfig+0x74>)
 8001c2a:	f006 ff87 	bl	8008b3c <siprintf>
	ILI9341_DrawText(txTime, FONT4, 190, 110, RED, CYAN);
 8001c2e:	1d38      	adds	r0, r7, #4
 8001c30:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001c34:	9301      	str	r3, [sp, #4]
 8001c36:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	236e      	movs	r3, #110	; 0x6e
 8001c3e:	22be      	movs	r2, #190	; 0xbe
 8001c40:	4904      	ldr	r1, [pc, #16]	; (8001c54 <MD_TimerConfig+0x68>)
 8001c42:	f7ff f836 	bl	8000cb2 <ILI9341_DrawText>
	pageSetting.pageNumber = PAGE2;
 8001c46:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <MD_TimerConfig+0x70>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	705a      	strb	r2, [r3, #1]
}
 8001c4c:	bf00      	nop
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	08009cd8 	.word	0x08009cd8
 8001c58:	080092dc 	.word	0x080092dc
 8001c5c:	2000009c 	.word	0x2000009c
 8001c60:	080092ec 	.word	0x080092ec

08001c64 <MD_SetAlarm>:

void MD_SetAlarm()			//set alarm structure *Note interrupt does not work work in polling mode
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
	pageSetting.alarm = ALARM_ON;
 8001c68:	4b1c      	ldr	r3, [pc, #112]	; (8001cdc <MD_SetAlarm+0x78>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	719a      	strb	r2, [r3, #6]
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001c6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c72:	481b      	ldr	r0, [pc, #108]	; (8001ce0 <MD_SetAlarm+0x7c>)
 8001c74:	f003 fc70 	bl	8005558 <HAL_RTC_DeactivateAlarm>
	sAlarm.AlarmTime.Hours = pageSetting.hour;
 8001c78:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <MD_SetAlarm+0x78>)
 8001c7a:	78da      	ldrb	r2, [r3, #3]
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <MD_SetAlarm+0x80>)
 8001c7e:	701a      	strb	r2, [r3, #0]
	sAlarm.AlarmTime.Minutes = pageSetting.minute;
 8001c80:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <MD_SetAlarm+0x78>)
 8001c82:	791a      	ldrb	r2, [r3, #4]
 8001c84:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <MD_SetAlarm+0x80>)
 8001c86:	705a      	strb	r2, [r3, #1]
	sAlarm.AlarmTime.Seconds = pageSetting.second;
 8001c88:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <MD_SetAlarm+0x78>)
 8001c8a:	795a      	ldrb	r2, [r3, #5]
 8001c8c:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <MD_SetAlarm+0x80>)
 8001c8e:	709a      	strb	r2, [r3, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <MD_SetAlarm+0x80>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	605a      	str	r2, [r3, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c96:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <MD_SetAlarm+0x80>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	60da      	str	r2, [r3, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <MD_SetAlarm+0x80>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	611a      	str	r2, [r3, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <MD_SetAlarm+0x80>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001ca8:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <MD_SetAlarm+0x80>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	619a      	str	r2, [r3, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001cae:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <MD_SetAlarm+0x80>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	61da      	str	r2, [r3, #28]
	sAlarm.AlarmDateWeekDay = 0x1;
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <MD_SetAlarm+0x80>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2020 	strb.w	r2, [r3, #32]
	sAlarm.Alarm = RTC_ALARM_A;
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <MD_SetAlarm+0x80>)
 8001cbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cc2:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	4907      	ldr	r1, [pc, #28]	; (8001ce4 <MD_SetAlarm+0x80>)
 8001cc8:	4805      	ldr	r0, [pc, #20]	; (8001ce0 <MD_SetAlarm+0x7c>)
 8001cca:	f003 fb03 	bl	80052d4 <HAL_RTC_SetAlarm_IT>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MD_SetAlarm+0x74>
	{
		Error_Handler();
 8001cd4:	f000 fdcd 	bl	8002872 <Error_Handler>
	}
}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	2000009c 	.word	0x2000009c
 8001ce0:	20000358 	.word	0x20000358
 8001ce4:	200004ec 	.word	0x200004ec

08001ce8 <MD_IsAlarm>:

uint8_t MD_IsAlarm()		//return 1 if come alarm time
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
	if(sTime.Hours == sAlarm.AlarmTime.Hours && sTime.Minutes == sAlarm.AlarmTime.Minutes && sAlarm.AlarmTime.Seconds == sTime.Seconds && pageSetting.alarm == ALARM_ON)
 8001cec:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <MD_IsAlarm+0x48>)
 8001cee:	781a      	ldrb	r2, [r3, #0]
 8001cf0:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <MD_IsAlarm+0x4c>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d114      	bne.n	8001d22 <MD_IsAlarm+0x3a>
 8001cf8:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <MD_IsAlarm+0x48>)
 8001cfa:	785a      	ldrb	r2, [r3, #1]
 8001cfc:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <MD_IsAlarm+0x4c>)
 8001cfe:	785b      	ldrb	r3, [r3, #1]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d10e      	bne.n	8001d22 <MD_IsAlarm+0x3a>
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <MD_IsAlarm+0x4c>)
 8001d06:	789a      	ldrb	r2, [r3, #2]
 8001d08:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <MD_IsAlarm+0x48>)
 8001d0a:	789b      	ldrb	r3, [r3, #2]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d108      	bne.n	8001d22 <MD_IsAlarm+0x3a>
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <MD_IsAlarm+0x50>)
 8001d12:	799b      	ldrb	r3, [r3, #6]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d104      	bne.n	8001d22 <MD_IsAlarm+0x3a>
	{
		pageSetting.alarm = ALARM_OFF;
 8001d18:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <MD_IsAlarm+0x50>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	719a      	strb	r2, [r3, #6]
		return 1;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <MD_IsAlarm+0x3c>
	}
	else
		return 0;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	200004d4 	.word	0x200004d4
 8001d34:	200004ec 	.word	0x200004ec
 8001d38:	2000009c 	.word	0x2000009c

08001d3c <irfCanTask>:

#include "canTask.h"


void irfCanTask(uint32_t code)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b0a2      	sub	sp, #136	; 0x88
 8001d40:	af02      	add	r7, sp, #8
 8001d42:	6078      	str	r0, [r7, #4]
	/*Close and back command*/
	switch(code)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a9b      	ldr	r2, [pc, #620]	; (8001fb4 <irfCanTask+0x278>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d03a      	beq.n	8001dc2 <irfCanTask+0x86>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a99      	ldr	r2, [pc, #612]	; (8001fb4 <irfCanTask+0x278>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	f200 81b1 	bhi.w	80020b8 <irfCanTask+0x37c>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a97      	ldr	r2, [pc, #604]	; (8001fb8 <irfCanTask+0x27c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d02b      	beq.n	8001db6 <irfCanTask+0x7a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a95      	ldr	r2, [pc, #596]	; (8001fb8 <irfCanTask+0x27c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	f200 81a8 	bhi.w	80020b8 <irfCanTask+0x37c>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a94      	ldr	r2, [pc, #592]	; (8001fbc <irfCanTask+0x280>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	f000 8184 	beq.w	800207a <irfCanTask+0x33e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a91      	ldr	r2, [pc, #580]	; (8001fbc <irfCanTask+0x280>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	f200 819e 	bhi.w	80020b8 <irfCanTask+0x37c>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a90      	ldr	r2, [pc, #576]	; (8001fc0 <irfCanTask+0x284>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	f000 80d9 	beq.w	8001f38 <irfCanTask+0x1fc>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a8d      	ldr	r2, [pc, #564]	; (8001fc0 <irfCanTask+0x284>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	f200 8194 	bhi.w	80020b8 <irfCanTask+0x37c>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a8c      	ldr	r2, [pc, #560]	; (8001fc4 <irfCanTask+0x288>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d028      	beq.n	8001dea <irfCanTask+0xae>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a8a      	ldr	r2, [pc, #552]	; (8001fc4 <irfCanTask+0x288>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	f200 818b 	bhi.w	80020b8 <irfCanTask+0x37c>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a88      	ldr	r2, [pc, #544]	; (8001fc8 <irfCanTask+0x28c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	f000 8177 	beq.w	800209a <irfCanTask+0x35e>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a87      	ldr	r2, [pc, #540]	; (8001fcc <irfCanTask+0x290>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d02c      	beq.n	8001e0e <irfCanTask+0xd2>
		else
			pageSetting.location = SECOND;
	break;

	}
}
 8001db4:	e180      	b.n	80020b8 <irfCanTask+0x37c>
		MD_Intro();									//intro animation
 8001db6:	f7ff fded 	bl	8001994 <MD_Intro>
		pageSetting.lock = LOCK_OFF;				// unlock the main screen
 8001dba:	4b85      	ldr	r3, [pc, #532]	; (8001fd0 <irfCanTask+0x294>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
	break;
 8001dc0:	e17a      	b.n	80020b8 <irfCanTask+0x37c>
		if(pageSetting.pageNumber == PAGE1)
 8001dc2:	4b83      	ldr	r3, [pc, #524]	; (8001fd0 <irfCanTask+0x294>)
 8001dc4:	785b      	ldrb	r3, [r3, #1]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d109      	bne.n	8001dde <irfCanTask+0xa2>
			ILI9341_FillScreen(BLACK);				//close command
 8001dca:	2000      	movs	r0, #0
 8001dcc:	f7ff fabc 	bl	8001348 <ILI9341_FillScreen>
			pageSetting.lock = LOCK_ON;
 8001dd0:	4b7f      	ldr	r3, [pc, #508]	; (8001fd0 <irfCanTask+0x294>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	701a      	strb	r2, [r3, #0]
			canTx(CAR_CLOSE);
 8001dd6:	2005      	movs	r0, #5
 8001dd8:	f000 f97a 	bl	80020d0 <canTx>
	break;
 8001ddc:	e16c      	b.n	80020b8 <irfCanTask+0x37c>
			MD_MainMenu();
 8001dde:	f7ff fe7d 	bl	8001adc <MD_MainMenu>
			pageSetting.pageNumber = PAGE1;			//back command
 8001de2:	4b7b      	ldr	r3, [pc, #492]	; (8001fd0 <irfCanTask+0x294>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	705a      	strb	r2, [r3, #1]
	break;
 8001de8:	e166      	b.n	80020b8 <irfCanTask+0x37c>
		if(pageSetting.pageNumber == PAGE1)
 8001dea:	4b79      	ldr	r3, [pc, #484]	; (8001fd0 <irfCanTask+0x294>)
 8001dec:	785b      	ldrb	r3, [r3, #1]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d102      	bne.n	8001df8 <irfCanTask+0xbc>
			MD_TimerConfig();						//alarm page
 8001df2:	f7ff fefb 	bl	8001bec <MD_TimerConfig>
	break;
 8001df6:	e15f      	b.n	80020b8 <irfCanTask+0x37c>
			MD_SetAlarm();
 8001df8:	f7ff ff34 	bl	8001c64 <MD_SetAlarm>
			pageSetting.pageNumber = PAGE1;			//alarm save
 8001dfc:	4b74      	ldr	r3, [pc, #464]	; (8001fd0 <irfCanTask+0x294>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	705a      	strb	r2, [r3, #1]
			pageSetting.alarm = ALARM_ON;
 8001e02:	4b73      	ldr	r3, [pc, #460]	; (8001fd0 <irfCanTask+0x294>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	719a      	strb	r2, [r3, #6]
			MD_MainMenu();
 8001e08:	f7ff fe68 	bl	8001adc <MD_MainMenu>
	break;
 8001e0c:	e154      	b.n	80020b8 <irfCanTask+0x37c>
		if(pageSetting.location == HOUR)
 8001e0e:	4b70      	ldr	r3, [pc, #448]	; (8001fd0 <irfCanTask+0x294>)
 8001e10:	789b      	ldrb	r3, [r3, #2]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d12e      	bne.n	8001e74 <irfCanTask+0x138>
			pageSetting.hour = (pageSetting.hour + 1) % 13;
 8001e16:	4b6e      	ldr	r3, [pc, #440]	; (8001fd0 <irfCanTask+0x294>)
 8001e18:	78db      	ldrb	r3, [r3, #3]
 8001e1a:	1c59      	adds	r1, r3, #1
 8001e1c:	4b6d      	ldr	r3, [pc, #436]	; (8001fd4 <irfCanTask+0x298>)
 8001e1e:	fb83 2301 	smull	r2, r3, r3, r1
 8001e22:	109a      	asrs	r2, r3, #2
 8001e24:	17cb      	asrs	r3, r1, #31
 8001e26:	1ad2      	subs	r2, r2, r3
 8001e28:	4613      	mov	r3, r2
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4413      	add	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	1aca      	subs	r2, r1, r3
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	4b66      	ldr	r3, [pc, #408]	; (8001fd0 <irfCanTask+0x294>)
 8001e38:	70da      	strb	r2, [r3, #3]
			sprintf(txTime,"%02d:%02d:%02d",pageSetting.hour,pageSetting.minute, pageSetting.second);
 8001e3a:	4b65      	ldr	r3, [pc, #404]	; (8001fd0 <irfCanTask+0x294>)
 8001e3c:	78db      	ldrb	r3, [r3, #3]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	4b63      	ldr	r3, [pc, #396]	; (8001fd0 <irfCanTask+0x294>)
 8001e42:	791b      	ldrb	r3, [r3, #4]
 8001e44:	4619      	mov	r1, r3
 8001e46:	4b62      	ldr	r3, [pc, #392]	; (8001fd0 <irfCanTask+0x294>)
 8001e48:	795b      	ldrb	r3, [r3, #5]
 8001e4a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	460b      	mov	r3, r1
 8001e52:	4961      	ldr	r1, [pc, #388]	; (8001fd8 <irfCanTask+0x29c>)
 8001e54:	f006 fe72 	bl	8008b3c <siprintf>
			ILI9341_DrawText(txTime, FONT4, 190, 110, RED, CYAN);
 8001e58:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8001e5c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001e60:	9301      	str	r3, [sp, #4]
 8001e62:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	236e      	movs	r3, #110	; 0x6e
 8001e6a:	22be      	movs	r2, #190	; 0xbe
 8001e6c:	495b      	ldr	r1, [pc, #364]	; (8001fdc <irfCanTask+0x2a0>)
 8001e6e:	f7fe ff20 	bl	8000cb2 <ILI9341_DrawText>
	break;
 8001e72:	e121      	b.n	80020b8 <irfCanTask+0x37c>
		else if(pageSetting.location == MINUTE)
 8001e74:	4b56      	ldr	r3, [pc, #344]	; (8001fd0 <irfCanTask+0x294>)
 8001e76:	789b      	ldrb	r3, [r3, #2]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d12e      	bne.n	8001eda <irfCanTask+0x19e>
			pageSetting.minute = (pageSetting.minute + 1) % 61;
 8001e7c:	4b54      	ldr	r3, [pc, #336]	; (8001fd0 <irfCanTask+0x294>)
 8001e7e:	791b      	ldrb	r3, [r3, #4]
 8001e80:	1c59      	adds	r1, r3, #1
 8001e82:	4b57      	ldr	r3, [pc, #348]	; (8001fe0 <irfCanTask+0x2a4>)
 8001e84:	fb83 2301 	smull	r2, r3, r3, r1
 8001e88:	111a      	asrs	r2, r3, #4
 8001e8a:	17cb      	asrs	r3, r1, #31
 8001e8c:	1ad2      	subs	r2, r2, r3
 8001e8e:	4613      	mov	r3, r2
 8001e90:	011b      	lsls	r3, r3, #4
 8001e92:	1a9b      	subs	r3, r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	1aca      	subs	r2, r1, r3
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	4b4c      	ldr	r3, [pc, #304]	; (8001fd0 <irfCanTask+0x294>)
 8001e9e:	711a      	strb	r2, [r3, #4]
			sprintf(txTime,"%02d:%02d:%02d",pageSetting.hour,pageSetting.minute, pageSetting.second);
 8001ea0:	4b4b      	ldr	r3, [pc, #300]	; (8001fd0 <irfCanTask+0x294>)
 8001ea2:	78db      	ldrb	r3, [r3, #3]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b4a      	ldr	r3, [pc, #296]	; (8001fd0 <irfCanTask+0x294>)
 8001ea8:	791b      	ldrb	r3, [r3, #4]
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4b48      	ldr	r3, [pc, #288]	; (8001fd0 <irfCanTask+0x294>)
 8001eae:	795b      	ldrb	r3, [r3, #5]
 8001eb0:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4947      	ldr	r1, [pc, #284]	; (8001fd8 <irfCanTask+0x29c>)
 8001eba:	f006 fe3f 	bl	8008b3c <siprintf>
			ILI9341_DrawText(txTime, FONT4, 190, 110, RED, CYAN);
 8001ebe:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001ec2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001ec6:	9301      	str	r3, [sp, #4]
 8001ec8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	236e      	movs	r3, #110	; 0x6e
 8001ed0:	22be      	movs	r2, #190	; 0xbe
 8001ed2:	4942      	ldr	r1, [pc, #264]	; (8001fdc <irfCanTask+0x2a0>)
 8001ed4:	f7fe feed 	bl	8000cb2 <ILI9341_DrawText>
	break;
 8001ed8:	e0ee      	b.n	80020b8 <irfCanTask+0x37c>
			pageSetting.second = (pageSetting.second + 1) % 61;
 8001eda:	4b3d      	ldr	r3, [pc, #244]	; (8001fd0 <irfCanTask+0x294>)
 8001edc:	795b      	ldrb	r3, [r3, #5]
 8001ede:	1c59      	adds	r1, r3, #1
 8001ee0:	4b3f      	ldr	r3, [pc, #252]	; (8001fe0 <irfCanTask+0x2a4>)
 8001ee2:	fb83 2301 	smull	r2, r3, r3, r1
 8001ee6:	111a      	asrs	r2, r3, #4
 8001ee8:	17cb      	asrs	r3, r1, #31
 8001eea:	1ad2      	subs	r2, r2, r3
 8001eec:	4613      	mov	r3, r2
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	1aca      	subs	r2, r1, r3
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	4b35      	ldr	r3, [pc, #212]	; (8001fd0 <irfCanTask+0x294>)
 8001efc:	715a      	strb	r2, [r3, #5]
			sprintf(txTime,"%02d:%02d:%02d",pageSetting.hour,pageSetting.minute, pageSetting.second);
 8001efe:	4b34      	ldr	r3, [pc, #208]	; (8001fd0 <irfCanTask+0x294>)
 8001f00:	78db      	ldrb	r3, [r3, #3]
 8001f02:	461a      	mov	r2, r3
 8001f04:	4b32      	ldr	r3, [pc, #200]	; (8001fd0 <irfCanTask+0x294>)
 8001f06:	791b      	ldrb	r3, [r3, #4]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4b31      	ldr	r3, [pc, #196]	; (8001fd0 <irfCanTask+0x294>)
 8001f0c:	795b      	ldrb	r3, [r3, #5]
 8001f0e:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	460b      	mov	r3, r1
 8001f16:	4930      	ldr	r1, [pc, #192]	; (8001fd8 <irfCanTask+0x29c>)
 8001f18:	f006 fe10 	bl	8008b3c <siprintf>
			ILI9341_DrawText(txTime, FONT4, 190, 110, RED, CYAN);
 8001f1c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001f20:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001f24:	9301      	str	r3, [sp, #4]
 8001f26:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	236e      	movs	r3, #110	; 0x6e
 8001f2e:	22be      	movs	r2, #190	; 0xbe
 8001f30:	492a      	ldr	r1, [pc, #168]	; (8001fdc <irfCanTask+0x2a0>)
 8001f32:	f7fe febe 	bl	8000cb2 <ILI9341_DrawText>
	break;
 8001f36:	e0bf      	b.n	80020b8 <irfCanTask+0x37c>
		if(pageSetting.location == HOUR)
 8001f38:	4b25      	ldr	r3, [pc, #148]	; (8001fd0 <irfCanTask+0x294>)
 8001f3a:	789b      	ldrb	r3, [r3, #2]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d12a      	bne.n	8001f96 <irfCanTask+0x25a>
			if(pageSetting.hour != 0)
 8001f40:	4b23      	ldr	r3, [pc, #140]	; (8001fd0 <irfCanTask+0x294>)
 8001f42:	78db      	ldrb	r3, [r3, #3]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d006      	beq.n	8001f56 <irfCanTask+0x21a>
				pageSetting.hour--;
 8001f48:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <irfCanTask+0x294>)
 8001f4a:	78db      	ldrb	r3, [r3, #3]
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	4b1f      	ldr	r3, [pc, #124]	; (8001fd0 <irfCanTask+0x294>)
 8001f52:	70da      	strb	r2, [r3, #3]
 8001f54:	e002      	b.n	8001f5c <irfCanTask+0x220>
				pageSetting.hour = 12;
 8001f56:	4b1e      	ldr	r3, [pc, #120]	; (8001fd0 <irfCanTask+0x294>)
 8001f58:	220c      	movs	r2, #12
 8001f5a:	70da      	strb	r2, [r3, #3]
			sprintf(txTime,"%02d:%02d:%02d",pageSetting.hour,pageSetting.minute, pageSetting.second);
 8001f5c:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <irfCanTask+0x294>)
 8001f5e:	78db      	ldrb	r3, [r3, #3]
 8001f60:	461a      	mov	r2, r3
 8001f62:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <irfCanTask+0x294>)
 8001f64:	791b      	ldrb	r3, [r3, #4]
 8001f66:	4619      	mov	r1, r3
 8001f68:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <irfCanTask+0x294>)
 8001f6a:	795b      	ldrb	r3, [r3, #5]
 8001f6c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	460b      	mov	r3, r1
 8001f74:	4918      	ldr	r1, [pc, #96]	; (8001fd8 <irfCanTask+0x29c>)
 8001f76:	f006 fde1 	bl	8008b3c <siprintf>
			ILI9341_DrawText(txTime, FONT4, 190, 110, RED, CYAN);
 8001f7a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001f7e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001f82:	9301      	str	r3, [sp, #4]
 8001f84:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	236e      	movs	r3, #110	; 0x6e
 8001f8c:	22be      	movs	r2, #190	; 0xbe
 8001f8e:	4913      	ldr	r1, [pc, #76]	; (8001fdc <irfCanTask+0x2a0>)
 8001f90:	f7fe fe8f 	bl	8000cb2 <ILI9341_DrawText>
	break;
 8001f94:	e090      	b.n	80020b8 <irfCanTask+0x37c>
		else if(pageSetting.location == MINUTE)
 8001f96:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <irfCanTask+0x294>)
 8001f98:	789b      	ldrb	r3, [r3, #2]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d142      	bne.n	8002024 <irfCanTask+0x2e8>
			if(pageSetting.minute != 0)
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <irfCanTask+0x294>)
 8001fa0:	791b      	ldrb	r3, [r3, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d01e      	beq.n	8001fe4 <irfCanTask+0x2a8>
				pageSetting.minute--;
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <irfCanTask+0x294>)
 8001fa8:	791b      	ldrb	r3, [r3, #4]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <irfCanTask+0x294>)
 8001fb0:	711a      	strb	r2, [r3, #4]
 8001fb2:	e01a      	b.n	8001fea <irfCanTask+0x2ae>
 8001fb4:	00ffb04f 	.word	0x00ffb04f
 8001fb8:	00ff6897 	.word	0x00ff6897
 8001fbc:	00ff5aa5 	.word	0x00ff5aa5
 8001fc0:	00ff4ab5 	.word	0x00ff4ab5
 8001fc4:	00ff38c7 	.word	0x00ff38c7
 8001fc8:	00ff10ef 	.word	0x00ff10ef
 8001fcc:	00ff18e7 	.word	0x00ff18e7
 8001fd0:	2000009c 	.word	0x2000009c
 8001fd4:	4ec4ec4f 	.word	0x4ec4ec4f
 8001fd8:	080092fc 	.word	0x080092fc
 8001fdc:	08009cd8 	.word	0x08009cd8
 8001fe0:	4325c53f 	.word	0x4325c53f
				pageSetting.minute = 60;
 8001fe4:	4b36      	ldr	r3, [pc, #216]	; (80020c0 <irfCanTask+0x384>)
 8001fe6:	223c      	movs	r2, #60	; 0x3c
 8001fe8:	711a      	strb	r2, [r3, #4]
			sprintf(txTime,"%02d:%02d:%02d",pageSetting.hour,pageSetting.minute, pageSetting.second);
 8001fea:	4b35      	ldr	r3, [pc, #212]	; (80020c0 <irfCanTask+0x384>)
 8001fec:	78db      	ldrb	r3, [r3, #3]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4b33      	ldr	r3, [pc, #204]	; (80020c0 <irfCanTask+0x384>)
 8001ff2:	791b      	ldrb	r3, [r3, #4]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4b32      	ldr	r3, [pc, #200]	; (80020c0 <irfCanTask+0x384>)
 8001ff8:	795b      	ldrb	r3, [r3, #5]
 8001ffa:	f107 001c 	add.w	r0, r7, #28
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	460b      	mov	r3, r1
 8002002:	4930      	ldr	r1, [pc, #192]	; (80020c4 <irfCanTask+0x388>)
 8002004:	f006 fd9a 	bl	8008b3c <siprintf>
			ILI9341_DrawText(txTime, FONT4, 190, 110, RED, CYAN);
 8002008:	f107 001c 	add.w	r0, r7, #28
 800200c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002010:	9301      	str	r3, [sp, #4]
 8002012:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	236e      	movs	r3, #110	; 0x6e
 800201a:	22be      	movs	r2, #190	; 0xbe
 800201c:	492a      	ldr	r1, [pc, #168]	; (80020c8 <irfCanTask+0x38c>)
 800201e:	f7fe fe48 	bl	8000cb2 <ILI9341_DrawText>
	break;
 8002022:	e049      	b.n	80020b8 <irfCanTask+0x37c>
			if(pageSetting.second != 0)
 8002024:	4b26      	ldr	r3, [pc, #152]	; (80020c0 <irfCanTask+0x384>)
 8002026:	795b      	ldrb	r3, [r3, #5]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d006      	beq.n	800203a <irfCanTask+0x2fe>
				pageSetting.second--;
 800202c:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <irfCanTask+0x384>)
 800202e:	795b      	ldrb	r3, [r3, #5]
 8002030:	3b01      	subs	r3, #1
 8002032:	b2da      	uxtb	r2, r3
 8002034:	4b22      	ldr	r3, [pc, #136]	; (80020c0 <irfCanTask+0x384>)
 8002036:	715a      	strb	r2, [r3, #5]
 8002038:	e002      	b.n	8002040 <irfCanTask+0x304>
				pageSetting.second = 60;
 800203a:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <irfCanTask+0x384>)
 800203c:	223c      	movs	r2, #60	; 0x3c
 800203e:	715a      	strb	r2, [r3, #5]
			sprintf(txTime,"%02d:%02d:%02d",pageSetting.hour,pageSetting.minute, pageSetting.second);
 8002040:	4b1f      	ldr	r3, [pc, #124]	; (80020c0 <irfCanTask+0x384>)
 8002042:	78db      	ldrb	r3, [r3, #3]
 8002044:	461a      	mov	r2, r3
 8002046:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <irfCanTask+0x384>)
 8002048:	791b      	ldrb	r3, [r3, #4]
 800204a:	4619      	mov	r1, r3
 800204c:	4b1c      	ldr	r3, [pc, #112]	; (80020c0 <irfCanTask+0x384>)
 800204e:	795b      	ldrb	r3, [r3, #5]
 8002050:	f107 0008 	add.w	r0, r7, #8
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	460b      	mov	r3, r1
 8002058:	491a      	ldr	r1, [pc, #104]	; (80020c4 <irfCanTask+0x388>)
 800205a:	f006 fd6f 	bl	8008b3c <siprintf>
			ILI9341_DrawText(txTime, FONT4, 190, 110, RED, CYAN);
 800205e:	f107 0008 	add.w	r0, r7, #8
 8002062:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002066:	9301      	str	r3, [sp, #4]
 8002068:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	236e      	movs	r3, #110	; 0x6e
 8002070:	22be      	movs	r2, #190	; 0xbe
 8002072:	4915      	ldr	r1, [pc, #84]	; (80020c8 <irfCanTask+0x38c>)
 8002074:	f7fe fe1d 	bl	8000cb2 <ILI9341_DrawText>
	break;
 8002078:	e01e      	b.n	80020b8 <irfCanTask+0x37c>
				pageSetting.location = (pageSetting.location + 1) % 3;
 800207a:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <irfCanTask+0x384>)
 800207c:	789b      	ldrb	r3, [r3, #2]
 800207e:	1c5a      	adds	r2, r3, #1
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <irfCanTask+0x390>)
 8002082:	fb83 3102 	smull	r3, r1, r3, r2
 8002086:	17d3      	asrs	r3, r2, #31
 8002088:	1ac9      	subs	r1, r1, r3
 800208a:	460b      	mov	r3, r1
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	440b      	add	r3, r1
 8002090:	1ad1      	subs	r1, r2, r3
 8002092:	b2ca      	uxtb	r2, r1
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <irfCanTask+0x384>)
 8002096:	709a      	strb	r2, [r3, #2]
	break;
 8002098:	e00e      	b.n	80020b8 <irfCanTask+0x37c>
		if(pageSetting.location != 0)
 800209a:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <irfCanTask+0x384>)
 800209c:	789b      	ldrb	r3, [r3, #2]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d006      	beq.n	80020b0 <irfCanTask+0x374>
			pageSetting.location -= 1;
 80020a2:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <irfCanTask+0x384>)
 80020a4:	789b      	ldrb	r3, [r3, #2]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <irfCanTask+0x384>)
 80020ac:	709a      	strb	r2, [r3, #2]
	break;
 80020ae:	e002      	b.n	80020b6 <irfCanTask+0x37a>
			pageSetting.location = SECOND;
 80020b0:	4b03      	ldr	r3, [pc, #12]	; (80020c0 <irfCanTask+0x384>)
 80020b2:	2202      	movs	r2, #2
 80020b4:	709a      	strb	r2, [r3, #2]
	break;
 80020b6:	bf00      	nop
}
 80020b8:	bf00      	nop
 80020ba:	3780      	adds	r7, #128	; 0x80
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	2000009c 	.word	0x2000009c
 80020c4:	080092fc 	.word	0x080092fc
 80020c8:	08009cd8 	.word	0x08009cd8
 80020cc:	55555556 	.word	0x55555556

080020d0 <canTx>:

void canTx(uint8_t msg)		// can transmit line
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
	txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;	//standart can
 80020da:	4b09      	ldr	r3, [pc, #36]	; (8002100 <canTx+0x30>)
 80020dc:	2201      	movs	r2, #1
 80020de:	701a      	strb	r2, [r3, #0]
	txMessage.frame.id = 0x0A;
 80020e0:	4b07      	ldr	r3, [pc, #28]	; (8002100 <canTx+0x30>)
 80020e2:	220a      	movs	r2, #10
 80020e4:	605a      	str	r2, [r3, #4]
	txMessage.frame.dlc = 1;
 80020e6:	4b06      	ldr	r3, [pc, #24]	; (8002100 <canTx+0x30>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	721a      	strb	r2, [r3, #8]
	txMessage.frame.data0 = msg;
 80020ec:	4a04      	ldr	r2, [pc, #16]	; (8002100 <canTx+0x30>)
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	7253      	strb	r3, [r2, #9]
	CANSPI_Transmit(&txMessage);
 80020f2:	4803      	ldr	r0, [pc, #12]	; (8002100 <canTx+0x30>)
 80020f4:	f7fe fb0e 	bl	8000714 <CANSPI_Transmit>
}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20000514 	.word	0x20000514

08002104 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4a07      	ldr	r2, [pc, #28]	; (8002130 <vApplicationGetIdleTaskMemory+0x2c>)
 8002114:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	4a06      	ldr	r2, [pc, #24]	; (8002134 <vApplicationGetIdleTaskMemory+0x30>)
 800211a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2280      	movs	r2, #128	; 0x80
 8002120:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	200000a4 	.word	0x200000a4
 8002134:	20000158 	.word	0x20000158

08002138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002138:	b5b0      	push	{r4, r5, r7, lr}
 800213a:	b090      	sub	sp, #64	; 0x40
 800213c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800213e:	f000 fe2f 	bl	8002da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002142:	f000 f87b 	bl	800223c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002146:	f000 fa31 	bl	80025ac <MX_GPIO_Init>
  MX_DMA_Init();
 800214a:	f000 fa0f 	bl	800256c <MX_DMA_Init>
  MX_SPI1_Init();
 800214e:	f000 f977 	bl	8002440 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002152:	f000 f9e1 	bl	8002518 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8002156:	f000 f8e7 	bl	8002328 <MX_RTC_Init>
  MX_SPI3_Init();
 800215a:	f000 f9a7 	bl	80024ac <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  ILI9341_Init();
 800215e:	f7fe feff 	bl	8000f60 <ILI9341_Init>
  ILI9341_FillScreen(BLACK);
 8002162:	2000      	movs	r0, #0
 8002164:	f7ff f8f0 	bl	8001348 <ILI9341_FillScreen>
  CANSPI_Initialize();
 8002168:	f7fe fa24 	bl	80005b4 <CANSPI_Initialize>
  MD_TimeSet();
 800216c:	f7ff fd04 	bl	8001b78 <MD_TimeSet>

  waitForStart:
  while( (!CANSPI_Receive(&rxMessage)) && (!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET));
 8002170:	bf00      	nop
 8002172:	482b      	ldr	r0, [pc, #172]	; (8002220 <main+0xe8>)
 8002174:	f7fe fb46 	bl	8000804 <CANSPI_Receive>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d107      	bne.n	800218e <main+0x56>
 800217e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002182:	4828      	ldr	r0, [pc, #160]	; (8002224 <main+0xec>)
 8002184:	f001 fc7a 	bl	8003a7c <HAL_GPIO_ReadPin>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f1      	bne.n	8002172 <main+0x3a>
  if(rxMessage.frame.dlc !=0)
 800218e:	4b24      	ldr	r3, [pc, #144]	; (8002220 <main+0xe8>)
 8002190:	7a1b      	ldrb	r3, [r3, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d01a      	beq.n	80021cc <main+0x94>
  {
	  uint32_t irfCode = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	63fb      	str	r3, [r7, #60]	; 0x3c
	  irfCode |= rxMessage.frame.data0;
 800219a:	4b21      	ldr	r3, [pc, #132]	; (8002220 <main+0xe8>)
 800219c:	7a5b      	ldrb	r3, [r3, #9]
 800219e:	461a      	mov	r2, r3
 80021a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021a2:	4313      	orrs	r3, r2
 80021a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	  irfCode |= rxMessage.frame.data1 << 8;
 80021a6:	4b1e      	ldr	r3, [pc, #120]	; (8002220 <main+0xe8>)
 80021a8:	7a9b      	ldrb	r3, [r3, #10]
 80021aa:	021b      	lsls	r3, r3, #8
 80021ac:	461a      	mov	r2, r3
 80021ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021b0:	4313      	orrs	r3, r2
 80021b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	  irfCode |= rxMessage.frame.data2 << 16;
 80021b4:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <main+0xe8>)
 80021b6:	7adb      	ldrb	r3, [r3, #11]
 80021b8:	041b      	lsls	r3, r3, #16
 80021ba:	461a      	mov	r2, r3
 80021bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021be:	4313      	orrs	r3, r2
 80021c0:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if(irfCode != IRF_STAR)
 80021c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021c4:	4a18      	ldr	r2, [pc, #96]	; (8002228 <main+0xf0>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d000      	beq.n	80021cc <main+0x94>
		  goto waitForStart;
 80021ca:	e7d1      	b.n	8002170 <main+0x38>
  }
  MD_Intro();
 80021cc:	f7ff fbe2 	bl	8001994 <MD_Intro>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, timerTask, osPriorityNormal, 0, 2900);
 80021d0:	4b16      	ldr	r3, [pc, #88]	; (800222c <main+0xf4>)
 80021d2:	f107 0420 	add.w	r4, r7, #32
 80021d6:	461d      	mov	r5, r3
 80021d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80021e4:	f107 0320 	add.w	r3, r7, #32
 80021e8:	2100      	movs	r1, #0
 80021ea:	4618      	mov	r0, r3
 80021ec:	f005 f8ff 	bl	80073ee <osThreadCreate>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4a0f      	ldr	r2, [pc, #60]	; (8002230 <main+0xf8>)
 80021f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, canTask, osPriorityIdle, 0, 600);
 80021f6:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <main+0xfc>)
 80021f8:	1d3c      	adds	r4, r7, #4
 80021fa:	461d      	mov	r5, r3
 80021fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002200:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002204:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8002208:	1d3b      	adds	r3, r7, #4
 800220a:	2100      	movs	r1, #0
 800220c:	4618      	mov	r0, r3
 800220e:	f005 f8ee 	bl	80073ee <osThreadCreate>
 8002212:	4603      	mov	r3, r0
 8002214:	4a08      	ldr	r2, [pc, #32]	; (8002238 <main+0x100>)
 8002216:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002218:	f005 f8e2 	bl	80073e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800221c:	e7fe      	b.n	800221c <main+0xe4>
 800221e:	bf00      	nop
 8002220:	20000528 	.word	0x20000528
 8002224:	40020800 	.word	0x40020800
 8002228:	00ff6897 	.word	0x00ff6897
 800222c:	08009324 	.word	0x08009324
 8002230:	200004cc 	.word	0x200004cc
 8002234:	08009340 	.word	0x08009340
 8002238:	200004d0 	.word	0x200004d0

0800223c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b094      	sub	sp, #80	; 0x50
 8002240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002242:	f107 031c 	add.w	r3, r7, #28
 8002246:	2234      	movs	r2, #52	; 0x34
 8002248:	2100      	movs	r1, #0
 800224a:	4618      	mov	r0, r3
 800224c:	f006 fb60 	bl	8008910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002250:	f107 0308 	add.w	r3, r7, #8
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002260:	2300      	movs	r3, #0
 8002262:	607b      	str	r3, [r7, #4]
 8002264:	4b2e      	ldr	r3, [pc, #184]	; (8002320 <SystemClock_Config+0xe4>)
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	4a2d      	ldr	r2, [pc, #180]	; (8002320 <SystemClock_Config+0xe4>)
 800226a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800226e:	6413      	str	r3, [r2, #64]	; 0x40
 8002270:	4b2b      	ldr	r3, [pc, #172]	; (8002320 <SystemClock_Config+0xe4>)
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002278:	607b      	str	r3, [r7, #4]
 800227a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800227c:	2300      	movs	r3, #0
 800227e:	603b      	str	r3, [r7, #0]
 8002280:	4b28      	ldr	r3, [pc, #160]	; (8002324 <SystemClock_Config+0xe8>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a27      	ldr	r2, [pc, #156]	; (8002324 <SystemClock_Config+0xe8>)
 8002286:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	4b25      	ldr	r3, [pc, #148]	; (8002324 <SystemClock_Config+0xe8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002294:	603b      	str	r3, [r7, #0]
 8002296:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002298:	230a      	movs	r3, #10
 800229a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800229c:	2300      	movs	r3, #0
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022a0:	2301      	movs	r3, #1
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022a4:	2310      	movs	r3, #16
 80022a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80022a8:	2301      	movs	r3, #1
 80022aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022ac:	2302      	movs	r3, #2
 80022ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022b0:	2300      	movs	r3, #0
 80022b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80022b4:	2308      	movs	r3, #8
 80022b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80022b8:	23b4      	movs	r3, #180	; 0xb4
 80022ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022bc:	2302      	movs	r3, #2
 80022be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80022c0:	2302      	movs	r3, #2
 80022c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80022c4:	2302      	movs	r3, #2
 80022c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022c8:	f107 031c 	add.w	r3, r7, #28
 80022cc:	4618      	mov	r0, r3
 80022ce:	f002 fb21 	bl	8004914 <HAL_RCC_OscConfig>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80022d8:	f000 facb 	bl	8002872 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80022dc:	f001 fc24 	bl	8003b28 <HAL_PWREx_EnableOverDrive>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <SystemClock_Config+0xae>
  {
    Error_Handler();
 80022e6:	f000 fac4 	bl	8002872 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ea:	230f      	movs	r3, #15
 80022ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022ee:	2302      	movs	r3, #2
 80022f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002300:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002302:	f107 0308 	add.w	r3, r7, #8
 8002306:	2105      	movs	r1, #5
 8002308:	4618      	mov	r0, r3
 800230a:	f001 fc5d 	bl	8003bc8 <HAL_RCC_ClockConfig>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8002314:	f000 faad 	bl	8002872 <Error_Handler>
  }
}
 8002318:	bf00      	nop
 800231a:	3750      	adds	r7, #80	; 0x50
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40023800 	.word	0x40023800
 8002324:	40007000 	.word	0x40007000

08002328 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b090      	sub	sp, #64	; 0x40
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800232e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	605a      	str	r2, [r3, #4]
 8002338:	609a      	str	r2, [r3, #8]
 800233a:	60da      	str	r2, [r3, #12]
 800233c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800233e:	2300      	movs	r3, #0
 8002340:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8002342:	463b      	mov	r3, r7
 8002344:	2228      	movs	r2, #40	; 0x28
 8002346:	2100      	movs	r1, #0
 8002348:	4618      	mov	r0, r3
 800234a:	f006 fae1 	bl	8008910 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800234e:	4b3a      	ldr	r3, [pc, #232]	; (8002438 <MX_RTC_Init+0x110>)
 8002350:	4a3a      	ldr	r2, [pc, #232]	; (800243c <MX_RTC_Init+0x114>)
 8002352:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002354:	4b38      	ldr	r3, [pc, #224]	; (8002438 <MX_RTC_Init+0x110>)
 8002356:	2200      	movs	r2, #0
 8002358:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800235a:	4b37      	ldr	r3, [pc, #220]	; (8002438 <MX_RTC_Init+0x110>)
 800235c:	227f      	movs	r2, #127	; 0x7f
 800235e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002360:	4b35      	ldr	r3, [pc, #212]	; (8002438 <MX_RTC_Init+0x110>)
 8002362:	22ff      	movs	r2, #255	; 0xff
 8002364:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002366:	4b34      	ldr	r3, [pc, #208]	; (8002438 <MX_RTC_Init+0x110>)
 8002368:	2200      	movs	r2, #0
 800236a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800236c:	4b32      	ldr	r3, [pc, #200]	; (8002438 <MX_RTC_Init+0x110>)
 800236e:	2200      	movs	r2, #0
 8002370:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002372:	4b31      	ldr	r3, [pc, #196]	; (8002438 <MX_RTC_Init+0x110>)
 8002374:	2200      	movs	r2, #0
 8002376:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002378:	482f      	ldr	r0, [pc, #188]	; (8002438 <MX_RTC_Init+0x110>)
 800237a:	f002 fd69 	bl	8004e50 <HAL_RTC_Init>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002384:	f000 fa75 	bl	8002872 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002388:	2300      	movs	r3, #0
 800238a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 800238e:	2300      	movs	r3, #0
 8002390:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8002394:	2300      	movs	r3, #0
 8002396:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800239a:	2300      	movs	r3, #0
 800239c:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800239e:	2300      	movs	r3, #0
 80023a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80023a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023a6:	2201      	movs	r2, #1
 80023a8:	4619      	mov	r1, r3
 80023aa:	4823      	ldr	r0, [pc, #140]	; (8002438 <MX_RTC_Init+0x110>)
 80023ac:	f002 fdc6 	bl	8004f3c <HAL_RTC_SetTime>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80023b6:	f000 fa5c 	bl	8002872 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80023ba:	2301      	movs	r3, #1
 80023bc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80023c0:	2301      	movs	r3, #1
 80023c2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80023c6:	2301      	movs	r3, #1
 80023c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80023d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023d6:	2201      	movs	r2, #1
 80023d8:	4619      	mov	r1, r3
 80023da:	4817      	ldr	r0, [pc, #92]	; (8002438 <MX_RTC_Init+0x110>)
 80023dc:	f002 fea6 	bl	800512c <HAL_RTC_SetDate>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80023e6:	f000 fa44 	bl	8002872 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 12;
 80023ea:	230c      	movs	r3, #12
 80023ec:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 30;
 80023ee:	231e      	movs	r3, #30
 80023f0:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 10;
 80023f2:	230a      	movs	r3, #10
 80023f4:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80023fe:	2300      	movs	r3, #0
 8002400:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002406:	2300      	movs	r3, #0
 8002408:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800240e:	2301      	movs	r3, #1
 8002410:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002414:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800241a:	463b      	mov	r3, r7
 800241c:	2201      	movs	r2, #1
 800241e:	4619      	mov	r1, r3
 8002420:	4805      	ldr	r0, [pc, #20]	; (8002438 <MX_RTC_Init+0x110>)
 8002422:	f002 ff57 	bl	80052d4 <HAL_RTC_SetAlarm_IT>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 800242c:	f000 fa21 	bl	8002872 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002430:	bf00      	nop
 8002432:	3740      	adds	r7, #64	; 0x40
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20000358 	.word	0x20000358
 800243c:	40002800 	.word	0x40002800

08002440 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002444:	4b17      	ldr	r3, [pc, #92]	; (80024a4 <MX_SPI1_Init+0x64>)
 8002446:	4a18      	ldr	r2, [pc, #96]	; (80024a8 <MX_SPI1_Init+0x68>)
 8002448:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800244a:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <MX_SPI1_Init+0x64>)
 800244c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002450:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002452:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <MX_SPI1_Init+0x64>)
 8002454:	2200      	movs	r2, #0
 8002456:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002458:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <MX_SPI1_Init+0x64>)
 800245a:	2200      	movs	r2, #0
 800245c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800245e:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <MX_SPI1_Init+0x64>)
 8002460:	2200      	movs	r2, #0
 8002462:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002464:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <MX_SPI1_Init+0x64>)
 8002466:	2200      	movs	r2, #0
 8002468:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800246a:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <MX_SPI1_Init+0x64>)
 800246c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002470:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002472:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <MX_SPI1_Init+0x64>)
 8002474:	2200      	movs	r2, #0
 8002476:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002478:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <MX_SPI1_Init+0x64>)
 800247a:	2200      	movs	r2, #0
 800247c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800247e:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <MX_SPI1_Init+0x64>)
 8002480:	2200      	movs	r2, #0
 8002482:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002484:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <MX_SPI1_Init+0x64>)
 8002486:	2200      	movs	r2, #0
 8002488:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <MX_SPI1_Init+0x64>)
 800248c:	220a      	movs	r2, #10
 800248e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002490:	4804      	ldr	r0, [pc, #16]	; (80024a4 <MX_SPI1_Init+0x64>)
 8002492:	f003 fa06 	bl	80058a2 <HAL_SPI_Init>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800249c:	f000 f9e9 	bl	8002872 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024a0:	bf00      	nop
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20000378 	.word	0x20000378
 80024a8:	40013000 	.word	0x40013000

080024ac <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80024b0:	4b17      	ldr	r3, [pc, #92]	; (8002510 <MX_SPI3_Init+0x64>)
 80024b2:	4a18      	ldr	r2, [pc, #96]	; (8002514 <MX_SPI3_Init+0x68>)
 80024b4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80024b6:	4b16      	ldr	r3, [pc, #88]	; (8002510 <MX_SPI3_Init+0x64>)
 80024b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024bc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80024be:	4b14      	ldr	r3, [pc, #80]	; (8002510 <MX_SPI3_Init+0x64>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80024c4:	4b12      	ldr	r3, [pc, #72]	; (8002510 <MX_SPI3_Init+0x64>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024ca:	4b11      	ldr	r3, [pc, #68]	; (8002510 <MX_SPI3_Init+0x64>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024d0:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <MX_SPI3_Init+0x64>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80024d6:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <MX_SPI3_Init+0x64>)
 80024d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024dc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024de:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <MX_SPI3_Init+0x64>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024e4:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <MX_SPI3_Init+0x64>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80024ea:	4b09      	ldr	r3, [pc, #36]	; (8002510 <MX_SPI3_Init+0x64>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024f0:	4b07      	ldr	r3, [pc, #28]	; (8002510 <MX_SPI3_Init+0x64>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <MX_SPI3_Init+0x64>)
 80024f8:	220a      	movs	r2, #10
 80024fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80024fc:	4804      	ldr	r0, [pc, #16]	; (8002510 <MX_SPI3_Init+0x64>)
 80024fe:	f003 f9d0 	bl	80058a2 <HAL_SPI_Init>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002508:	f000 f9b3 	bl	8002872 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800250c:	bf00      	nop
 800250e:	bd80      	pop	{r7, pc}
 8002510:	200003d0 	.word	0x200003d0
 8002514:	40003c00 	.word	0x40003c00

08002518 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800251c:	4b11      	ldr	r3, [pc, #68]	; (8002564 <MX_USART2_UART_Init+0x4c>)
 800251e:	4a12      	ldr	r2, [pc, #72]	; (8002568 <MX_USART2_UART_Init+0x50>)
 8002520:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002522:	4b10      	ldr	r3, [pc, #64]	; (8002564 <MX_USART2_UART_Init+0x4c>)
 8002524:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002528:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800252a:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <MX_USART2_UART_Init+0x4c>)
 800252c:	2200      	movs	r2, #0
 800252e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <MX_USART2_UART_Init+0x4c>)
 8002532:	2200      	movs	r2, #0
 8002534:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002536:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <MX_USART2_UART_Init+0x4c>)
 8002538:	2200      	movs	r2, #0
 800253a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800253c:	4b09      	ldr	r3, [pc, #36]	; (8002564 <MX_USART2_UART_Init+0x4c>)
 800253e:	220c      	movs	r2, #12
 8002540:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002542:	4b08      	ldr	r3, [pc, #32]	; (8002564 <MX_USART2_UART_Init+0x4c>)
 8002544:	2200      	movs	r2, #0
 8002546:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <MX_USART2_UART_Init+0x4c>)
 800254a:	2200      	movs	r2, #0
 800254c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800254e:	4805      	ldr	r0, [pc, #20]	; (8002564 <MX_USART2_UART_Init+0x4c>)
 8002550:	f004 fc6c 	bl	8006e2c <HAL_UART_Init>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800255a:	f000 f98a 	bl	8002872 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000488 	.word	0x20000488
 8002568:	40004400 	.word	0x40004400

0800256c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	607b      	str	r3, [r7, #4]
 8002576:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <MX_DMA_Init+0x3c>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	4a0b      	ldr	r2, [pc, #44]	; (80025a8 <MX_DMA_Init+0x3c>)
 800257c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002580:	6313      	str	r3, [r2, #48]	; 0x30
 8002582:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <MX_DMA_Init+0x3c>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800258e:	2200      	movs	r2, #0
 8002590:	2105      	movs	r1, #5
 8002592:	203b      	movs	r0, #59	; 0x3b
 8002594:	f000 fd22 	bl	8002fdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002598:	203b      	movs	r0, #59	; 0x3b
 800259a:	f000 fd3b 	bl	8003014 <HAL_NVIC_EnableIRQ>

}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40023800 	.word	0x40023800

080025ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08a      	sub	sp, #40	; 0x28
 80025b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b2:	f107 0314 	add.w	r3, r7, #20
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	609a      	str	r2, [r3, #8]
 80025be:	60da      	str	r2, [r3, #12]
 80025c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	4b42      	ldr	r3, [pc, #264]	; (80026d0 <MX_GPIO_Init+0x124>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	4a41      	ldr	r2, [pc, #260]	; (80026d0 <MX_GPIO_Init+0x124>)
 80025cc:	f043 0304 	orr.w	r3, r3, #4
 80025d0:	6313      	str	r3, [r2, #48]	; 0x30
 80025d2:	4b3f      	ldr	r3, [pc, #252]	; (80026d0 <MX_GPIO_Init+0x124>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	613b      	str	r3, [r7, #16]
 80025dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	4b3b      	ldr	r3, [pc, #236]	; (80026d0 <MX_GPIO_Init+0x124>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	4a3a      	ldr	r2, [pc, #232]	; (80026d0 <MX_GPIO_Init+0x124>)
 80025e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ec:	6313      	str	r3, [r2, #48]	; 0x30
 80025ee:	4b38      	ldr	r3, [pc, #224]	; (80026d0 <MX_GPIO_Init+0x124>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	4b34      	ldr	r3, [pc, #208]	; (80026d0 <MX_GPIO_Init+0x124>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	4a33      	ldr	r2, [pc, #204]	; (80026d0 <MX_GPIO_Init+0x124>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6313      	str	r3, [r2, #48]	; 0x30
 800260a:	4b31      	ldr	r3, [pc, #196]	; (80026d0 <MX_GPIO_Init+0x124>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	607b      	str	r3, [r7, #4]
 800261a:	4b2d      	ldr	r3, [pc, #180]	; (80026d0 <MX_GPIO_Init+0x124>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	4a2c      	ldr	r2, [pc, #176]	; (80026d0 <MX_GPIO_Init+0x124>)
 8002620:	f043 0308 	orr.w	r3, r3, #8
 8002624:	6313      	str	r3, [r2, #48]	; 0x30
 8002626:	4b2a      	ldr	r3, [pc, #168]	; (80026d0 <MX_GPIO_Init+0x124>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	607b      	str	r3, [r7, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	603b      	str	r3, [r7, #0]
 8002636:	4b26      	ldr	r3, [pc, #152]	; (80026d0 <MX_GPIO_Init+0x124>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	4a25      	ldr	r2, [pc, #148]	; (80026d0 <MX_GPIO_Init+0x124>)
 800263c:	f043 0302 	orr.w	r3, r3, #2
 8002640:	6313      	str	r3, [r2, #48]	; 0x30
 8002642:	4b23      	ldr	r3, [pc, #140]	; (80026d0 <MX_GPIO_Init+0x124>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	603b      	str	r3, [r7, #0]
 800264c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800264e:	2200      	movs	r2, #0
 8002650:	210e      	movs	r1, #14
 8002652:	4820      	ldr	r0, [pc, #128]	; (80026d4 <MX_GPIO_Init+0x128>)
 8002654:	f001 fa2a 	bl	8003aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_RESET);
 8002658:	2200      	movs	r2, #0
 800265a:	2104      	movs	r1, #4
 800265c:	481e      	ldr	r0, [pc, #120]	; (80026d8 <MX_GPIO_Init+0x12c>)
 800265e:	f001 fa25 	bl	8003aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002662:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002668:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800266c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002672:	f107 0314 	add.w	r3, r7, #20
 8002676:	4619      	mov	r1, r3
 8002678:	4816      	ldr	r0, [pc, #88]	; (80026d4 <MX_GPIO_Init+0x128>)
 800267a:	f001 f86b 	bl	8003754 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin;
 800267e:	230e      	movs	r3, #14
 8002680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002682:	2301      	movs	r3, #1
 8002684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268a:	2300      	movs	r3, #0
 800268c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800268e:	f107 0314 	add.w	r3, r7, #20
 8002692:	4619      	mov	r1, r3
 8002694:	480f      	ldr	r0, [pc, #60]	; (80026d4 <MX_GPIO_Init+0x128>)
 8002696:	f001 f85d 	bl	8003754 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_CS_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 800269a:	2304      	movs	r3, #4
 800269c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800269e:	2301      	movs	r3, #1
 80026a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a6:	2300      	movs	r3, #0
 80026a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 80026aa:	f107 0314 	add.w	r3, r7, #20
 80026ae:	4619      	mov	r1, r3
 80026b0:	4809      	ldr	r0, [pc, #36]	; (80026d8 <MX_GPIO_Init+0x12c>)
 80026b2:	f001 f84f 	bl	8003754 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80026b6:	2200      	movs	r2, #0
 80026b8:	2105      	movs	r1, #5
 80026ba:	2028      	movs	r0, #40	; 0x28
 80026bc:	f000 fc8e 	bl	8002fdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80026c0:	2028      	movs	r0, #40	; 0x28
 80026c2:	f000 fca7 	bl	8003014 <HAL_NVIC_EnableIRQ>

}
 80026c6:	bf00      	nop
 80026c8:	3728      	adds	r7, #40	; 0x28
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40020800 	.word	0x40020800
 80026d8:	40020c00 	.word	0x40020c00

080026dc <timerTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_timerTask */
void timerTask(void const * argument)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af02      	add	r7, sp, #8
 80026e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80026e4:	2200      	movs	r2, #0
 80026e6:	491c      	ldr	r1, [pc, #112]	; (8002758 <timerTask+0x7c>)
 80026e8:	481c      	ldr	r0, [pc, #112]	; (800275c <timerTask+0x80>)
 80026ea:	f002 fcc1 	bl	8005070 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80026ee:	2200      	movs	r2, #0
 80026f0:	491b      	ldr	r1, [pc, #108]	; (8002760 <timerTask+0x84>)
 80026f2:	481a      	ldr	r0, [pc, #104]	; (800275c <timerTask+0x80>)
 80026f4:	f002 fd9e 	bl	8005234 <HAL_RTC_GetDate>
	  if(sTime.Seconds != secondValue && pageSetting.pageNumber == PAGE1 && pageSetting.lock == LOCK_OFF)
 80026f8:	4b17      	ldr	r3, [pc, #92]	; (8002758 <timerTask+0x7c>)
 80026fa:	789a      	ldrb	r2, [r3, #2]
 80026fc:	4b19      	ldr	r3, [pc, #100]	; (8002764 <timerTask+0x88>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d025      	beq.n	8002750 <timerTask+0x74>
 8002704:	4b18      	ldr	r3, [pc, #96]	; (8002768 <timerTask+0x8c>)
 8002706:	785b      	ldrb	r3, [r3, #1]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d121      	bne.n	8002750 <timerTask+0x74>
 800270c:	4b16      	ldr	r3, [pc, #88]	; (8002768 <timerTask+0x8c>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d11d      	bne.n	8002750 <timerTask+0x74>
	  {
		  secondValue = sTime.Seconds;
 8002714:	4b10      	ldr	r3, [pc, #64]	; (8002758 <timerTask+0x7c>)
 8002716:	789a      	ldrb	r2, [r3, #2]
 8002718:	4b12      	ldr	r3, [pc, #72]	; (8002764 <timerTask+0x88>)
 800271a:	701a      	strb	r2, [r3, #0]
		  sprintf(txTime,"%02d:%02d:%02d",sTime.Hours, sTime.Minutes, sTime.Seconds);
 800271c:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <timerTask+0x7c>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <timerTask+0x7c>)
 8002724:	785b      	ldrb	r3, [r3, #1]
 8002726:	4619      	mov	r1, r3
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <timerTask+0x7c>)
 800272a:	789b      	ldrb	r3, [r3, #2]
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	460b      	mov	r3, r1
 8002730:	490e      	ldr	r1, [pc, #56]	; (800276c <timerTask+0x90>)
 8002732:	480f      	ldr	r0, [pc, #60]	; (8002770 <timerTask+0x94>)
 8002734:	f006 fa02 	bl	8008b3c <siprintf>
		  ILI9341_DrawText(txTime, FONT4, 130, 130, RED, CYAN);
 8002738:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800273c:	9301      	str	r3, [sp, #4]
 800273e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	2382      	movs	r3, #130	; 0x82
 8002746:	2282      	movs	r2, #130	; 0x82
 8002748:	490a      	ldr	r1, [pc, #40]	; (8002774 <timerTask+0x98>)
 800274a:	4809      	ldr	r0, [pc, #36]	; (8002770 <timerTask+0x94>)
 800274c:	f7fe fab1 	bl	8000cb2 <ILI9341_DrawText>
	  }
	  osDelay(200);
 8002750:	20c8      	movs	r0, #200	; 0xc8
 8002752:	f004 fe98 	bl	8007486 <osDelay>
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002756:	e7c5      	b.n	80026e4 <timerTask+0x8>
 8002758:	200004d4 	.word	0x200004d4
 800275c:	20000358 	.word	0x20000358
 8002760:	200004e8 	.word	0x200004e8
 8002764:	20000572 	.word	0x20000572
 8002768:	2000009c 	.word	0x2000009c
 800276c:	0800935c 	.word	0x0800935c
 8002770:	20000540 	.word	0x20000540
 8002774:	08009cd8 	.word	0x08009cd8

08002778 <canTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_canTask */
void canTask(void const * argument)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN canTask */
  /* Infinite loop */
  for(;;)
  {
	  if(CANSPI_Receive(&rxMessage))		/*receiver IRF controller message*/
 8002780:	4830      	ldr	r0, [pc, #192]	; (8002844 <canTask+0xcc>)
 8002782:	f7fe f83f 	bl	8000804 <CANSPI_Receive>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d02a      	beq.n	80027e2 <canTask+0x6a>
	  {
		  uint32_t irfCode = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]
		  uint8_t idType = rxMessage.frame.idType;
 8002790:	4b2c      	ldr	r3, [pc, #176]	; (8002844 <canTask+0xcc>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	74fb      	strb	r3, [r7, #19]
		  uint32_t id = rxMessage.frame.id;
 8002796:	4b2b      	ldr	r3, [pc, #172]	; (8002844 <canTask+0xcc>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	60fb      	str	r3, [r7, #12]
		  uint8_t dlc = rxMessage.frame.dlc;
 800279c:	4b29      	ldr	r3, [pc, #164]	; (8002844 <canTask+0xcc>)
 800279e:	7a1b      	ldrb	r3, [r3, #8]
 80027a0:	72fb      	strb	r3, [r7, #11]

		  if(idType == dSTANDARD_CAN_MSG_ID_2_0B && id == 0x0A && dlc == 3)
 80027a2:	7cfb      	ldrb	r3, [r7, #19]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d11c      	bne.n	80027e2 <canTask+0x6a>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2b0a      	cmp	r3, #10
 80027ac:	d119      	bne.n	80027e2 <canTask+0x6a>
 80027ae:	7afb      	ldrb	r3, [r7, #11]
 80027b0:	2b03      	cmp	r3, #3
 80027b2:	d116      	bne.n	80027e2 <canTask+0x6a>
		  {
			  irfCode |= rxMessage.frame.data0;
 80027b4:	4b23      	ldr	r3, [pc, #140]	; (8002844 <canTask+0xcc>)
 80027b6:	7a5b      	ldrb	r3, [r3, #9]
 80027b8:	461a      	mov	r2, r3
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	4313      	orrs	r3, r2
 80027be:	617b      	str	r3, [r7, #20]
			  irfCode |= rxMessage.frame.data1 <<8;
 80027c0:	4b20      	ldr	r3, [pc, #128]	; (8002844 <canTask+0xcc>)
 80027c2:	7a9b      	ldrb	r3, [r3, #10]
 80027c4:	021b      	lsls	r3, r3, #8
 80027c6:	461a      	mov	r2, r3
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	617b      	str	r3, [r7, #20]
			  irfCode |= rxMessage.frame.data2 << 16;
 80027ce:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <canTask+0xcc>)
 80027d0:	7adb      	ldrb	r3, [r3, #11]
 80027d2:	041b      	lsls	r3, r3, #16
 80027d4:	461a      	mov	r2, r3
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	4313      	orrs	r3, r2
 80027da:	617b      	str	r3, [r7, #20]
			  irfCanTask(irfCode);
 80027dc:	6978      	ldr	r0, [r7, #20]
 80027de:	f7ff faad 	bl	8001d3c <irfCanTask>
		  }
	  }
	  if(MD_IsAlarm())				  		/*Check the alarm time*/
 80027e2:	f7ff fa81 	bl	8001ce8 <MD_IsAlarm>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00e      	beq.n	800280a <canTask+0x92>
	  {
		  if(pageSetting.lock == LOCK_ON)
 80027ec:	4b16      	ldr	r3, [pc, #88]	; (8002848 <canTask+0xd0>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d10a      	bne.n	800280a <canTask+0x92>
		  {
			  canTx(ALARM_ENABLE);
 80027f4:	2007      	movs	r0, #7
 80027f6:	f7ff fc6b 	bl	80020d0 <canTx>
			  MD_Intro();
 80027fa:	f7ff f8cb 	bl	8001994 <MD_Intro>
			  pageSetting.lock = LOCK_OFF;
 80027fe:	4b12      	ldr	r3, [pc, #72]	; (8002848 <canTask+0xd0>)
 8002800:	2200      	movs	r2, #0
 8002802:	701a      	strb	r2, [r3, #0]
			  alarmTimer = 1;
 8002804:	4b11      	ldr	r3, [pc, #68]	; (800284c <canTask+0xd4>)
 8002806:	2201      	movs	r2, #1
 8002808:	601a      	str	r2, [r3, #0]
		  }
	  }										/*if alarm is active start timers*/
	  if(alarmTimer != 0)
 800280a:	4b10      	ldr	r3, [pc, #64]	; (800284c <canTask+0xd4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d004      	beq.n	800281c <canTask+0xa4>
		  alarmTimer++;
 8002812:	4b0e      	ldr	r3, [pc, #56]	; (800284c <canTask+0xd4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	3301      	adds	r3, #1
 8002818:	4a0c      	ldr	r2, [pc, #48]	; (800284c <canTask+0xd4>)
 800281a:	6013      	str	r3, [r2, #0]
	  if(alarmTimer > 1250)					/*20 * 1250 = 15second waiting*/
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <canTask+0xd4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8002824:	4293      	cmp	r3, r2
 8002826:	d908      	bls.n	800283a <canTask+0xc2>
	  {
		  canTx(CAR_CLOSE);
 8002828:	2005      	movs	r0, #5
 800282a:	f7ff fc51 	bl	80020d0 <canTx>
		  irfCanTask(IRF_SQUARE);
 800282e:	4808      	ldr	r0, [pc, #32]	; (8002850 <canTask+0xd8>)
 8002830:	f7ff fa84 	bl	8001d3c <irfCanTask>
		  alarmTimer = 0;
 8002834:	4b05      	ldr	r3, [pc, #20]	; (800284c <canTask+0xd4>)
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
	  }
	  osDelay(20);
 800283a:	2014      	movs	r0, #20
 800283c:	f004 fe23 	bl	8007486 <osDelay>
	  if(CANSPI_Receive(&rxMessage))		/*receiver IRF controller message*/
 8002840:	e79e      	b.n	8002780 <canTask+0x8>
 8002842:	bf00      	nop
 8002844:	20000528 	.word	0x20000528
 8002848:	2000009c 	.word	0x2000009c
 800284c:	2000053c 	.word	0x2000053c
 8002850:	00ffb04f 	.word	0x00ffb04f

08002854 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002864:	d101      	bne.n	800286a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002866:	f000 fabd 	bl	8002de4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002872:	b480      	push	{r7}
 8002874:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002876:	b672      	cpsid	i
}
 8002878:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800287a:	e7fe      	b.n	800287a <Error_Handler+0x8>

0800287c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	607b      	str	r3, [r7, #4]
 8002886:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_MspInit+0x54>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	4a11      	ldr	r2, [pc, #68]	; (80028d0 <HAL_MspInit+0x54>)
 800288c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002890:	6453      	str	r3, [r2, #68]	; 0x44
 8002892:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <HAL_MspInit+0x54>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800289a:	607b      	str	r3, [r7, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	603b      	str	r3, [r7, #0]
 80028a2:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <HAL_MspInit+0x54>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	4a0a      	ldr	r2, [pc, #40]	; (80028d0 <HAL_MspInit+0x54>)
 80028a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ac:	6413      	str	r3, [r2, #64]	; 0x40
 80028ae:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <HAL_MspInit+0x54>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b6:	603b      	str	r3, [r7, #0]
 80028b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80028ba:	2200      	movs	r2, #0
 80028bc:	210f      	movs	r1, #15
 80028be:	f06f 0001 	mvn.w	r0, #1
 80028c2:	f000 fb8b 	bl	8002fdc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40023800 	.word	0x40023800

080028d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b09a      	sub	sp, #104	; 0x68
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028dc:	f107 030c 	add.w	r3, r7, #12
 80028e0:	225c      	movs	r2, #92	; 0x5c
 80028e2:	2100      	movs	r1, #0
 80028e4:	4618      	mov	r0, r3
 80028e6:	f006 f813 	bl	8008910 <memset>
  if(hrtc->Instance==RTC)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a10      	ldr	r2, [pc, #64]	; (8002930 <HAL_RTC_MspInit+0x5c>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d119      	bne.n	8002928 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80028f4:	2320      	movs	r3, #32
 80028f6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80028f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028fe:	f107 030c 	add.w	r3, r7, #12
 8002902:	4618      	mov	r0, r3
 8002904:	f001 faac 	bl	8003e60 <HAL_RCCEx_PeriphCLKConfig>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800290e:	f7ff ffb0 	bl	8002872 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002912:	4b08      	ldr	r3, [pc, #32]	; (8002934 <HAL_RTC_MspInit+0x60>)
 8002914:	2201      	movs	r2, #1
 8002916:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8002918:	2200      	movs	r2, #0
 800291a:	2105      	movs	r1, #5
 800291c:	2029      	movs	r0, #41	; 0x29
 800291e:	f000 fb5d 	bl	8002fdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002922:	2029      	movs	r0, #41	; 0x29
 8002924:	f000 fb76 	bl	8003014 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002928:	bf00      	nop
 800292a:	3768      	adds	r7, #104	; 0x68
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40002800 	.word	0x40002800
 8002934:	42470e3c 	.word	0x42470e3c

08002938 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08c      	sub	sp, #48	; 0x30
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002940:	f107 031c 	add.w	r3, r7, #28
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a4d      	ldr	r2, [pc, #308]	; (8002a8c <HAL_SPI_MspInit+0x154>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d162      	bne.n	8002a20 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	61bb      	str	r3, [r7, #24]
 800295e:	4b4c      	ldr	r3, [pc, #304]	; (8002a90 <HAL_SPI_MspInit+0x158>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	4a4b      	ldr	r2, [pc, #300]	; (8002a90 <HAL_SPI_MspInit+0x158>)
 8002964:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002968:	6453      	str	r3, [r2, #68]	; 0x44
 800296a:	4b49      	ldr	r3, [pc, #292]	; (8002a90 <HAL_SPI_MspInit+0x158>)
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002972:	61bb      	str	r3, [r7, #24]
 8002974:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	4b45      	ldr	r3, [pc, #276]	; (8002a90 <HAL_SPI_MspInit+0x158>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	4a44      	ldr	r2, [pc, #272]	; (8002a90 <HAL_SPI_MspInit+0x158>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	6313      	str	r3, [r2, #48]	; 0x30
 8002986:	4b42      	ldr	r3, [pc, #264]	; (8002a90 <HAL_SPI_MspInit+0x158>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002992:	23e0      	movs	r3, #224	; 0xe0
 8002994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002996:	2302      	movs	r3, #2
 8002998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	2300      	movs	r3, #0
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299e:	2303      	movs	r3, #3
 80029a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029a2:	2305      	movs	r3, #5
 80029a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a6:	f107 031c 	add.w	r3, r7, #28
 80029aa:	4619      	mov	r1, r3
 80029ac:	4839      	ldr	r0, [pc, #228]	; (8002a94 <HAL_SPI_MspInit+0x15c>)
 80029ae:	f000 fed1 	bl	8003754 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80029b2:	4b39      	ldr	r3, [pc, #228]	; (8002a98 <HAL_SPI_MspInit+0x160>)
 80029b4:	4a39      	ldr	r2, [pc, #228]	; (8002a9c <HAL_SPI_MspInit+0x164>)
 80029b6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80029b8:	4b37      	ldr	r3, [pc, #220]	; (8002a98 <HAL_SPI_MspInit+0x160>)
 80029ba:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80029be:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029c0:	4b35      	ldr	r3, [pc, #212]	; (8002a98 <HAL_SPI_MspInit+0x160>)
 80029c2:	2240      	movs	r2, #64	; 0x40
 80029c4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029c6:	4b34      	ldr	r3, [pc, #208]	; (8002a98 <HAL_SPI_MspInit+0x160>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029cc:	4b32      	ldr	r3, [pc, #200]	; (8002a98 <HAL_SPI_MspInit+0x160>)
 80029ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029d2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029d4:	4b30      	ldr	r3, [pc, #192]	; (8002a98 <HAL_SPI_MspInit+0x160>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029da:	4b2f      	ldr	r3, [pc, #188]	; (8002a98 <HAL_SPI_MspInit+0x160>)
 80029dc:	2200      	movs	r2, #0
 80029de:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80029e0:	4b2d      	ldr	r3, [pc, #180]	; (8002a98 <HAL_SPI_MspInit+0x160>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029e6:	4b2c      	ldr	r3, [pc, #176]	; (8002a98 <HAL_SPI_MspInit+0x160>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029ec:	4b2a      	ldr	r3, [pc, #168]	; (8002a98 <HAL_SPI_MspInit+0x160>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80029f2:	4829      	ldr	r0, [pc, #164]	; (8002a98 <HAL_SPI_MspInit+0x160>)
 80029f4:	f000 fb1c 	bl	8003030 <HAL_DMA_Init>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80029fe:	f7ff ff38 	bl	8002872 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a24      	ldr	r2, [pc, #144]	; (8002a98 <HAL_SPI_MspInit+0x160>)
 8002a06:	649a      	str	r2, [r3, #72]	; 0x48
 8002a08:	4a23      	ldr	r2, [pc, #140]	; (8002a98 <HAL_SPI_MspInit+0x160>)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2105      	movs	r1, #5
 8002a12:	2023      	movs	r0, #35	; 0x23
 8002a14:	f000 fae2 	bl	8002fdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002a18:	2023      	movs	r0, #35	; 0x23
 8002a1a:	f000 fafb 	bl	8003014 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002a1e:	e031      	b.n	8002a84 <HAL_SPI_MspInit+0x14c>
  else if(hspi->Instance==SPI3)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a1e      	ldr	r2, [pc, #120]	; (8002aa0 <HAL_SPI_MspInit+0x168>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d12c      	bne.n	8002a84 <HAL_SPI_MspInit+0x14c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	4b18      	ldr	r3, [pc, #96]	; (8002a90 <HAL_SPI_MspInit+0x158>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	4a17      	ldr	r2, [pc, #92]	; (8002a90 <HAL_SPI_MspInit+0x158>)
 8002a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a38:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3a:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <HAL_SPI_MspInit+0x158>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <HAL_SPI_MspInit+0x158>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	4a10      	ldr	r2, [pc, #64]	; (8002a90 <HAL_SPI_MspInit+0x158>)
 8002a50:	f043 0304 	orr.w	r3, r3, #4
 8002a54:	6313      	str	r3, [r2, #48]	; 0x30
 8002a56:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <HAL_SPI_MspInit+0x158>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002a62:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a70:	2303      	movs	r3, #3
 8002a72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a74:	2306      	movs	r3, #6
 8002a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a78:	f107 031c 	add.w	r3, r7, #28
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4809      	ldr	r0, [pc, #36]	; (8002aa4 <HAL_SPI_MspInit+0x16c>)
 8002a80:	f000 fe68 	bl	8003754 <HAL_GPIO_Init>
}
 8002a84:	bf00      	nop
 8002a86:	3730      	adds	r7, #48	; 0x30
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40013000 	.word	0x40013000
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40020000 	.word	0x40020000
 8002a98:	20000428 	.word	0x20000428
 8002a9c:	40026458 	.word	0x40026458
 8002aa0:	40003c00 	.word	0x40003c00
 8002aa4:	40020800 	.word	0x40020800

08002aa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08a      	sub	sp, #40	; 0x28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab0:	f107 0314 	add.w	r3, r7, #20
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	60da      	str	r2, [r3, #12]
 8002abe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a19      	ldr	r2, [pc, #100]	; (8002b2c <HAL_UART_MspInit+0x84>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d12b      	bne.n	8002b22 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	4b18      	ldr	r3, [pc, #96]	; (8002b30 <HAL_UART_MspInit+0x88>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	4a17      	ldr	r2, [pc, #92]	; (8002b30 <HAL_UART_MspInit+0x88>)
 8002ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8002ada:	4b15      	ldr	r3, [pc, #84]	; (8002b30 <HAL_UART_MspInit+0x88>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <HAL_UART_MspInit+0x88>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	4a10      	ldr	r2, [pc, #64]	; (8002b30 <HAL_UART_MspInit+0x88>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	6313      	str	r3, [r2, #48]	; 0x30
 8002af6:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <HAL_UART_MspInit+0x88>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b02:	230c      	movs	r3, #12
 8002b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b06:	2302      	movs	r3, #2
 8002b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b12:	2307      	movs	r3, #7
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b16:	f107 0314 	add.w	r3, r7, #20
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4805      	ldr	r0, [pc, #20]	; (8002b34 <HAL_UART_MspInit+0x8c>)
 8002b1e:	f000 fe19 	bl	8003754 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b22:	bf00      	nop
 8002b24:	3728      	adds	r7, #40	; 0x28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40004400 	.word	0x40004400
 8002b30:	40023800 	.word	0x40023800
 8002b34:	40020000 	.word	0x40020000

08002b38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08e      	sub	sp, #56	; 0x38
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	4b34      	ldr	r3, [pc, #208]	; (8002c20 <HAL_InitTick+0xe8>)
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	4a33      	ldr	r2, [pc, #204]	; (8002c20 <HAL_InitTick+0xe8>)
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	6413      	str	r3, [r2, #64]	; 0x40
 8002b58:	4b31      	ldr	r3, [pc, #196]	; (8002c20 <HAL_InitTick+0xe8>)
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b64:	f107 0210 	add.w	r2, r7, #16
 8002b68:	f107 0314 	add.w	r3, r7, #20
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f001 f944 	bl	8003dfc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002b74:	6a3b      	ldr	r3, [r7, #32]
 8002b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d103      	bne.n	8002b86 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002b7e:	f001 f915 	bl	8003dac <HAL_RCC_GetPCLK1Freq>
 8002b82:	6378      	str	r0, [r7, #52]	; 0x34
 8002b84:	e004      	b.n	8002b90 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002b86:	f001 f911 	bl	8003dac <HAL_RCC_GetPCLK1Freq>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b92:	4a24      	ldr	r2, [pc, #144]	; (8002c24 <HAL_InitTick+0xec>)
 8002b94:	fba2 2303 	umull	r2, r3, r2, r3
 8002b98:	0c9b      	lsrs	r3, r3, #18
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002b9e:	4b22      	ldr	r3, [pc, #136]	; (8002c28 <HAL_InitTick+0xf0>)
 8002ba0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ba4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002ba6:	4b20      	ldr	r3, [pc, #128]	; (8002c28 <HAL_InitTick+0xf0>)
 8002ba8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bac:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002bae:	4a1e      	ldr	r2, [pc, #120]	; (8002c28 <HAL_InitTick+0xf0>)
 8002bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002bb4:	4b1c      	ldr	r3, [pc, #112]	; (8002c28 <HAL_InitTick+0xf0>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bba:	4b1b      	ldr	r3, [pc, #108]	; (8002c28 <HAL_InitTick+0xf0>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bc0:	4b19      	ldr	r3, [pc, #100]	; (8002c28 <HAL_InitTick+0xf0>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8002bc6:	4818      	ldr	r0, [pc, #96]	; (8002c28 <HAL_InitTick+0xf0>)
 8002bc8:	f003 fe82 	bl	80068d0 <HAL_TIM_Base_Init>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002bd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d11b      	bne.n	8002c12 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8002bda:	4813      	ldr	r0, [pc, #76]	; (8002c28 <HAL_InitTick+0xf0>)
 8002bdc:	f003 fed2 	bl	8006984 <HAL_TIM_Base_Start_IT>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002be6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d111      	bne.n	8002c12 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bee:	201c      	movs	r0, #28
 8002bf0:	f000 fa10 	bl	8003014 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b0f      	cmp	r3, #15
 8002bf8:	d808      	bhi.n	8002c0c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	201c      	movs	r0, #28
 8002c00:	f000 f9ec 	bl	8002fdc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c04:	4a09      	ldr	r2, [pc, #36]	; (8002c2c <HAL_InitTick+0xf4>)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	e002      	b.n	8002c12 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002c12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3738      	adds	r7, #56	; 0x38
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40023800 	.word	0x40023800
 8002c24:	431bde83 	.word	0x431bde83
 8002c28:	20000574 	.word	0x20000574
 8002c2c:	20000008 	.word	0x20000008

08002c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c34:	e7fe      	b.n	8002c34 <NMI_Handler+0x4>

08002c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c36:	b480      	push	{r7}
 8002c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c3a:	e7fe      	b.n	8002c3a <HardFault_Handler+0x4>

08002c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c40:	e7fe      	b.n	8002c40 <MemManage_Handler+0x4>

08002c42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c42:	b480      	push	{r7}
 8002c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c46:	e7fe      	b.n	8002c46 <BusFault_Handler+0x4>

08002c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c4c:	e7fe      	b.n	8002c4c <UsageFault_Handler+0x4>

08002c4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c60:	4802      	ldr	r0, [pc, #8]	; (8002c6c <TIM2_IRQHandler+0x10>)
 8002c62:	f003 feff 	bl	8006a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000574 	.word	0x20000574

08002c70 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002c74:	4802      	ldr	r0, [pc, #8]	; (8002c80 <SPI1_IRQHandler+0x10>)
 8002c76:	f003 fb43 	bl	8006300 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000378 	.word	0x20000378

08002c84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002c88:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c8c:	f000 ff28 	bl	8003ae0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c90:	bf00      	nop
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002c98:	4802      	ldr	r0, [pc, #8]	; (8002ca4 <RTC_Alarm_IRQHandler+0x10>)
 8002c9a:	f002 fceb 	bl	8005674 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000358 	.word	0x20000358

08002ca8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002cac:	4802      	ldr	r0, [pc, #8]	; (8002cb8 <DMA2_Stream3_IRQHandler+0x10>)
 8002cae:	f000 fae7 	bl	8003280 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20000428 	.word	0x20000428

08002cbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cc4:	4a14      	ldr	r2, [pc, #80]	; (8002d18 <_sbrk+0x5c>)
 8002cc6:	4b15      	ldr	r3, [pc, #84]	; (8002d1c <_sbrk+0x60>)
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cd0:	4b13      	ldr	r3, [pc, #76]	; (8002d20 <_sbrk+0x64>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d102      	bne.n	8002cde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cd8:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <_sbrk+0x64>)
 8002cda:	4a12      	ldr	r2, [pc, #72]	; (8002d24 <_sbrk+0x68>)
 8002cdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cde:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <_sbrk+0x64>)
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d207      	bcs.n	8002cfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cec:	f005 fdd6 	bl	800889c <__errno>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	220c      	movs	r2, #12
 8002cf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfa:	e009      	b.n	8002d10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cfc:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <_sbrk+0x64>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d02:	4b07      	ldr	r3, [pc, #28]	; (8002d20 <_sbrk+0x64>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4413      	add	r3, r2
 8002d0a:	4a05      	ldr	r2, [pc, #20]	; (8002d20 <_sbrk+0x64>)
 8002d0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	20020000 	.word	0x20020000
 8002d1c:	00000400 	.word	0x00000400
 8002d20:	200005bc 	.word	0x200005bc
 8002d24:	20004328 	.word	0x20004328

08002d28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d2c:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <SystemInit+0x20>)
 8002d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d32:	4a05      	ldr	r2, [pc, #20]	; (8002d48 <SystemInit+0x20>)
 8002d34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	e000ed00 	.word	0xe000ed00

08002d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d50:	480d      	ldr	r0, [pc, #52]	; (8002d88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d52:	490e      	ldr	r1, [pc, #56]	; (8002d8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d54:	4a0e      	ldr	r2, [pc, #56]	; (8002d90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d58:	e002      	b.n	8002d60 <LoopCopyDataInit>

08002d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d5e:	3304      	adds	r3, #4

08002d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d64:	d3f9      	bcc.n	8002d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d66:	4a0b      	ldr	r2, [pc, #44]	; (8002d94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d68:	4c0b      	ldr	r4, [pc, #44]	; (8002d98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d6c:	e001      	b.n	8002d72 <LoopFillZerobss>

08002d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d70:	3204      	adds	r2, #4

08002d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d74:	d3fb      	bcc.n	8002d6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d76:	f7ff ffd7 	bl	8002d28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d7a:	f005 fd95 	bl	80088a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d7e:	f7ff f9db 	bl	8002138 <main>
  bx  lr    
 8002d82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d8c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002d90:	0800aee0 	.word	0x0800aee0
  ldr r2, =_sbss
 8002d94:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002d98:	20004328 	.word	0x20004328

08002d9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d9c:	e7fe      	b.n	8002d9c <ADC_IRQHandler>
	...

08002da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002da4:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <HAL_Init+0x40>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a0d      	ldr	r2, [pc, #52]	; (8002de0 <HAL_Init+0x40>)
 8002daa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002db0:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <HAL_Init+0x40>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a0a      	ldr	r2, [pc, #40]	; (8002de0 <HAL_Init+0x40>)
 8002db6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dbc:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <HAL_Init+0x40>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a07      	ldr	r2, [pc, #28]	; (8002de0 <HAL_Init+0x40>)
 8002dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dc8:	2003      	movs	r0, #3
 8002dca:	f000 f8fc 	bl	8002fc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dce:	200f      	movs	r0, #15
 8002dd0:	f7ff feb2 	bl	8002b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dd4:	f7ff fd52 	bl	800287c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40023c00 	.word	0x40023c00

08002de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002de8:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <HAL_IncTick+0x20>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	461a      	mov	r2, r3
 8002dee:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <HAL_IncTick+0x24>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4413      	add	r3, r2
 8002df4:	4a04      	ldr	r2, [pc, #16]	; (8002e08 <HAL_IncTick+0x24>)
 8002df6:	6013      	str	r3, [r2, #0]
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	2000000c 	.word	0x2000000c
 8002e08:	200005c0 	.word	0x200005c0

08002e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <HAL_GetTick+0x14>)
 8002e12:	681b      	ldr	r3, [r3, #0]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	200005c0 	.word	0x200005c0

08002e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e2c:	f7ff ffee 	bl	8002e0c <HAL_GetTick>
 8002e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3c:	d005      	beq.n	8002e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <HAL_Delay+0x44>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4413      	add	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e4a:	bf00      	nop
 8002e4c:	f7ff ffde 	bl	8002e0c <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d8f7      	bhi.n	8002e4c <HAL_Delay+0x28>
  {
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	bf00      	nop
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	2000000c 	.word	0x2000000c

08002e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e88:	4013      	ands	r3, r2
 8002e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e9e:	4a04      	ldr	r2, [pc, #16]	; (8002eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	60d3      	str	r3, [r2, #12]
}
 8002ea4:	bf00      	nop
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eb8:	4b04      	ldr	r3, [pc, #16]	; (8002ecc <__NVIC_GetPriorityGrouping+0x18>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	0a1b      	lsrs	r3, r3, #8
 8002ebe:	f003 0307 	and.w	r3, r3, #7
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	db0b      	blt.n	8002efa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
 8002ee4:	f003 021f 	and.w	r2, r3, #31
 8002ee8:	4907      	ldr	r1, [pc, #28]	; (8002f08 <__NVIC_EnableIRQ+0x38>)
 8002eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eee:	095b      	lsrs	r3, r3, #5
 8002ef0:	2001      	movs	r0, #1
 8002ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	e000e100 	.word	0xe000e100

08002f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	6039      	str	r1, [r7, #0]
 8002f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	db0a      	blt.n	8002f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	490c      	ldr	r1, [pc, #48]	; (8002f58 <__NVIC_SetPriority+0x4c>)
 8002f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2a:	0112      	lsls	r2, r2, #4
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	440b      	add	r3, r1
 8002f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f34:	e00a      	b.n	8002f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	4908      	ldr	r1, [pc, #32]	; (8002f5c <__NVIC_SetPriority+0x50>)
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	3b04      	subs	r3, #4
 8002f44:	0112      	lsls	r2, r2, #4
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	440b      	add	r3, r1
 8002f4a:	761a      	strb	r2, [r3, #24]
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	e000e100 	.word	0xe000e100
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b089      	sub	sp, #36	; 0x24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f1c3 0307 	rsb	r3, r3, #7
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	bf28      	it	cs
 8002f7e:	2304      	movcs	r3, #4
 8002f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	3304      	adds	r3, #4
 8002f86:	2b06      	cmp	r3, #6
 8002f88:	d902      	bls.n	8002f90 <NVIC_EncodePriority+0x30>
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3b03      	subs	r3, #3
 8002f8e:	e000      	b.n	8002f92 <NVIC_EncodePriority+0x32>
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f94:	f04f 32ff 	mov.w	r2, #4294967295
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43da      	mvns	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	401a      	ands	r2, r3
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb2:	43d9      	mvns	r1, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb8:	4313      	orrs	r3, r2
         );
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3724      	adds	r7, #36	; 0x24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7ff ff4c 	bl	8002e6c <__NVIC_SetPriorityGrouping>
}
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
 8002fe8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fee:	f7ff ff61 	bl	8002eb4 <__NVIC_GetPriorityGrouping>
 8002ff2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	68b9      	ldr	r1, [r7, #8]
 8002ff8:	6978      	ldr	r0, [r7, #20]
 8002ffa:	f7ff ffb1 	bl	8002f60 <NVIC_EncodePriority>
 8002ffe:	4602      	mov	r2, r0
 8003000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003004:	4611      	mov	r1, r2
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff ff80 	bl	8002f0c <__NVIC_SetPriority>
}
 800300c:	bf00      	nop
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800301e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff ff54 	bl	8002ed0 <__NVIC_EnableIRQ>
}
 8003028:	bf00      	nop
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800303c:	f7ff fee6 	bl	8002e0c <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e099      	b.n	8003180 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0201 	bic.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800306c:	e00f      	b.n	800308e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800306e:	f7ff fecd 	bl	8002e0c <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b05      	cmp	r3, #5
 800307a:	d908      	bls.n	800308e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2220      	movs	r2, #32
 8003080:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2203      	movs	r2, #3
 8003086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e078      	b.n	8003180 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1e8      	bne.n	800306e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	4b38      	ldr	r3, [pc, #224]	; (8003188 <HAL_DMA_Init+0x158>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	4313      	orrs	r3, r2
 80030de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d107      	bne.n	80030f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	4313      	orrs	r3, r2
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f023 0307 	bic.w	r3, r3, #7
 800310e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	4313      	orrs	r3, r2
 8003118:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	2b04      	cmp	r3, #4
 8003120:	d117      	bne.n	8003152 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4313      	orrs	r3, r2
 800312a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00e      	beq.n	8003152 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 fa91 	bl	800365c <DMA_CheckFifoParam>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d008      	beq.n	8003152 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2240      	movs	r2, #64	; 0x40
 8003144:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800314e:	2301      	movs	r3, #1
 8003150:	e016      	b.n	8003180 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 fa48 	bl	80035f0 <DMA_CalcBaseAndBitshift>
 8003160:	4603      	mov	r3, r0
 8003162:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003168:	223f      	movs	r2, #63	; 0x3f
 800316a:	409a      	lsls	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	f010803f 	.word	0xf010803f

0800318c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_DMA_Start_IT+0x26>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e040      	b.n	8003234 <HAL_DMA_Start_IT+0xa8>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d12f      	bne.n	8003226 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2202      	movs	r2, #2
 80031ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	68b9      	ldr	r1, [r7, #8]
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f9da 	bl	8003594 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e4:	223f      	movs	r2, #63	; 0x3f
 80031e6:	409a      	lsls	r2, r3
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0216 	orr.w	r2, r2, #22
 80031fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	2b00      	cmp	r3, #0
 8003202:	d007      	beq.n	8003214 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0208 	orr.w	r2, r2, #8
 8003212:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	e005      	b.n	8003232 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800322e:	2302      	movs	r3, #2
 8003230:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003232:	7dfb      	ldrb	r3, [r7, #23]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d004      	beq.n	800325a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2280      	movs	r2, #128	; 0x80
 8003254:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e00c      	b.n	8003274 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2205      	movs	r2, #5
 800325e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0201 	bic.w	r2, r2, #1
 8003270:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800328c:	4b8e      	ldr	r3, [pc, #568]	; (80034c8 <HAL_DMA_IRQHandler+0x248>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a8e      	ldr	r2, [pc, #568]	; (80034cc <HAL_DMA_IRQHandler+0x24c>)
 8003292:	fba2 2303 	umull	r2, r3, r2, r3
 8003296:	0a9b      	lsrs	r3, r3, #10
 8003298:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032aa:	2208      	movs	r2, #8
 80032ac:	409a      	lsls	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4013      	ands	r3, r2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d01a      	beq.n	80032ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d013      	beq.n	80032ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0204 	bic.w	r2, r2, #4
 80032d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d8:	2208      	movs	r2, #8
 80032da:	409a      	lsls	r2, r3
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e4:	f043 0201 	orr.w	r2, r3, #1
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f0:	2201      	movs	r2, #1
 80032f2:	409a      	lsls	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4013      	ands	r3, r2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d012      	beq.n	8003322 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00b      	beq.n	8003322 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330e:	2201      	movs	r2, #1
 8003310:	409a      	lsls	r2, r3
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331a:	f043 0202 	orr.w	r2, r3, #2
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003326:	2204      	movs	r2, #4
 8003328:	409a      	lsls	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4013      	ands	r3, r2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d012      	beq.n	8003358 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00b      	beq.n	8003358 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003344:	2204      	movs	r2, #4
 8003346:	409a      	lsls	r2, r3
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003350:	f043 0204 	orr.w	r2, r3, #4
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335c:	2210      	movs	r2, #16
 800335e:	409a      	lsls	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4013      	ands	r3, r2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d043      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	d03c      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337a:	2210      	movs	r2, #16
 800337c:	409a      	lsls	r2, r3
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d018      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d108      	bne.n	80033b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d024      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	4798      	blx	r3
 80033ae:	e01f      	b.n	80033f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01b      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	4798      	blx	r3
 80033c0:	e016      	b.n	80033f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d107      	bne.n	80033e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0208 	bic.w	r2, r2, #8
 80033de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f4:	2220      	movs	r2, #32
 80033f6:	409a      	lsls	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 808f 	beq.w	8003520 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0310 	and.w	r3, r3, #16
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 8087 	beq.w	8003520 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003416:	2220      	movs	r2, #32
 8003418:	409a      	lsls	r2, r3
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b05      	cmp	r3, #5
 8003428:	d136      	bne.n	8003498 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0216 	bic.w	r2, r2, #22
 8003438:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695a      	ldr	r2, [r3, #20]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003448:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	2b00      	cmp	r3, #0
 8003450:	d103      	bne.n	800345a <HAL_DMA_IRQHandler+0x1da>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003456:	2b00      	cmp	r3, #0
 8003458:	d007      	beq.n	800346a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0208 	bic.w	r2, r2, #8
 8003468:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346e:	223f      	movs	r2, #63	; 0x3f
 8003470:	409a      	lsls	r2, r3
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800348a:	2b00      	cmp	r3, #0
 800348c:	d07e      	beq.n	800358c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	4798      	blx	r3
        }
        return;
 8003496:	e079      	b.n	800358c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d01d      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10d      	bne.n	80034d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d031      	beq.n	8003520 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	4798      	blx	r3
 80034c4:	e02c      	b.n	8003520 <HAL_DMA_IRQHandler+0x2a0>
 80034c6:	bf00      	nop
 80034c8:	20000004 	.word	0x20000004
 80034cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d023      	beq.n	8003520 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	4798      	blx	r3
 80034e0:	e01e      	b.n	8003520 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10f      	bne.n	8003510 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0210 	bic.w	r2, r2, #16
 80034fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003524:	2b00      	cmp	r3, #0
 8003526:	d032      	beq.n	800358e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	d022      	beq.n	800357a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2205      	movs	r2, #5
 8003538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0201 	bic.w	r2, r2, #1
 800354a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	3301      	adds	r3, #1
 8003550:	60bb      	str	r3, [r7, #8]
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	429a      	cmp	r2, r3
 8003556:	d307      	bcc.n	8003568 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f2      	bne.n	800354c <HAL_DMA_IRQHandler+0x2cc>
 8003566:	e000      	b.n	800356a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003568:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357e:	2b00      	cmp	r3, #0
 8003580:	d005      	beq.n	800358e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	4798      	blx	r3
 800358a:	e000      	b.n	800358e <HAL_DMA_IRQHandler+0x30e>
        return;
 800358c:	bf00      	nop
    }
  }
}
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
 80035a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	2b40      	cmp	r3, #64	; 0x40
 80035c0:	d108      	bne.n	80035d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80035d2:	e007      	b.n	80035e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	60da      	str	r2, [r3, #12]
}
 80035e4:	bf00      	nop
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	3b10      	subs	r3, #16
 8003600:	4a14      	ldr	r2, [pc, #80]	; (8003654 <DMA_CalcBaseAndBitshift+0x64>)
 8003602:	fba2 2303 	umull	r2, r3, r2, r3
 8003606:	091b      	lsrs	r3, r3, #4
 8003608:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800360a:	4a13      	ldr	r2, [pc, #76]	; (8003658 <DMA_CalcBaseAndBitshift+0x68>)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4413      	add	r3, r2
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b03      	cmp	r3, #3
 800361c:	d909      	bls.n	8003632 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003626:	f023 0303 	bic.w	r3, r3, #3
 800362a:	1d1a      	adds	r2, r3, #4
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	659a      	str	r2, [r3, #88]	; 0x58
 8003630:	e007      	b.n	8003642 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800363a:	f023 0303 	bic.w	r3, r3, #3
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003646:	4618      	mov	r0, r3
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	aaaaaaab 	.word	0xaaaaaaab
 8003658:	0800ae34 	.word	0x0800ae34

0800365c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003664:	2300      	movs	r3, #0
 8003666:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d11f      	bne.n	80036b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b03      	cmp	r3, #3
 800367a:	d856      	bhi.n	800372a <DMA_CheckFifoParam+0xce>
 800367c:	a201      	add	r2, pc, #4	; (adr r2, 8003684 <DMA_CheckFifoParam+0x28>)
 800367e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003682:	bf00      	nop
 8003684:	08003695 	.word	0x08003695
 8003688:	080036a7 	.word	0x080036a7
 800368c:	08003695 	.word	0x08003695
 8003690:	0800372b 	.word	0x0800372b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003698:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d046      	beq.n	800372e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a4:	e043      	b.n	800372e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036ae:	d140      	bne.n	8003732 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036b4:	e03d      	b.n	8003732 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036be:	d121      	bne.n	8003704 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	d837      	bhi.n	8003736 <DMA_CheckFifoParam+0xda>
 80036c6:	a201      	add	r2, pc, #4	; (adr r2, 80036cc <DMA_CheckFifoParam+0x70>)
 80036c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036cc:	080036dd 	.word	0x080036dd
 80036d0:	080036e3 	.word	0x080036e3
 80036d4:	080036dd 	.word	0x080036dd
 80036d8:	080036f5 	.word	0x080036f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
      break;
 80036e0:	e030      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d025      	beq.n	800373a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f2:	e022      	b.n	800373a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036fc:	d11f      	bne.n	800373e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003702:	e01c      	b.n	800373e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2b02      	cmp	r3, #2
 8003708:	d903      	bls.n	8003712 <DMA_CheckFifoParam+0xb6>
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b03      	cmp	r3, #3
 800370e:	d003      	beq.n	8003718 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003710:	e018      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	73fb      	strb	r3, [r7, #15]
      break;
 8003716:	e015      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00e      	beq.n	8003742 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	73fb      	strb	r3, [r7, #15]
      break;
 8003728:	e00b      	b.n	8003742 <DMA_CheckFifoParam+0xe6>
      break;
 800372a:	bf00      	nop
 800372c:	e00a      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      break;
 800372e:	bf00      	nop
 8003730:	e008      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      break;
 8003732:	bf00      	nop
 8003734:	e006      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      break;
 8003736:	bf00      	nop
 8003738:	e004      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      break;
 800373a:	bf00      	nop
 800373c:	e002      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      break;   
 800373e:	bf00      	nop
 8003740:	e000      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      break;
 8003742:	bf00      	nop
    }
  } 
  
  return status; 
 8003744:	7bfb      	ldrb	r3, [r7, #15]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop

08003754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003754:	b480      	push	{r7}
 8003756:	b089      	sub	sp, #36	; 0x24
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003762:	2300      	movs	r3, #0
 8003764:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003766:	2300      	movs	r3, #0
 8003768:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800376a:	2300      	movs	r3, #0
 800376c:	61fb      	str	r3, [r7, #28]
 800376e:	e165      	b.n	8003a3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003770:	2201      	movs	r2, #1
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	4013      	ands	r3, r2
 8003782:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	429a      	cmp	r2, r3
 800378a:	f040 8154 	bne.w	8003a36 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	2b01      	cmp	r3, #1
 8003798:	d005      	beq.n	80037a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d130      	bne.n	8003808 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	2203      	movs	r2, #3
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	43db      	mvns	r3, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4013      	ands	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037dc:	2201      	movs	r2, #1
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	43db      	mvns	r3, r3
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4013      	ands	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	091b      	lsrs	r3, r3, #4
 80037f2:	f003 0201 	and.w	r2, r3, #1
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4313      	orrs	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	2b03      	cmp	r3, #3
 8003812:	d017      	beq.n	8003844 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	2203      	movs	r2, #3
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	43db      	mvns	r3, r3
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4013      	ands	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4313      	orrs	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d123      	bne.n	8003898 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	08da      	lsrs	r2, r3, #3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3208      	adds	r2, #8
 8003858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800385c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	220f      	movs	r2, #15
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	43db      	mvns	r3, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4013      	ands	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4313      	orrs	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	08da      	lsrs	r2, r3, #3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3208      	adds	r2, #8
 8003892:	69b9      	ldr	r1, [r7, #24]
 8003894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	2203      	movs	r2, #3
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	43db      	mvns	r3, r3
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4013      	ands	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 0203 	and.w	r2, r3, #3
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 80ae 	beq.w	8003a36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	4b5d      	ldr	r3, [pc, #372]	; (8003a54 <HAL_GPIO_Init+0x300>)
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	4a5c      	ldr	r2, [pc, #368]	; (8003a54 <HAL_GPIO_Init+0x300>)
 80038e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038e8:	6453      	str	r3, [r2, #68]	; 0x44
 80038ea:	4b5a      	ldr	r3, [pc, #360]	; (8003a54 <HAL_GPIO_Init+0x300>)
 80038ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038f6:	4a58      	ldr	r2, [pc, #352]	; (8003a58 <HAL_GPIO_Init+0x304>)
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	089b      	lsrs	r3, r3, #2
 80038fc:	3302      	adds	r3, #2
 80038fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003902:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	220f      	movs	r2, #15
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	43db      	mvns	r3, r3
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	4013      	ands	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a4f      	ldr	r2, [pc, #316]	; (8003a5c <HAL_GPIO_Init+0x308>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d025      	beq.n	800396e <HAL_GPIO_Init+0x21a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a4e      	ldr	r2, [pc, #312]	; (8003a60 <HAL_GPIO_Init+0x30c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d01f      	beq.n	800396a <HAL_GPIO_Init+0x216>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a4d      	ldr	r2, [pc, #308]	; (8003a64 <HAL_GPIO_Init+0x310>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d019      	beq.n	8003966 <HAL_GPIO_Init+0x212>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a4c      	ldr	r2, [pc, #304]	; (8003a68 <HAL_GPIO_Init+0x314>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d013      	beq.n	8003962 <HAL_GPIO_Init+0x20e>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a4b      	ldr	r2, [pc, #300]	; (8003a6c <HAL_GPIO_Init+0x318>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d00d      	beq.n	800395e <HAL_GPIO_Init+0x20a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a4a      	ldr	r2, [pc, #296]	; (8003a70 <HAL_GPIO_Init+0x31c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d007      	beq.n	800395a <HAL_GPIO_Init+0x206>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a49      	ldr	r2, [pc, #292]	; (8003a74 <HAL_GPIO_Init+0x320>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d101      	bne.n	8003956 <HAL_GPIO_Init+0x202>
 8003952:	2306      	movs	r3, #6
 8003954:	e00c      	b.n	8003970 <HAL_GPIO_Init+0x21c>
 8003956:	2307      	movs	r3, #7
 8003958:	e00a      	b.n	8003970 <HAL_GPIO_Init+0x21c>
 800395a:	2305      	movs	r3, #5
 800395c:	e008      	b.n	8003970 <HAL_GPIO_Init+0x21c>
 800395e:	2304      	movs	r3, #4
 8003960:	e006      	b.n	8003970 <HAL_GPIO_Init+0x21c>
 8003962:	2303      	movs	r3, #3
 8003964:	e004      	b.n	8003970 <HAL_GPIO_Init+0x21c>
 8003966:	2302      	movs	r3, #2
 8003968:	e002      	b.n	8003970 <HAL_GPIO_Init+0x21c>
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <HAL_GPIO_Init+0x21c>
 800396e:	2300      	movs	r3, #0
 8003970:	69fa      	ldr	r2, [r7, #28]
 8003972:	f002 0203 	and.w	r2, r2, #3
 8003976:	0092      	lsls	r2, r2, #2
 8003978:	4093      	lsls	r3, r2
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4313      	orrs	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003980:	4935      	ldr	r1, [pc, #212]	; (8003a58 <HAL_GPIO_Init+0x304>)
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	089b      	lsrs	r3, r3, #2
 8003986:	3302      	adds	r3, #2
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800398e:	4b3a      	ldr	r3, [pc, #232]	; (8003a78 <HAL_GPIO_Init+0x324>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	43db      	mvns	r3, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4013      	ands	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039b2:	4a31      	ldr	r2, [pc, #196]	; (8003a78 <HAL_GPIO_Init+0x324>)
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039b8:	4b2f      	ldr	r3, [pc, #188]	; (8003a78 <HAL_GPIO_Init+0x324>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	43db      	mvns	r3, r3
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	4013      	ands	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039dc:	4a26      	ldr	r2, [pc, #152]	; (8003a78 <HAL_GPIO_Init+0x324>)
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039e2:	4b25      	ldr	r3, [pc, #148]	; (8003a78 <HAL_GPIO_Init+0x324>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	43db      	mvns	r3, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4013      	ands	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a06:	4a1c      	ldr	r2, [pc, #112]	; (8003a78 <HAL_GPIO_Init+0x324>)
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a0c:	4b1a      	ldr	r3, [pc, #104]	; (8003a78 <HAL_GPIO_Init+0x324>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	43db      	mvns	r3, r3
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a30:	4a11      	ldr	r2, [pc, #68]	; (8003a78 <HAL_GPIO_Init+0x324>)
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	61fb      	str	r3, [r7, #28]
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	2b0f      	cmp	r3, #15
 8003a40:	f67f ae96 	bls.w	8003770 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a44:	bf00      	nop
 8003a46:	bf00      	nop
 8003a48:	3724      	adds	r7, #36	; 0x24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40023800 	.word	0x40023800
 8003a58:	40013800 	.word	0x40013800
 8003a5c:	40020000 	.word	0x40020000
 8003a60:	40020400 	.word	0x40020400
 8003a64:	40020800 	.word	0x40020800
 8003a68:	40020c00 	.word	0x40020c00
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	40021400 	.word	0x40021400
 8003a74:	40021800 	.word	0x40021800
 8003a78:	40013c00 	.word	0x40013c00

08003a7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	460b      	mov	r3, r1
 8003a86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691a      	ldr	r2, [r3, #16]
 8003a8c:	887b      	ldrh	r3, [r7, #2]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a94:	2301      	movs	r3, #1
 8003a96:	73fb      	strb	r3, [r7, #15]
 8003a98:	e001      	b.n	8003a9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	807b      	strh	r3, [r7, #2]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003abc:	787b      	ldrb	r3, [r7, #1]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ac2:	887a      	ldrh	r2, [r7, #2]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ac8:	e003      	b.n	8003ad2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003aca:	887b      	ldrh	r3, [r7, #2]
 8003acc:	041a      	lsls	r2, r3, #16
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	619a      	str	r2, [r3, #24]
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
	...

08003ae0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003aea:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003aec:	695a      	ldr	r2, [r3, #20]
 8003aee:	88fb      	ldrh	r3, [r7, #6]
 8003af0:	4013      	ands	r3, r2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d006      	beq.n	8003b04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003af6:	4a05      	ldr	r2, [pc, #20]	; (8003b0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003af8:	88fb      	ldrh	r3, [r7, #6]
 8003afa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003afc:	88fb      	ldrh	r3, [r7, #6]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 f806 	bl	8003b10 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b04:	bf00      	nop
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40013c00 	.word	0x40013c00

08003b10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4603      	mov	r3, r0
 8003b18:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
	...

08003b28 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b32:	2300      	movs	r3, #0
 8003b34:	603b      	str	r3, [r7, #0]
 8003b36:	4b20      	ldr	r3, [pc, #128]	; (8003bb8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	4a1f      	ldr	r2, [pc, #124]	; (8003bb8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b40:	6413      	str	r3, [r2, #64]	; 0x40
 8003b42:	4b1d      	ldr	r3, [pc, #116]	; (8003bb8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4a:	603b      	str	r3, [r7, #0]
 8003b4c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b4e:	4b1b      	ldr	r3, [pc, #108]	; (8003bbc <HAL_PWREx_EnableOverDrive+0x94>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b54:	f7ff f95a 	bl	8002e0c <HAL_GetTick>
 8003b58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b5a:	e009      	b.n	8003b70 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b5c:	f7ff f956 	bl	8002e0c <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b6a:	d901      	bls.n	8003b70 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e01f      	b.n	8003bb0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b70:	4b13      	ldr	r3, [pc, #76]	; (8003bc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b7c:	d1ee      	bne.n	8003b5c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b7e:	4b11      	ldr	r3, [pc, #68]	; (8003bc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b80:	2201      	movs	r2, #1
 8003b82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b84:	f7ff f942 	bl	8002e0c <HAL_GetTick>
 8003b88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b8a:	e009      	b.n	8003ba0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b8c:	f7ff f93e 	bl	8002e0c <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b9a:	d901      	bls.n	8003ba0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e007      	b.n	8003bb0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ba0:	4b07      	ldr	r3, [pc, #28]	; (8003bc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bac:	d1ee      	bne.n	8003b8c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	420e0040 	.word	0x420e0040
 8003bc0:	40007000 	.word	0x40007000
 8003bc4:	420e0044 	.word	0x420e0044

08003bc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e0cc      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bdc:	4b68      	ldr	r3, [pc, #416]	; (8003d80 <HAL_RCC_ClockConfig+0x1b8>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 030f 	and.w	r3, r3, #15
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d90c      	bls.n	8003c04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bea:	4b65      	ldr	r3, [pc, #404]	; (8003d80 <HAL_RCC_ClockConfig+0x1b8>)
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf2:	4b63      	ldr	r3, [pc, #396]	; (8003d80 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d001      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e0b8      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d020      	beq.n	8003c52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c1c:	4b59      	ldr	r3, [pc, #356]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	4a58      	ldr	r2, [pc, #352]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d005      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c34:	4b53      	ldr	r3, [pc, #332]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	4a52      	ldr	r2, [pc, #328]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c40:	4b50      	ldr	r3, [pc, #320]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	494d      	ldr	r1, [pc, #308]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d044      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d107      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c66:	4b47      	ldr	r3, [pc, #284]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d119      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e07f      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d003      	beq.n	8003c86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	d107      	bne.n	8003c96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c86:	4b3f      	ldr	r3, [pc, #252]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d109      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e06f      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c96:	4b3b      	ldr	r3, [pc, #236]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e067      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ca6:	4b37      	ldr	r3, [pc, #220]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f023 0203 	bic.w	r2, r3, #3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	4934      	ldr	r1, [pc, #208]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cb8:	f7ff f8a8 	bl	8002e0c <HAL_GetTick>
 8003cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cbe:	e00a      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc0:	f7ff f8a4 	bl	8002e0c <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e04f      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd6:	4b2b      	ldr	r3, [pc, #172]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 020c 	and.w	r2, r3, #12
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d1eb      	bne.n	8003cc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ce8:	4b25      	ldr	r3, [pc, #148]	; (8003d80 <HAL_RCC_ClockConfig+0x1b8>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 030f 	and.w	r3, r3, #15
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d20c      	bcs.n	8003d10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf6:	4b22      	ldr	r3, [pc, #136]	; (8003d80 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfe:	4b20      	ldr	r3, [pc, #128]	; (8003d80 <HAL_RCC_ClockConfig+0x1b8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d001      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e032      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d008      	beq.n	8003d2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d1c:	4b19      	ldr	r3, [pc, #100]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	4916      	ldr	r1, [pc, #88]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d009      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d3a:	4b12      	ldr	r3, [pc, #72]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	490e      	ldr	r1, [pc, #56]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d4e:	f000 fbb1 	bl	80044b4 <HAL_RCC_GetSysClockFreq>
 8003d52:	4602      	mov	r2, r0
 8003d54:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	091b      	lsrs	r3, r3, #4
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	490a      	ldr	r1, [pc, #40]	; (8003d88 <HAL_RCC_ClockConfig+0x1c0>)
 8003d60:	5ccb      	ldrb	r3, [r1, r3]
 8003d62:	fa22 f303 	lsr.w	r3, r2, r3
 8003d66:	4a09      	ldr	r2, [pc, #36]	; (8003d8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d6a:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <HAL_RCC_ClockConfig+0x1c8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fe fee2 	bl	8002b38 <HAL_InitTick>

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40023c00 	.word	0x40023c00
 8003d84:	40023800 	.word	0x40023800
 8003d88:	0800ae1c 	.word	0x0800ae1c
 8003d8c:	20000004 	.word	0x20000004
 8003d90:	20000008 	.word	0x20000008

08003d94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d98:	4b03      	ldr	r3, [pc, #12]	; (8003da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	20000004 	.word	0x20000004

08003dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003db0:	f7ff fff0 	bl	8003d94 <HAL_RCC_GetHCLKFreq>
 8003db4:	4602      	mov	r2, r0
 8003db6:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	0a9b      	lsrs	r3, r3, #10
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	4903      	ldr	r1, [pc, #12]	; (8003dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dc2:	5ccb      	ldrb	r3, [r1, r3]
 8003dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	0800ae2c 	.word	0x0800ae2c

08003dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dd8:	f7ff ffdc 	bl	8003d94 <HAL_RCC_GetHCLKFreq>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	4b05      	ldr	r3, [pc, #20]	; (8003df4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	0b5b      	lsrs	r3, r3, #13
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	4903      	ldr	r1, [pc, #12]	; (8003df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dea:	5ccb      	ldrb	r3, [r1, r3]
 8003dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40023800 	.word	0x40023800
 8003df8:	0800ae2c 	.word	0x0800ae2c

08003dfc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	220f      	movs	r2, #15
 8003e0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e0c:	4b12      	ldr	r3, [pc, #72]	; (8003e58 <HAL_RCC_GetClockConfig+0x5c>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 0203 	and.w	r2, r3, #3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e18:	4b0f      	ldr	r3, [pc, #60]	; (8003e58 <HAL_RCC_GetClockConfig+0x5c>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e24:	4b0c      	ldr	r3, [pc, #48]	; (8003e58 <HAL_RCC_GetClockConfig+0x5c>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e30:	4b09      	ldr	r3, [pc, #36]	; (8003e58 <HAL_RCC_GetClockConfig+0x5c>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	08db      	lsrs	r3, r3, #3
 8003e36:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e3e:	4b07      	ldr	r3, [pc, #28]	; (8003e5c <HAL_RCC_GetClockConfig+0x60>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 020f 	and.w	r2, r3, #15
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	601a      	str	r2, [r3, #0]
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	40023c00 	.word	0x40023c00

08003e60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b08c      	sub	sp, #48	; 0x30
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d010      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003e98:	4b6f      	ldr	r3, [pc, #444]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e9e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea6:	496c      	ldr	r1, [pc, #432]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d010      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003ec6:	4b64      	ldr	r3, [pc, #400]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ecc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed4:	4960      	ldr	r1, [pc, #384]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d017      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ef4:	4b58      	ldr	r3, [pc, #352]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003efa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	4955      	ldr	r1, [pc, #340]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f12:	d101      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003f14:	2301      	movs	r3, #1
 8003f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003f20:	2301      	movs	r3, #1
 8003f22:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d017      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f30:	4b49      	ldr	r3, [pc, #292]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3e:	4946      	ldr	r1, [pc, #280]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f4e:	d101      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003f50:	2301      	movs	r3, #1
 8003f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0320 	and.w	r3, r3, #32
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 808a 	beq.w	8004082 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60bb      	str	r3, [r7, #8]
 8003f72:	4b39      	ldr	r3, [pc, #228]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	4a38      	ldr	r2, [pc, #224]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f7e:	4b36      	ldr	r3, [pc, #216]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f86:	60bb      	str	r3, [r7, #8]
 8003f88:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f8a:	4b34      	ldr	r3, [pc, #208]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a33      	ldr	r2, [pc, #204]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f94:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f96:	f7fe ff39 	bl	8002e0c <HAL_GetTick>
 8003f9a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f9e:	f7fe ff35 	bl	8002e0c <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e278      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003fb0:	4b2a      	ldr	r3, [pc, #168]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0f0      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fbc:	4b26      	ldr	r3, [pc, #152]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d02f      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd4:	6a3a      	ldr	r2, [r7, #32]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d028      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fda:	4b1f      	ldr	r3, [pc, #124]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fe4:	4b1e      	ldr	r3, [pc, #120]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fea:	4b1d      	ldr	r3, [pc, #116]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003ff0:	4a19      	ldr	r2, [pc, #100]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ff6:	4b18      	ldr	r3, [pc, #96]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d114      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004002:	f7fe ff03 	bl	8002e0c <HAL_GetTick>
 8004006:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004008:	e00a      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800400a:	f7fe feff 	bl	8002e0c <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	f241 3288 	movw	r2, #5000	; 0x1388
 8004018:	4293      	cmp	r3, r2
 800401a:	d901      	bls.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e240      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004020:	4b0d      	ldr	r3, [pc, #52]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0ee      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004034:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004038:	d114      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800403a:	4b07      	ldr	r3, [pc, #28]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800404a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800404e:	4902      	ldr	r1, [pc, #8]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004050:	4313      	orrs	r3, r2
 8004052:	608b      	str	r3, [r1, #8]
 8004054:	e00c      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004056:	bf00      	nop
 8004058:	40023800 	.word	0x40023800
 800405c:	40007000 	.word	0x40007000
 8004060:	42470e40 	.word	0x42470e40
 8004064:	4b4a      	ldr	r3, [pc, #296]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	4a49      	ldr	r2, [pc, #292]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800406a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800406e:	6093      	str	r3, [r2, #8]
 8004070:	4b47      	ldr	r3, [pc, #284]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004072:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800407c:	4944      	ldr	r1, [pc, #272]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800407e:	4313      	orrs	r3, r2
 8004080:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0310 	and.w	r3, r3, #16
 800408a:	2b00      	cmp	r3, #0
 800408c:	d004      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004094:	4b3f      	ldr	r3, [pc, #252]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004096:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80040a4:	4b3a      	ldr	r3, [pc, #232]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80040a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b2:	4937      	ldr	r1, [pc, #220]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040c6:	4b32      	ldr	r3, [pc, #200]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80040c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040cc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d4:	492e      	ldr	r1, [pc, #184]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d011      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80040e8:	4b29      	ldr	r3, [pc, #164]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80040ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ee:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f6:	4926      	ldr	r1, [pc, #152]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004102:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004106:	d101      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004108:	2301      	movs	r3, #1
 800410a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00a      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004118:	4b1d      	ldr	r3, [pc, #116]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800411a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800411e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004126:	491a      	ldr	r1, [pc, #104]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004136:	2b00      	cmp	r3, #0
 8004138:	d011      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800413a:	4b15      	ldr	r3, [pc, #84]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800413c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004140:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004148:	4911      	ldr	r1, [pc, #68]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004158:	d101      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800415a:	2301      	movs	r3, #1
 800415c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800415e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004160:	2b01      	cmp	r3, #1
 8004162:	d005      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800416c:	f040 80ff 	bne.w	800436e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004170:	4b09      	ldr	r3, [pc, #36]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004176:	f7fe fe49 	bl	8002e0c <HAL_GetTick>
 800417a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800417c:	e00e      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800417e:	f7fe fe45 	bl	8002e0c <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d907      	bls.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e188      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004190:	40023800 	.word	0x40023800
 8004194:	424711e0 	.word	0x424711e0
 8004198:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800419c:	4b7e      	ldr	r3, [pc, #504]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1ea      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d003      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d009      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d028      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d124      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80041d0:	4b71      	ldr	r3, [pc, #452]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80041d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041d6:	0c1b      	lsrs	r3, r3, #16
 80041d8:	f003 0303 	and.w	r3, r3, #3
 80041dc:	3301      	adds	r3, #1
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041e2:	4b6d      	ldr	r3, [pc, #436]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80041e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041e8:	0e1b      	lsrs	r3, r3, #24
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	019b      	lsls	r3, r3, #6
 80041fa:	431a      	orrs	r2, r3
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	085b      	lsrs	r3, r3, #1
 8004200:	3b01      	subs	r3, #1
 8004202:	041b      	lsls	r3, r3, #16
 8004204:	431a      	orrs	r2, r3
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	061b      	lsls	r3, r3, #24
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	071b      	lsls	r3, r3, #28
 8004212:	4961      	ldr	r1, [pc, #388]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0304 	and.w	r3, r3, #4
 8004222:	2b00      	cmp	r3, #0
 8004224:	d004      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800422e:	d00a      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004238:	2b00      	cmp	r3, #0
 800423a:	d035      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004240:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004244:	d130      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004246:	4b54      	ldr	r3, [pc, #336]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004248:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800424c:	0c1b      	lsrs	r3, r3, #16
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	3301      	adds	r3, #1
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004258:	4b4f      	ldr	r3, [pc, #316]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800425a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800425e:	0f1b      	lsrs	r3, r3, #28
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	019b      	lsls	r3, r3, #6
 8004270:	431a      	orrs	r2, r3
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	085b      	lsrs	r3, r3, #1
 8004276:	3b01      	subs	r3, #1
 8004278:	041b      	lsls	r3, r3, #16
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	061b      	lsls	r3, r3, #24
 8004282:	431a      	orrs	r2, r3
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	071b      	lsls	r3, r3, #28
 8004288:	4943      	ldr	r1, [pc, #268]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800428a:	4313      	orrs	r3, r2
 800428c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004290:	4b41      	ldr	r3, [pc, #260]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004292:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004296:	f023 021f 	bic.w	r2, r3, #31
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429e:	3b01      	subs	r3, #1
 80042a0:	493d      	ldr	r1, [pc, #244]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d029      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042bc:	d124      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80042be:	4b36      	ldr	r3, [pc, #216]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c4:	0c1b      	lsrs	r3, r3, #16
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	3301      	adds	r3, #1
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042d0:	4b31      	ldr	r3, [pc, #196]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042d6:	0f1b      	lsrs	r3, r3, #28
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	019b      	lsls	r3, r3, #6
 80042e8:	431a      	orrs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	085b      	lsrs	r3, r3, #1
 80042f0:	3b01      	subs	r3, #1
 80042f2:	041b      	lsls	r3, r3, #16
 80042f4:	431a      	orrs	r2, r3
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	061b      	lsls	r3, r3, #24
 80042fa:	431a      	orrs	r2, r3
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	071b      	lsls	r3, r3, #28
 8004300:	4925      	ldr	r1, [pc, #148]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004310:	2b00      	cmp	r3, #0
 8004312:	d016      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	019b      	lsls	r3, r3, #6
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	085b      	lsrs	r3, r3, #1
 8004326:	3b01      	subs	r3, #1
 8004328:	041b      	lsls	r3, r3, #16
 800432a:	431a      	orrs	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	061b      	lsls	r3, r3, #24
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	071b      	lsls	r3, r3, #28
 800433a:	4917      	ldr	r1, [pc, #92]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004342:	4b16      	ldr	r3, [pc, #88]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004344:	2201      	movs	r2, #1
 8004346:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004348:	f7fe fd60 	bl	8002e0c <HAL_GetTick>
 800434c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004350:	f7fe fd5c 	bl	8002e0c <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e09f      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004362:	4b0d      	ldr	r3, [pc, #52]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0f0      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800436e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004370:	2b01      	cmp	r3, #1
 8004372:	f040 8095 	bne.w	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004376:	4b0a      	ldr	r3, [pc, #40]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800437c:	f7fe fd46 	bl	8002e0c <HAL_GetTick>
 8004380:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004382:	e00f      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004384:	f7fe fd42 	bl	8002e0c <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d908      	bls.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e085      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004396:	bf00      	nop
 8004398:	40023800 	.word	0x40023800
 800439c:	42470068 	.word	0x42470068
 80043a0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043a4:	4b41      	ldr	r3, [pc, #260]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043b0:	d0e8      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0304 	and.w	r3, r3, #4
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d009      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d02b      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d127      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80043da:	4b34      	ldr	r3, [pc, #208]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80043dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e0:	0c1b      	lsrs	r3, r3, #16
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	3301      	adds	r3, #1
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699a      	ldr	r2, [r3, #24]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	019b      	lsls	r3, r3, #6
 80043f6:	431a      	orrs	r2, r3
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	085b      	lsrs	r3, r3, #1
 80043fc:	3b01      	subs	r3, #1
 80043fe:	041b      	lsls	r3, r3, #16
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	061b      	lsls	r3, r3, #24
 8004408:	4928      	ldr	r1, [pc, #160]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004410:	4b26      	ldr	r3, [pc, #152]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004416:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441e:	3b01      	subs	r3, #1
 8004420:	021b      	lsls	r3, r3, #8
 8004422:	4922      	ldr	r1, [pc, #136]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004424:	4313      	orrs	r3, r2
 8004426:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004432:	2b00      	cmp	r3, #0
 8004434:	d01d      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800443e:	d118      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004440:	4b1a      	ldr	r3, [pc, #104]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004446:	0e1b      	lsrs	r3, r3, #24
 8004448:	f003 030f 	and.w	r3, r3, #15
 800444c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699a      	ldr	r2, [r3, #24]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	019b      	lsls	r3, r3, #6
 8004458:	431a      	orrs	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	085b      	lsrs	r3, r3, #1
 8004460:	3b01      	subs	r3, #1
 8004462:	041b      	lsls	r3, r3, #16
 8004464:	431a      	orrs	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	061b      	lsls	r3, r3, #24
 800446a:	4910      	ldr	r1, [pc, #64]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004472:	4b0f      	ldr	r3, [pc, #60]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004474:	2201      	movs	r2, #1
 8004476:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004478:	f7fe fcc8 	bl	8002e0c <HAL_GetTick>
 800447c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004480:	f7fe fcc4 	bl	8002e0c <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e007      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004492:	4b06      	ldr	r3, [pc, #24]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800449a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800449e:	d1ef      	bne.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3730      	adds	r7, #48	; 0x30
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	40023800 	.word	0x40023800
 80044b0:	42470070 	.word	0x42470070

080044b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044b8:	b0ae      	sub	sp, #184	; 0xb8
 80044ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044da:	4bcb      	ldr	r3, [pc, #812]	; (8004808 <HAL_RCC_GetSysClockFreq+0x354>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 030c 	and.w	r3, r3, #12
 80044e2:	2b0c      	cmp	r3, #12
 80044e4:	f200 8206 	bhi.w	80048f4 <HAL_RCC_GetSysClockFreq+0x440>
 80044e8:	a201      	add	r2, pc, #4	; (adr r2, 80044f0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80044ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ee:	bf00      	nop
 80044f0:	08004525 	.word	0x08004525
 80044f4:	080048f5 	.word	0x080048f5
 80044f8:	080048f5 	.word	0x080048f5
 80044fc:	080048f5 	.word	0x080048f5
 8004500:	0800452d 	.word	0x0800452d
 8004504:	080048f5 	.word	0x080048f5
 8004508:	080048f5 	.word	0x080048f5
 800450c:	080048f5 	.word	0x080048f5
 8004510:	08004535 	.word	0x08004535
 8004514:	080048f5 	.word	0x080048f5
 8004518:	080048f5 	.word	0x080048f5
 800451c:	080048f5 	.word	0x080048f5
 8004520:	08004725 	.word	0x08004725
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004524:	4bb9      	ldr	r3, [pc, #740]	; (800480c <HAL_RCC_GetSysClockFreq+0x358>)
 8004526:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800452a:	e1e7      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800452c:	4bb8      	ldr	r3, [pc, #736]	; (8004810 <HAL_RCC_GetSysClockFreq+0x35c>)
 800452e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004532:	e1e3      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004534:	4bb4      	ldr	r3, [pc, #720]	; (8004808 <HAL_RCC_GetSysClockFreq+0x354>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800453c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004540:	4bb1      	ldr	r3, [pc, #708]	; (8004808 <HAL_RCC_GetSysClockFreq+0x354>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d071      	beq.n	8004630 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800454c:	4bae      	ldr	r3, [pc, #696]	; (8004808 <HAL_RCC_GetSysClockFreq+0x354>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	099b      	lsrs	r3, r3, #6
 8004552:	2200      	movs	r2, #0
 8004554:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004558:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800455c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004564:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004568:	2300      	movs	r3, #0
 800456a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800456e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004572:	4622      	mov	r2, r4
 8004574:	462b      	mov	r3, r5
 8004576:	f04f 0000 	mov.w	r0, #0
 800457a:	f04f 0100 	mov.w	r1, #0
 800457e:	0159      	lsls	r1, r3, #5
 8004580:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004584:	0150      	lsls	r0, r2, #5
 8004586:	4602      	mov	r2, r0
 8004588:	460b      	mov	r3, r1
 800458a:	4621      	mov	r1, r4
 800458c:	1a51      	subs	r1, r2, r1
 800458e:	6439      	str	r1, [r7, #64]	; 0x40
 8004590:	4629      	mov	r1, r5
 8004592:	eb63 0301 	sbc.w	r3, r3, r1
 8004596:	647b      	str	r3, [r7, #68]	; 0x44
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	f04f 0300 	mov.w	r3, #0
 80045a0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80045a4:	4649      	mov	r1, r9
 80045a6:	018b      	lsls	r3, r1, #6
 80045a8:	4641      	mov	r1, r8
 80045aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045ae:	4641      	mov	r1, r8
 80045b0:	018a      	lsls	r2, r1, #6
 80045b2:	4641      	mov	r1, r8
 80045b4:	1a51      	subs	r1, r2, r1
 80045b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80045b8:	4649      	mov	r1, r9
 80045ba:	eb63 0301 	sbc.w	r3, r3, r1
 80045be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	f04f 0300 	mov.w	r3, #0
 80045c8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80045cc:	4649      	mov	r1, r9
 80045ce:	00cb      	lsls	r3, r1, #3
 80045d0:	4641      	mov	r1, r8
 80045d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045d6:	4641      	mov	r1, r8
 80045d8:	00ca      	lsls	r2, r1, #3
 80045da:	4610      	mov	r0, r2
 80045dc:	4619      	mov	r1, r3
 80045de:	4603      	mov	r3, r0
 80045e0:	4622      	mov	r2, r4
 80045e2:	189b      	adds	r3, r3, r2
 80045e4:	633b      	str	r3, [r7, #48]	; 0x30
 80045e6:	462b      	mov	r3, r5
 80045e8:	460a      	mov	r2, r1
 80045ea:	eb42 0303 	adc.w	r3, r2, r3
 80045ee:	637b      	str	r3, [r7, #52]	; 0x34
 80045f0:	f04f 0200 	mov.w	r2, #0
 80045f4:	f04f 0300 	mov.w	r3, #0
 80045f8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80045fc:	4629      	mov	r1, r5
 80045fe:	024b      	lsls	r3, r1, #9
 8004600:	4621      	mov	r1, r4
 8004602:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004606:	4621      	mov	r1, r4
 8004608:	024a      	lsls	r2, r1, #9
 800460a:	4610      	mov	r0, r2
 800460c:	4619      	mov	r1, r3
 800460e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004612:	2200      	movs	r2, #0
 8004614:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004618:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800461c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004620:	f7fb fe46 	bl	80002b0 <__aeabi_uldivmod>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4613      	mov	r3, r2
 800462a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800462e:	e067      	b.n	8004700 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004630:	4b75      	ldr	r3, [pc, #468]	; (8004808 <HAL_RCC_GetSysClockFreq+0x354>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	099b      	lsrs	r3, r3, #6
 8004636:	2200      	movs	r2, #0
 8004638:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800463c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004640:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004648:	67bb      	str	r3, [r7, #120]	; 0x78
 800464a:	2300      	movs	r3, #0
 800464c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800464e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004652:	4622      	mov	r2, r4
 8004654:	462b      	mov	r3, r5
 8004656:	f04f 0000 	mov.w	r0, #0
 800465a:	f04f 0100 	mov.w	r1, #0
 800465e:	0159      	lsls	r1, r3, #5
 8004660:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004664:	0150      	lsls	r0, r2, #5
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	4621      	mov	r1, r4
 800466c:	1a51      	subs	r1, r2, r1
 800466e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004670:	4629      	mov	r1, r5
 8004672:	eb63 0301 	sbc.w	r3, r3, r1
 8004676:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004678:	f04f 0200 	mov.w	r2, #0
 800467c:	f04f 0300 	mov.w	r3, #0
 8004680:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004684:	4649      	mov	r1, r9
 8004686:	018b      	lsls	r3, r1, #6
 8004688:	4641      	mov	r1, r8
 800468a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800468e:	4641      	mov	r1, r8
 8004690:	018a      	lsls	r2, r1, #6
 8004692:	4641      	mov	r1, r8
 8004694:	ebb2 0a01 	subs.w	sl, r2, r1
 8004698:	4649      	mov	r1, r9
 800469a:	eb63 0b01 	sbc.w	fp, r3, r1
 800469e:	f04f 0200 	mov.w	r2, #0
 80046a2:	f04f 0300 	mov.w	r3, #0
 80046a6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046aa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046b2:	4692      	mov	sl, r2
 80046b4:	469b      	mov	fp, r3
 80046b6:	4623      	mov	r3, r4
 80046b8:	eb1a 0303 	adds.w	r3, sl, r3
 80046bc:	623b      	str	r3, [r7, #32]
 80046be:	462b      	mov	r3, r5
 80046c0:	eb4b 0303 	adc.w	r3, fp, r3
 80046c4:	627b      	str	r3, [r7, #36]	; 0x24
 80046c6:	f04f 0200 	mov.w	r2, #0
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80046d2:	4629      	mov	r1, r5
 80046d4:	028b      	lsls	r3, r1, #10
 80046d6:	4621      	mov	r1, r4
 80046d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046dc:	4621      	mov	r1, r4
 80046de:	028a      	lsls	r2, r1, #10
 80046e0:	4610      	mov	r0, r2
 80046e2:	4619      	mov	r1, r3
 80046e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046e8:	2200      	movs	r2, #0
 80046ea:	673b      	str	r3, [r7, #112]	; 0x70
 80046ec:	677a      	str	r2, [r7, #116]	; 0x74
 80046ee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80046f2:	f7fb fddd 	bl	80002b0 <__aeabi_uldivmod>
 80046f6:	4602      	mov	r2, r0
 80046f8:	460b      	mov	r3, r1
 80046fa:	4613      	mov	r3, r2
 80046fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004700:	4b41      	ldr	r3, [pc, #260]	; (8004808 <HAL_RCC_GetSysClockFreq+0x354>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	0c1b      	lsrs	r3, r3, #16
 8004706:	f003 0303 	and.w	r3, r3, #3
 800470a:	3301      	adds	r3, #1
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004712:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004716:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800471a:	fbb2 f3f3 	udiv	r3, r2, r3
 800471e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004722:	e0eb      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004724:	4b38      	ldr	r3, [pc, #224]	; (8004808 <HAL_RCC_GetSysClockFreq+0x354>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800472c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004730:	4b35      	ldr	r3, [pc, #212]	; (8004808 <HAL_RCC_GetSysClockFreq+0x354>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d06b      	beq.n	8004814 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800473c:	4b32      	ldr	r3, [pc, #200]	; (8004808 <HAL_RCC_GetSysClockFreq+0x354>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	099b      	lsrs	r3, r3, #6
 8004742:	2200      	movs	r2, #0
 8004744:	66bb      	str	r3, [r7, #104]	; 0x68
 8004746:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004748:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800474a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800474e:	663b      	str	r3, [r7, #96]	; 0x60
 8004750:	2300      	movs	r3, #0
 8004752:	667b      	str	r3, [r7, #100]	; 0x64
 8004754:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004758:	4622      	mov	r2, r4
 800475a:	462b      	mov	r3, r5
 800475c:	f04f 0000 	mov.w	r0, #0
 8004760:	f04f 0100 	mov.w	r1, #0
 8004764:	0159      	lsls	r1, r3, #5
 8004766:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800476a:	0150      	lsls	r0, r2, #5
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4621      	mov	r1, r4
 8004772:	1a51      	subs	r1, r2, r1
 8004774:	61b9      	str	r1, [r7, #24]
 8004776:	4629      	mov	r1, r5
 8004778:	eb63 0301 	sbc.w	r3, r3, r1
 800477c:	61fb      	str	r3, [r7, #28]
 800477e:	f04f 0200 	mov.w	r2, #0
 8004782:	f04f 0300 	mov.w	r3, #0
 8004786:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800478a:	4659      	mov	r1, fp
 800478c:	018b      	lsls	r3, r1, #6
 800478e:	4651      	mov	r1, sl
 8004790:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004794:	4651      	mov	r1, sl
 8004796:	018a      	lsls	r2, r1, #6
 8004798:	4651      	mov	r1, sl
 800479a:	ebb2 0801 	subs.w	r8, r2, r1
 800479e:	4659      	mov	r1, fp
 80047a0:	eb63 0901 	sbc.w	r9, r3, r1
 80047a4:	f04f 0200 	mov.w	r2, #0
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047b8:	4690      	mov	r8, r2
 80047ba:	4699      	mov	r9, r3
 80047bc:	4623      	mov	r3, r4
 80047be:	eb18 0303 	adds.w	r3, r8, r3
 80047c2:	613b      	str	r3, [r7, #16]
 80047c4:	462b      	mov	r3, r5
 80047c6:	eb49 0303 	adc.w	r3, r9, r3
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	f04f 0200 	mov.w	r2, #0
 80047d0:	f04f 0300 	mov.w	r3, #0
 80047d4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80047d8:	4629      	mov	r1, r5
 80047da:	024b      	lsls	r3, r1, #9
 80047dc:	4621      	mov	r1, r4
 80047de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047e2:	4621      	mov	r1, r4
 80047e4:	024a      	lsls	r2, r1, #9
 80047e6:	4610      	mov	r0, r2
 80047e8:	4619      	mov	r1, r3
 80047ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047ee:	2200      	movs	r2, #0
 80047f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80047f2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80047f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80047f8:	f7fb fd5a 	bl	80002b0 <__aeabi_uldivmod>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	4613      	mov	r3, r2
 8004802:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004806:	e065      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0x420>
 8004808:	40023800 	.word	0x40023800
 800480c:	00f42400 	.word	0x00f42400
 8004810:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004814:	4b3d      	ldr	r3, [pc, #244]	; (800490c <HAL_RCC_GetSysClockFreq+0x458>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	099b      	lsrs	r3, r3, #6
 800481a:	2200      	movs	r2, #0
 800481c:	4618      	mov	r0, r3
 800481e:	4611      	mov	r1, r2
 8004820:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004824:	653b      	str	r3, [r7, #80]	; 0x50
 8004826:	2300      	movs	r3, #0
 8004828:	657b      	str	r3, [r7, #84]	; 0x54
 800482a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800482e:	4642      	mov	r2, r8
 8004830:	464b      	mov	r3, r9
 8004832:	f04f 0000 	mov.w	r0, #0
 8004836:	f04f 0100 	mov.w	r1, #0
 800483a:	0159      	lsls	r1, r3, #5
 800483c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004840:	0150      	lsls	r0, r2, #5
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	4641      	mov	r1, r8
 8004848:	1a51      	subs	r1, r2, r1
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	4649      	mov	r1, r9
 800484e:	eb63 0301 	sbc.w	r3, r3, r1
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	f04f 0300 	mov.w	r3, #0
 800485c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004860:	4659      	mov	r1, fp
 8004862:	018b      	lsls	r3, r1, #6
 8004864:	4651      	mov	r1, sl
 8004866:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800486a:	4651      	mov	r1, sl
 800486c:	018a      	lsls	r2, r1, #6
 800486e:	4651      	mov	r1, sl
 8004870:	1a54      	subs	r4, r2, r1
 8004872:	4659      	mov	r1, fp
 8004874:	eb63 0501 	sbc.w	r5, r3, r1
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	00eb      	lsls	r3, r5, #3
 8004882:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004886:	00e2      	lsls	r2, r4, #3
 8004888:	4614      	mov	r4, r2
 800488a:	461d      	mov	r5, r3
 800488c:	4643      	mov	r3, r8
 800488e:	18e3      	adds	r3, r4, r3
 8004890:	603b      	str	r3, [r7, #0]
 8004892:	464b      	mov	r3, r9
 8004894:	eb45 0303 	adc.w	r3, r5, r3
 8004898:	607b      	str	r3, [r7, #4]
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048a6:	4629      	mov	r1, r5
 80048a8:	028b      	lsls	r3, r1, #10
 80048aa:	4621      	mov	r1, r4
 80048ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048b0:	4621      	mov	r1, r4
 80048b2:	028a      	lsls	r2, r1, #10
 80048b4:	4610      	mov	r0, r2
 80048b6:	4619      	mov	r1, r3
 80048b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048bc:	2200      	movs	r2, #0
 80048be:	64bb      	str	r3, [r7, #72]	; 0x48
 80048c0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80048c2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048c6:	f7fb fcf3 	bl	80002b0 <__aeabi_uldivmod>
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	4613      	mov	r3, r2
 80048d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80048d4:	4b0d      	ldr	r3, [pc, #52]	; (800490c <HAL_RCC_GetSysClockFreq+0x458>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	0f1b      	lsrs	r3, r3, #28
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80048e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80048ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80048f2:	e003      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048f4:	4b06      	ldr	r3, [pc, #24]	; (8004910 <HAL_RCC_GetSysClockFreq+0x45c>)
 80048f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80048fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004900:	4618      	mov	r0, r3
 8004902:	37b8      	adds	r7, #184	; 0xb8
 8004904:	46bd      	mov	sp, r7
 8004906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800490a:	bf00      	nop
 800490c:	40023800 	.word	0x40023800
 8004910:	00f42400 	.word	0x00f42400

08004914 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e28d      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 8083 	beq.w	8004a3a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004934:	4b94      	ldr	r3, [pc, #592]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 030c 	and.w	r3, r3, #12
 800493c:	2b04      	cmp	r3, #4
 800493e:	d019      	beq.n	8004974 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004940:	4b91      	ldr	r3, [pc, #580]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004948:	2b08      	cmp	r3, #8
 800494a:	d106      	bne.n	800495a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800494c:	4b8e      	ldr	r3, [pc, #568]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004954:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004958:	d00c      	beq.n	8004974 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800495a:	4b8b      	ldr	r3, [pc, #556]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004962:	2b0c      	cmp	r3, #12
 8004964:	d112      	bne.n	800498c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004966:	4b88      	ldr	r3, [pc, #544]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800496e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004972:	d10b      	bne.n	800498c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004974:	4b84      	ldr	r3, [pc, #528]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d05b      	beq.n	8004a38 <HAL_RCC_OscConfig+0x124>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d157      	bne.n	8004a38 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e25a      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004994:	d106      	bne.n	80049a4 <HAL_RCC_OscConfig+0x90>
 8004996:	4b7c      	ldr	r3, [pc, #496]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a7b      	ldr	r2, [pc, #492]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 800499c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	e01d      	b.n	80049e0 <HAL_RCC_OscConfig+0xcc>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049ac:	d10c      	bne.n	80049c8 <HAL_RCC_OscConfig+0xb4>
 80049ae:	4b76      	ldr	r3, [pc, #472]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a75      	ldr	r2, [pc, #468]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 80049b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	4b73      	ldr	r3, [pc, #460]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a72      	ldr	r2, [pc, #456]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 80049c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	e00b      	b.n	80049e0 <HAL_RCC_OscConfig+0xcc>
 80049c8:	4b6f      	ldr	r3, [pc, #444]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a6e      	ldr	r2, [pc, #440]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 80049ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	4b6c      	ldr	r3, [pc, #432]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a6b      	ldr	r2, [pc, #428]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 80049da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d013      	beq.n	8004a10 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e8:	f7fe fa10 	bl	8002e0c <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049f0:	f7fe fa0c 	bl	8002e0c <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b64      	cmp	r3, #100	; 0x64
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e21f      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a02:	4b61      	ldr	r3, [pc, #388]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCC_OscConfig+0xdc>
 8004a0e:	e014      	b.n	8004a3a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a10:	f7fe f9fc 	bl	8002e0c <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a18:	f7fe f9f8 	bl	8002e0c <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b64      	cmp	r3, #100	; 0x64
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e20b      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a2a:	4b57      	ldr	r3, [pc, #348]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1f0      	bne.n	8004a18 <HAL_RCC_OscConfig+0x104>
 8004a36:	e000      	b.n	8004a3a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d06f      	beq.n	8004b26 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a46:	4b50      	ldr	r3, [pc, #320]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 030c 	and.w	r3, r3, #12
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d017      	beq.n	8004a82 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a52:	4b4d      	ldr	r3, [pc, #308]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	d105      	bne.n	8004a6a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a5e:	4b4a      	ldr	r3, [pc, #296]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00b      	beq.n	8004a82 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a6a:	4b47      	ldr	r3, [pc, #284]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a72:	2b0c      	cmp	r3, #12
 8004a74:	d11c      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a76:	4b44      	ldr	r3, [pc, #272]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d116      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a82:	4b41      	ldr	r3, [pc, #260]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d005      	beq.n	8004a9a <HAL_RCC_OscConfig+0x186>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d001      	beq.n	8004a9a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e1d3      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a9a:	4b3b      	ldr	r3, [pc, #236]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	4937      	ldr	r1, [pc, #220]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aae:	e03a      	b.n	8004b26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d020      	beq.n	8004afa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ab8:	4b34      	ldr	r3, [pc, #208]	; (8004b8c <HAL_RCC_OscConfig+0x278>)
 8004aba:	2201      	movs	r2, #1
 8004abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abe:	f7fe f9a5 	bl	8002e0c <HAL_GetTick>
 8004ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac4:	e008      	b.n	8004ad8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ac6:	f7fe f9a1 	bl	8002e0c <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e1b4      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad8:	4b2b      	ldr	r3, [pc, #172]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0f0      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae4:	4b28      	ldr	r3, [pc, #160]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	00db      	lsls	r3, r3, #3
 8004af2:	4925      	ldr	r1, [pc, #148]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	600b      	str	r3, [r1, #0]
 8004af8:	e015      	b.n	8004b26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004afa:	4b24      	ldr	r3, [pc, #144]	; (8004b8c <HAL_RCC_OscConfig+0x278>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b00:	f7fe f984 	bl	8002e0c <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b08:	f7fe f980 	bl	8002e0c <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e193      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b1a:	4b1b      	ldr	r3, [pc, #108]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1f0      	bne.n	8004b08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0308 	and.w	r3, r3, #8
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d036      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d016      	beq.n	8004b68 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b3a:	4b15      	ldr	r3, [pc, #84]	; (8004b90 <HAL_RCC_OscConfig+0x27c>)
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b40:	f7fe f964 	bl	8002e0c <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b48:	f7fe f960 	bl	8002e0c <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e173      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b5a:	4b0b      	ldr	r3, [pc, #44]	; (8004b88 <HAL_RCC_OscConfig+0x274>)
 8004b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0f0      	beq.n	8004b48 <HAL_RCC_OscConfig+0x234>
 8004b66:	e01b      	b.n	8004ba0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b68:	4b09      	ldr	r3, [pc, #36]	; (8004b90 <HAL_RCC_OscConfig+0x27c>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6e:	f7fe f94d 	bl	8002e0c <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b74:	e00e      	b.n	8004b94 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b76:	f7fe f949 	bl	8002e0c <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d907      	bls.n	8004b94 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e15c      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
 8004b88:	40023800 	.word	0x40023800
 8004b8c:	42470000 	.word	0x42470000
 8004b90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b94:	4b8a      	ldr	r3, [pc, #552]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1ea      	bne.n	8004b76 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 8097 	beq.w	8004cdc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bb2:	4b83      	ldr	r3, [pc, #524]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10f      	bne.n	8004bde <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	4b7f      	ldr	r3, [pc, #508]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	4a7e      	ldr	r2, [pc, #504]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8004bce:	4b7c      	ldr	r3, [pc, #496]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd6:	60bb      	str	r3, [r7, #8]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bde:	4b79      	ldr	r3, [pc, #484]	; (8004dc4 <HAL_RCC_OscConfig+0x4b0>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d118      	bne.n	8004c1c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bea:	4b76      	ldr	r3, [pc, #472]	; (8004dc4 <HAL_RCC_OscConfig+0x4b0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a75      	ldr	r2, [pc, #468]	; (8004dc4 <HAL_RCC_OscConfig+0x4b0>)
 8004bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bf6:	f7fe f909 	bl	8002e0c <HAL_GetTick>
 8004bfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bfc:	e008      	b.n	8004c10 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bfe:	f7fe f905 	bl	8002e0c <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e118      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c10:	4b6c      	ldr	r3, [pc, #432]	; (8004dc4 <HAL_RCC_OscConfig+0x4b0>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d0f0      	beq.n	8004bfe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d106      	bne.n	8004c32 <HAL_RCC_OscConfig+0x31e>
 8004c24:	4b66      	ldr	r3, [pc, #408]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c28:	4a65      	ldr	r2, [pc, #404]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c2a:	f043 0301 	orr.w	r3, r3, #1
 8004c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c30:	e01c      	b.n	8004c6c <HAL_RCC_OscConfig+0x358>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	2b05      	cmp	r3, #5
 8004c38:	d10c      	bne.n	8004c54 <HAL_RCC_OscConfig+0x340>
 8004c3a:	4b61      	ldr	r3, [pc, #388]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3e:	4a60      	ldr	r2, [pc, #384]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c40:	f043 0304 	orr.w	r3, r3, #4
 8004c44:	6713      	str	r3, [r2, #112]	; 0x70
 8004c46:	4b5e      	ldr	r3, [pc, #376]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4a:	4a5d      	ldr	r2, [pc, #372]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c4c:	f043 0301 	orr.w	r3, r3, #1
 8004c50:	6713      	str	r3, [r2, #112]	; 0x70
 8004c52:	e00b      	b.n	8004c6c <HAL_RCC_OscConfig+0x358>
 8004c54:	4b5a      	ldr	r3, [pc, #360]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c58:	4a59      	ldr	r2, [pc, #356]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c5a:	f023 0301 	bic.w	r3, r3, #1
 8004c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c60:	4b57      	ldr	r3, [pc, #348]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c64:	4a56      	ldr	r2, [pc, #344]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c66:	f023 0304 	bic.w	r3, r3, #4
 8004c6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d015      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c74:	f7fe f8ca 	bl	8002e0c <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c7a:	e00a      	b.n	8004c92 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c7c:	f7fe f8c6 	bl	8002e0c <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e0d7      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c92:	4b4b      	ldr	r3, [pc, #300]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0ee      	beq.n	8004c7c <HAL_RCC_OscConfig+0x368>
 8004c9e:	e014      	b.n	8004cca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca0:	f7fe f8b4 	bl	8002e0c <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ca6:	e00a      	b.n	8004cbe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ca8:	f7fe f8b0 	bl	8002e0c <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e0c1      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cbe:	4b40      	ldr	r3, [pc, #256]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1ee      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cca:	7dfb      	ldrb	r3, [r7, #23]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d105      	bne.n	8004cdc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cd0:	4b3b      	ldr	r3, [pc, #236]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd4:	4a3a      	ldr	r2, [pc, #232]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004cd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 80ad 	beq.w	8004e40 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ce6:	4b36      	ldr	r3, [pc, #216]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f003 030c 	and.w	r3, r3, #12
 8004cee:	2b08      	cmp	r3, #8
 8004cf0:	d060      	beq.n	8004db4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d145      	bne.n	8004d86 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cfa:	4b33      	ldr	r3, [pc, #204]	; (8004dc8 <HAL_RCC_OscConfig+0x4b4>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d00:	f7fe f884 	bl	8002e0c <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d08:	f7fe f880 	bl	8002e0c <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e093      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d1a:	4b29      	ldr	r3, [pc, #164]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1f0      	bne.n	8004d08 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	69da      	ldr	r2, [r3, #28]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	019b      	lsls	r3, r3, #6
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3c:	085b      	lsrs	r3, r3, #1
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	041b      	lsls	r3, r3, #16
 8004d42:	431a      	orrs	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d48:	061b      	lsls	r3, r3, #24
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d50:	071b      	lsls	r3, r3, #28
 8004d52:	491b      	ldr	r1, [pc, #108]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d58:	4b1b      	ldr	r3, [pc, #108]	; (8004dc8 <HAL_RCC_OscConfig+0x4b4>)
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5e:	f7fe f855 	bl	8002e0c <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d66:	f7fe f851 	bl	8002e0c <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e064      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d78:	4b11      	ldr	r3, [pc, #68]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0f0      	beq.n	8004d66 <HAL_RCC_OscConfig+0x452>
 8004d84:	e05c      	b.n	8004e40 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d86:	4b10      	ldr	r3, [pc, #64]	; (8004dc8 <HAL_RCC_OscConfig+0x4b4>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8c:	f7fe f83e 	bl	8002e0c <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d94:	f7fe f83a 	bl	8002e0c <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e04d      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004da6:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <HAL_RCC_OscConfig+0x4ac>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1f0      	bne.n	8004d94 <HAL_RCC_OscConfig+0x480>
 8004db2:	e045      	b.n	8004e40 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d107      	bne.n	8004dcc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e040      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
 8004dc0:	40023800 	.word	0x40023800
 8004dc4:	40007000 	.word	0x40007000
 8004dc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004dcc:	4b1f      	ldr	r3, [pc, #124]	; (8004e4c <HAL_RCC_OscConfig+0x538>)
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d030      	beq.n	8004e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d129      	bne.n	8004e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d122      	bne.n	8004e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d119      	bne.n	8004e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e12:	085b      	lsrs	r3, r3, #1
 8004e14:	3b01      	subs	r3, #1
 8004e16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d10f      	bne.n	8004e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d107      	bne.n	8004e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e36:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d001      	beq.n	8004e40 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e000      	b.n	8004e42 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	40023800 	.word	0x40023800

08004e50 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e066      	b.n	8004f34 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	7f5b      	ldrb	r3, [r3, #29]
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d105      	bne.n	8004e7c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7fd fd2c 	bl	80028d4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	22ca      	movs	r2, #202	; 0xca
 8004e88:	625a      	str	r2, [r3, #36]	; 0x24
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2253      	movs	r2, #83	; 0x53
 8004e90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fc66 	bl	8005764 <RTC_EnterInitMode>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004e9c:	7bfb      	ldrb	r3, [r7, #15]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d12c      	bne.n	8004efc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6812      	ldr	r2, [r2, #0]
 8004eac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004eb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eb4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6899      	ldr	r1, [r3, #8]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	68d2      	ldr	r2, [r2, #12]
 8004edc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6919      	ldr	r1, [r3, #16]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	041a      	lsls	r2, r3, #16
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 fc6d 	bl	80057d2 <RTC_ExitInitMode>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d113      	bne.n	8004f2a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f10:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	699a      	ldr	r2, [r3, #24]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	22ff      	movs	r2, #255	; 0xff
 8004f30:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004f3c:	b590      	push	{r4, r7, lr}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	7f1b      	ldrb	r3, [r3, #28]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <HAL_RTC_SetTime+0x1c>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e087      	b.n	8005068 <HAL_RTC_SetTime+0x12c>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2202      	movs	r2, #2
 8004f62:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d126      	bne.n	8004fb8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d102      	bne.n	8004f7e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 fc4a 	bl	800581c <RTC_ByteToBcd2>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	785b      	ldrb	r3, [r3, #1]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 fc43 	bl	800581c <RTC_ByteToBcd2>
 8004f96:	4603      	mov	r3, r0
 8004f98:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004f9a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	789b      	ldrb	r3, [r3, #2]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 fc3b 	bl	800581c <RTC_ByteToBcd2>
 8004fa6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004fa8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	78db      	ldrb	r3, [r3, #3]
 8004fb0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	617b      	str	r3, [r7, #20]
 8004fb6:	e018      	b.n	8004fea <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d102      	bne.n	8004fcc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	785b      	ldrb	r3, [r3, #1]
 8004fd6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004fd8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004fde:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	78db      	ldrb	r3, [r3, #3]
 8004fe4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	22ca      	movs	r2, #202	; 0xca
 8004ff0:	625a      	str	r2, [r3, #36]	; 0x24
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2253      	movs	r2, #83	; 0x53
 8004ff8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 fbb2 	bl	8005764 <RTC_EnterInitMode>
 8005000:	4603      	mov	r3, r0
 8005002:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005004:	7cfb      	ldrb	r3, [r7, #19]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d120      	bne.n	800504c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005014:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005018:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005028:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	6899      	ldr	r1, [r3, #8]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	68da      	ldr	r2, [r3, #12]
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	431a      	orrs	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 fbc5 	bl	80057d2 <RTC_ExitInitMode>
 8005048:	4603      	mov	r3, r0
 800504a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800504c:	7cfb      	ldrb	r3, [r7, #19]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d102      	bne.n	8005058 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2201      	movs	r2, #1
 8005056:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	22ff      	movs	r2, #255	; 0xff
 800505e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	771a      	strb	r2, [r3, #28]

  return status;
 8005066:	7cfb      	ldrb	r3, [r7, #19]
}
 8005068:	4618      	mov	r0, r3
 800506a:	371c      	adds	r7, #28
 800506c:	46bd      	mov	sp, r7
 800506e:	bd90      	pop	{r4, r7, pc}

08005070 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800507c:	2300      	movs	r3, #0
 800507e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80050a2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80050a6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	0c1b      	lsrs	r3, r3, #16
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	0a1b      	lsrs	r3, r3, #8
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	0d9b      	lsrs	r3, r3, #22
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d11a      	bne.n	8005122 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f000 fbb0 	bl	8005856 <RTC_Bcd2ToByte>
 80050f6:	4603      	mov	r3, r0
 80050f8:	461a      	mov	r2, r3
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	785b      	ldrb	r3, [r3, #1]
 8005102:	4618      	mov	r0, r3
 8005104:	f000 fba7 	bl	8005856 <RTC_Bcd2ToByte>
 8005108:	4603      	mov	r3, r0
 800510a:	461a      	mov	r2, r3
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	789b      	ldrb	r3, [r3, #2]
 8005114:	4618      	mov	r0, r3
 8005116:	f000 fb9e 	bl	8005856 <RTC_Bcd2ToByte>
 800511a:	4603      	mov	r3, r0
 800511c:	461a      	mov	r2, r3
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800512c:	b590      	push	{r4, r7, lr}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	7f1b      	ldrb	r3, [r3, #28]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d101      	bne.n	8005148 <HAL_RTC_SetDate+0x1c>
 8005144:	2302      	movs	r3, #2
 8005146:	e071      	b.n	800522c <HAL_RTC_SetDate+0x100>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2201      	movs	r2, #1
 800514c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2202      	movs	r2, #2
 8005152:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10e      	bne.n	8005178 <HAL_RTC_SetDate+0x4c>
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	785b      	ldrb	r3, [r3, #1]
 800515e:	f003 0310 	and.w	r3, r3, #16
 8005162:	2b00      	cmp	r3, #0
 8005164:	d008      	beq.n	8005178 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	785b      	ldrb	r3, [r3, #1]
 800516a:	f023 0310 	bic.w	r3, r3, #16
 800516e:	b2db      	uxtb	r3, r3
 8005170:	330a      	adds	r3, #10
 8005172:	b2da      	uxtb	r2, r3
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d11c      	bne.n	80051b8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	78db      	ldrb	r3, [r3, #3]
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fb4a 	bl	800581c <RTC_ByteToBcd2>
 8005188:	4603      	mov	r3, r0
 800518a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	785b      	ldrb	r3, [r3, #1]
 8005190:	4618      	mov	r0, r3
 8005192:	f000 fb43 	bl	800581c <RTC_ByteToBcd2>
 8005196:	4603      	mov	r3, r0
 8005198:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800519a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	789b      	ldrb	r3, [r3, #2]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 fb3b 	bl	800581c <RTC_ByteToBcd2>
 80051a6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80051a8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80051b2:	4313      	orrs	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]
 80051b6:	e00e      	b.n	80051d6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	78db      	ldrb	r3, [r3, #3]
 80051bc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	785b      	ldrb	r3, [r3, #1]
 80051c2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80051c4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80051ca:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80051d2:	4313      	orrs	r3, r2
 80051d4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	22ca      	movs	r2, #202	; 0xca
 80051dc:	625a      	str	r2, [r3, #36]	; 0x24
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2253      	movs	r2, #83	; 0x53
 80051e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f000 fabc 	bl	8005764 <RTC_EnterInitMode>
 80051ec:	4603      	mov	r3, r0
 80051ee:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80051f0:	7cfb      	ldrb	r3, [r7, #19]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10c      	bne.n	8005210 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005200:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005204:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 fae3 	bl	80057d2 <RTC_ExitInitMode>
 800520c:	4603      	mov	r3, r0
 800520e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005210:	7cfb      	ldrb	r3, [r7, #19]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d102      	bne.n	800521c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2201      	movs	r2, #1
 800521a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	22ff      	movs	r2, #255	; 0xff
 8005222:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	771a      	strb	r2, [r3, #28]

  return status;
 800522a:	7cfb      	ldrb	r3, [r7, #19]
}
 800522c:	4618      	mov	r0, r3
 800522e:	371c      	adds	r7, #28
 8005230:	46bd      	mov	sp, r7
 8005232:	bd90      	pop	{r4, r7, pc}

08005234 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005240:	2300      	movs	r3, #0
 8005242:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800524e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005252:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	0c1b      	lsrs	r3, r3, #16
 8005258:	b2da      	uxtb	r2, r3
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	0a1b      	lsrs	r3, r3, #8
 8005262:	b2db      	uxtb	r3, r3
 8005264:	f003 031f 	and.w	r3, r3, #31
 8005268:	b2da      	uxtb	r2, r3
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	b2db      	uxtb	r3, r3
 8005272:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005276:	b2da      	uxtb	r2, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	0b5b      	lsrs	r3, r3, #13
 8005280:	b2db      	uxtb	r3, r3
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	b2da      	uxtb	r2, r3
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d11a      	bne.n	80052c8 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	78db      	ldrb	r3, [r3, #3]
 8005296:	4618      	mov	r0, r3
 8005298:	f000 fadd 	bl	8005856 <RTC_Bcd2ToByte>
 800529c:	4603      	mov	r3, r0
 800529e:	461a      	mov	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	785b      	ldrb	r3, [r3, #1]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f000 fad4 	bl	8005856 <RTC_Bcd2ToByte>
 80052ae:	4603      	mov	r3, r0
 80052b0:	461a      	mov	r2, r3
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	789b      	ldrb	r3, [r3, #2]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 facb 	bl	8005856 <RTC_Bcd2ToByte>
 80052c0:	4603      	mov	r3, r0
 80052c2:	461a      	mov	r2, r3
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3718      	adds	r7, #24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
	...

080052d4 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80052d4:	b590      	push	{r4, r7, lr}
 80052d6:	b089      	sub	sp, #36	; 0x24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80052e0:	4b9a      	ldr	r3, [pc, #616]	; (800554c <HAL_RTC_SetAlarm_IT+0x278>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a9a      	ldr	r2, [pc, #616]	; (8005550 <HAL_RTC_SetAlarm_IT+0x27c>)
 80052e6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ea:	0adb      	lsrs	r3, r3, #11
 80052ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052f0:	fb02 f303 	mul.w	r3, r2, r3
 80052f4:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 80052fa:	2300      	movs	r3, #0
 80052fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	7f1b      	ldrb	r3, [r3, #28]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d101      	bne.n	800530a <HAL_RTC_SetAlarm_IT+0x36>
 8005306:	2302      	movs	r3, #2
 8005308:	e11c      	b.n	8005544 <HAL_RTC_SetAlarm_IT+0x270>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2201      	movs	r2, #1
 800530e:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2202      	movs	r2, #2
 8005314:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d137      	bne.n	800538c <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005326:	2b00      	cmp	r3, #0
 8005328:	d102      	bne.n	8005330 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2200      	movs	r2, #0
 800532e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	4618      	mov	r0, r3
 8005336:	f000 fa71 	bl	800581c <RTC_ByteToBcd2>
 800533a:	4603      	mov	r3, r0
 800533c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	785b      	ldrb	r3, [r3, #1]
 8005342:	4618      	mov	r0, r3
 8005344:	f000 fa6a 	bl	800581c <RTC_ByteToBcd2>
 8005348:	4603      	mov	r3, r0
 800534a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800534c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	789b      	ldrb	r3, [r3, #2]
 8005352:	4618      	mov	r0, r3
 8005354:	f000 fa62 	bl	800581c <RTC_ByteToBcd2>
 8005358:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800535a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	78db      	ldrb	r3, [r3, #3]
 8005362:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005364:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800536e:	4618      	mov	r0, r3
 8005370:	f000 fa54 	bl	800581c <RTC_ByteToBcd2>
 8005374:	4603      	mov	r3, r0
 8005376:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005378:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005380:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005386:	4313      	orrs	r3, r2
 8005388:	61fb      	str	r3, [r7, #28]
 800538a:	e023      	b.n	80053d4 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005396:	2b00      	cmp	r3, #0
 8005398:	d102      	bne.n	80053a0 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2200      	movs	r2, #0
 800539e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	785b      	ldrb	r3, [r3, #1]
 80053aa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80053ac:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80053b2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	78db      	ldrb	r3, [r3, #3]
 80053b8:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80053ba:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053c2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80053c4:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80053ca:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80053d0:	4313      	orrs	r3, r2
 80053d2:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80053dc:	4313      	orrs	r3, r2
 80053de:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	22ca      	movs	r2, #202	; 0xca
 80053e6:	625a      	str	r2, [r3, #36]	; 0x24
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2253      	movs	r2, #83	; 0x53
 80053ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053f8:	d141      	bne.n	800547e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	689a      	ldr	r2, [r3, #8]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005408:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	b2da      	uxtb	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800541a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	1e5a      	subs	r2, r3, #1
 8005420:	617a      	str	r2, [r7, #20]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10b      	bne.n	800543e <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	22ff      	movs	r2, #255	; 0xff
 800542c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2203      	movs	r2, #3
 8005432:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e082      	b.n	8005544 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0e7      	beq.n	800541c <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	69fa      	ldr	r2, [r7, #28]
 8005452:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800546a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689a      	ldr	r2, [r3, #8]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800547a:	609a      	str	r2, [r3, #8]
 800547c:	e04b      	b.n	8005516 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800548c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	b2da      	uxtb	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800549e:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80054a0:	4b2a      	ldr	r3, [pc, #168]	; (800554c <HAL_RTC_SetAlarm_IT+0x278>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a2a      	ldr	r2, [pc, #168]	; (8005550 <HAL_RTC_SetAlarm_IT+0x27c>)
 80054a6:	fba2 2303 	umull	r2, r3, r2, r3
 80054aa:	0adb      	lsrs	r3, r3, #11
 80054ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054b0:	fb02 f303 	mul.w	r3, r2, r3
 80054b4:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	1e5a      	subs	r2, r3, #1
 80054ba:	617a      	str	r2, [r7, #20]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10b      	bne.n	80054d8 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	22ff      	movs	r2, #255	; 0xff
 80054c6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2203      	movs	r2, #3
 80054cc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e035      	b.n	8005544 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0e7      	beq.n	80054b6 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	69fa      	ldr	r2, [r7, #28]
 80054ec:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005504:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005514:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005516:	4b0f      	ldr	r3, [pc, #60]	; (8005554 <HAL_RTC_SetAlarm_IT+0x280>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a0e      	ldr	r2, [pc, #56]	; (8005554 <HAL_RTC_SetAlarm_IT+0x280>)
 800551c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005520:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005522:	4b0c      	ldr	r3, [pc, #48]	; (8005554 <HAL_RTC_SetAlarm_IT+0x280>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	4a0b      	ldr	r2, [pc, #44]	; (8005554 <HAL_RTC_SetAlarm_IT+0x280>)
 8005528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800552c:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	22ff      	movs	r2, #255	; 0xff
 8005534:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2201      	movs	r2, #1
 800553a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3724      	adds	r7, #36	; 0x24
 8005548:	46bd      	mov	sp, r7
 800554a:	bd90      	pop	{r4, r7, pc}
 800554c:	20000004 	.word	0x20000004
 8005550:	10624dd3 	.word	0x10624dd3
 8005554:	40013c00 	.word	0x40013c00

08005558 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A: Alarm A
  *            @arg RTC_ALARM_B: Alarm B
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005562:	2300      	movs	r3, #0
 8005564:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	7f1b      	ldrb	r3, [r3, #28]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d101      	bne.n	8005572 <HAL_RTC_DeactivateAlarm+0x1a>
 800556e:	2302      	movs	r3, #2
 8005570:	e07b      	b.n	800566a <HAL_RTC_DeactivateAlarm+0x112>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2201      	movs	r2, #1
 8005576:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	22ca      	movs	r2, #202	; 0xca
 8005584:	625a      	str	r2, [r3, #36]	; 0x24
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2253      	movs	r2, #83	; 0x53
 800558c:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005594:	d12f      	bne.n	80055f6 <HAL_RTC_DeactivateAlarm+0x9e>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	689a      	ldr	r2, [r3, #8]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055a4:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055b4:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80055b6:	f7fd fc29 	bl	8002e0c <HAL_GetTick>
 80055ba:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80055bc:	e013      	b.n	80055e6 <HAL_RTC_DeactivateAlarm+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80055be:	f7fd fc25 	bl	8002e0c <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055cc:	d90b      	bls.n	80055e6 <HAL_RTC_DeactivateAlarm+0x8e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	22ff      	movs	r2, #255	; 0xff
 80055d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2203      	movs	r2, #3
 80055da:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e041      	b.n	800566a <HAL_RTC_DeactivateAlarm+0x112>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d0e4      	beq.n	80055be <HAL_RTC_DeactivateAlarm+0x66>
 80055f4:	e02e      	b.n	8005654 <HAL_RTC_DeactivateAlarm+0xfc>
    }
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005604:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005614:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005616:	f7fd fbf9 	bl	8002e0c <HAL_GetTick>
 800561a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800561c:	e013      	b.n	8005646 <HAL_RTC_DeactivateAlarm+0xee>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800561e:	f7fd fbf5 	bl	8002e0c <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800562c:	d90b      	bls.n	8005646 <HAL_RTC_DeactivateAlarm+0xee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	22ff      	movs	r2, #255	; 0xff
 8005634:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2203      	movs	r2, #3
 800563a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e011      	b.n	800566a <HAL_RTC_DeactivateAlarm+0x112>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d0e4      	beq.n	800561e <HAL_RTC_DeactivateAlarm+0xc6>
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	22ff      	movs	r2, #255	; 0xff
 800565a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
	...

08005674 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d012      	beq.n	80056b0 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00b      	beq.n	80056b0 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f831 	bl	8005700 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80056ae:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d012      	beq.n	80056e4 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00b      	beq.n	80056e4 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f8de 	bl	800588e <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f462 7220 	orn	r2, r2, #640	; 0x280
 80056e2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80056e4:	4b05      	ldr	r3, [pc, #20]	; (80056fc <HAL_RTC_AlarmIRQHandler+0x88>)
 80056e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056ea:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	775a      	strb	r2, [r3, #29]
}
 80056f2:	bf00      	nop
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	40013c00 	.word	0x40013c00

08005700 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800571c:	2300      	movs	r3, #0
 800571e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800572e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005730:	f7fd fb6c 	bl	8002e0c <HAL_GetTick>
 8005734:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005736:	e009      	b.n	800574c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005738:	f7fd fb68 	bl	8002e0c <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005746:	d901      	bls.n	800574c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e007      	b.n	800575c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b00      	cmp	r3, #0
 8005758:	d0ee      	beq.n	8005738 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800576c:	2300      	movs	r3, #0
 800576e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005770:	2300      	movs	r3, #0
 8005772:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577e:	2b00      	cmp	r3, #0
 8005780:	d122      	bne.n	80057c8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68da      	ldr	r2, [r3, #12]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005790:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005792:	f7fd fb3b 	bl	8002e0c <HAL_GetTick>
 8005796:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005798:	e00c      	b.n	80057b4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800579a:	f7fd fb37 	bl	8002e0c <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057a8:	d904      	bls.n	80057b4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2204      	movs	r2, #4
 80057ae:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d102      	bne.n	80057c8 <RTC_EnterInitMode+0x64>
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d1e8      	bne.n	800579a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b084      	sub	sp, #16
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057da:	2300      	movs	r3, #0
 80057dc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68da      	ldr	r2, [r3, #12]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057ec:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f003 0320 	and.w	r3, r3, #32
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10a      	bne.n	8005812 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7ff ff89 	bl	8005714 <HAL_RTC_WaitForSynchro>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d004      	beq.n	8005812 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2204      	movs	r2, #4
 800580c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005812:	7bfb      	ldrb	r3, [r7, #15]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	4603      	mov	r3, r0
 8005824:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005826:	2300      	movs	r3, #0
 8005828:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800582a:	e005      	b.n	8005838 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800582c:	7bfb      	ldrb	r3, [r7, #15]
 800582e:	3301      	adds	r3, #1
 8005830:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005832:	79fb      	ldrb	r3, [r7, #7]
 8005834:	3b0a      	subs	r3, #10
 8005836:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005838:	79fb      	ldrb	r3, [r7, #7]
 800583a:	2b09      	cmp	r3, #9
 800583c:	d8f6      	bhi.n	800582c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800583e:	7bfb      	ldrb	r3, [r7, #15]
 8005840:	011b      	lsls	r3, r3, #4
 8005842:	b2da      	uxtb	r2, r3
 8005844:	79fb      	ldrb	r3, [r7, #7]
 8005846:	4313      	orrs	r3, r2
 8005848:	b2db      	uxtb	r3, r3
}
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005856:	b480      	push	{r7}
 8005858:	b085      	sub	sp, #20
 800585a:	af00      	add	r7, sp, #0
 800585c:	4603      	mov	r3, r0
 800585e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005864:	79fb      	ldrb	r3, [r7, #7]
 8005866:	091b      	lsrs	r3, r3, #4
 8005868:	b2db      	uxtb	r3, r3
 800586a:	461a      	mov	r2, r3
 800586c:	0092      	lsls	r2, r2, #2
 800586e:	4413      	add	r3, r2
 8005870:	005b      	lsls	r3, r3, #1
 8005872:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005874:	79fb      	ldrb	r3, [r7, #7]
 8005876:	f003 030f 	and.w	r3, r3, #15
 800587a:	b2da      	uxtb	r2, r3
 800587c:	7bfb      	ldrb	r3, [r7, #15]
 800587e:	4413      	add	r3, r2
 8005880:	b2db      	uxtb	r3, r3
}
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800588e:	b480      	push	{r7}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005896:	bf00      	nop
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b082      	sub	sp, #8
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d101      	bne.n	80058b4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e07b      	b.n	80059ac <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d108      	bne.n	80058ce <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058c4:	d009      	beq.n	80058da <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	61da      	str	r2, [r3, #28]
 80058cc:	e005      	b.n	80058da <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d106      	bne.n	80058fa <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7fd f81f 	bl	8002938 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2202      	movs	r2, #2
 80058fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005910:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005922:	431a      	orrs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800592c:	431a      	orrs	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	431a      	orrs	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	431a      	orrs	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800594a:	431a      	orrs	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	69db      	ldr	r3, [r3, #28]
 8005950:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005954:	431a      	orrs	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800595e:	ea42 0103 	orr.w	r1, r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005966:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	0c1b      	lsrs	r3, r3, #16
 8005978:	f003 0104 	and.w	r1, r3, #4
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005980:	f003 0210 	and.w	r2, r3, #16
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69da      	ldr	r2, [r3, #28]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800599a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b088      	sub	sp, #32
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	603b      	str	r3, [r7, #0]
 80059c0:	4613      	mov	r3, r2
 80059c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059c4:	2300      	movs	r3, #0
 80059c6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d101      	bne.n	80059d6 <HAL_SPI_Transmit+0x22>
 80059d2:	2302      	movs	r3, #2
 80059d4:	e126      	b.n	8005c24 <HAL_SPI_Transmit+0x270>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059de:	f7fd fa15 	bl	8002e0c <HAL_GetTick>
 80059e2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80059e4:	88fb      	ldrh	r3, [r7, #6]
 80059e6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d002      	beq.n	80059fa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80059f4:	2302      	movs	r3, #2
 80059f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059f8:	e10b      	b.n	8005c12 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <HAL_SPI_Transmit+0x52>
 8005a00:	88fb      	ldrh	r3, [r7, #6]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d102      	bne.n	8005a0c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a0a:	e102      	b.n	8005c12 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2203      	movs	r2, #3
 8005a10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	88fa      	ldrh	r2, [r7, #6]
 8005a24:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	88fa      	ldrh	r2, [r7, #6]
 8005a2a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a52:	d10f      	bne.n	8005a74 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a62:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a72:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7e:	2b40      	cmp	r3, #64	; 0x40
 8005a80:	d007      	beq.n	8005a92 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a9a:	d14b      	bne.n	8005b34 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d002      	beq.n	8005aaa <HAL_SPI_Transmit+0xf6>
 8005aa4:	8afb      	ldrh	r3, [r7, #22]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d13e      	bne.n	8005b28 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aae:	881a      	ldrh	r2, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aba:	1c9a      	adds	r2, r3, #2
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ace:	e02b      	b.n	8005b28 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d112      	bne.n	8005b04 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae2:	881a      	ldrh	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aee:	1c9a      	adds	r2, r3, #2
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	3b01      	subs	r3, #1
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b02:	e011      	b.n	8005b28 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b04:	f7fd f982 	bl	8002e0c <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d803      	bhi.n	8005b1c <HAL_SPI_Transmit+0x168>
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b1a:	d102      	bne.n	8005b22 <HAL_SPI_Transmit+0x16e>
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d102      	bne.n	8005b28 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b26:	e074      	b.n	8005c12 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1ce      	bne.n	8005ad0 <HAL_SPI_Transmit+0x11c>
 8005b32:	e04c      	b.n	8005bce <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <HAL_SPI_Transmit+0x18e>
 8005b3c:	8afb      	ldrh	r3, [r7, #22]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d140      	bne.n	8005bc4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	330c      	adds	r3, #12
 8005b4c:	7812      	ldrb	r2, [r2, #0]
 8005b4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b54:	1c5a      	adds	r2, r3, #1
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	3b01      	subs	r3, #1
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005b68:	e02c      	b.n	8005bc4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d113      	bne.n	8005ba0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	330c      	adds	r3, #12
 8005b82:	7812      	ldrb	r2, [r2, #0]
 8005b84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8a:	1c5a      	adds	r2, r3, #1
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	3b01      	subs	r3, #1
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b9e:	e011      	b.n	8005bc4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ba0:	f7fd f934 	bl	8002e0c <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d803      	bhi.n	8005bb8 <HAL_SPI_Transmit+0x204>
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb6:	d102      	bne.n	8005bbe <HAL_SPI_Transmit+0x20a>
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d102      	bne.n	8005bc4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005bc2:	e026      	b.n	8005c12 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1cd      	bne.n	8005b6a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	6839      	ldr	r1, [r7, #0]
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f000 fe3a 	bl	800684c <SPI_EndRxTxTransaction>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2220      	movs	r2, #32
 8005be2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10a      	bne.n	8005c02 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bec:	2300      	movs	r3, #0
 8005bee:	613b      	str	r3, [r7, #16]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	613b      	str	r3, [r7, #16]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	613b      	str	r3, [r7, #16]
 8005c00:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d002      	beq.n	8005c10 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	77fb      	strb	r3, [r7, #31]
 8005c0e:	e000      	b.n	8005c12 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005c10:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c22:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3720      	adds	r7, #32
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b088      	sub	sp, #32
 8005c30:	af02      	add	r7, sp, #8
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	603b      	str	r3, [r7, #0]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c48:	d112      	bne.n	8005c70 <HAL_SPI_Receive+0x44>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10e      	bne.n	8005c70 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2204      	movs	r2, #4
 8005c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c5a:	88fa      	ldrh	r2, [r7, #6]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	4613      	mov	r3, r2
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	68b9      	ldr	r1, [r7, #8]
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 f8f1 	bl	8005e4e <HAL_SPI_TransmitReceive>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	e0ea      	b.n	8005e46 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d101      	bne.n	8005c7e <HAL_SPI_Receive+0x52>
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	e0e3      	b.n	8005e46 <HAL_SPI_Receive+0x21a>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c86:	f7fd f8c1 	bl	8002e0c <HAL_GetTick>
 8005c8a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d002      	beq.n	8005c9e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005c98:	2302      	movs	r3, #2
 8005c9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c9c:	e0ca      	b.n	8005e34 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <HAL_SPI_Receive+0x7e>
 8005ca4:	88fb      	ldrh	r3, [r7, #6]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d102      	bne.n	8005cb0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005cae:	e0c1      	b.n	8005e34 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2204      	movs	r2, #4
 8005cb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	88fa      	ldrh	r2, [r7, #6]
 8005cc8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	88fa      	ldrh	r2, [r7, #6]
 8005cce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cf6:	d10f      	bne.n	8005d18 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d16:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d22:	2b40      	cmp	r3, #64	; 0x40
 8005d24:	d007      	beq.n	8005d36 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d34:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d162      	bne.n	8005e04 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005d3e:	e02e      	b.n	8005d9e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d115      	bne.n	8005d7a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f103 020c 	add.w	r2, r3, #12
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5a:	7812      	ldrb	r2, [r2, #0]
 8005d5c:	b2d2      	uxtb	r2, r2
 8005d5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	3b01      	subs	r3, #1
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d78:	e011      	b.n	8005d9e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d7a:	f7fd f847 	bl	8002e0c <HAL_GetTick>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	683a      	ldr	r2, [r7, #0]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d803      	bhi.n	8005d92 <HAL_SPI_Receive+0x166>
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d90:	d102      	bne.n	8005d98 <HAL_SPI_Receive+0x16c>
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d102      	bne.n	8005d9e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005d9c:	e04a      	b.n	8005e34 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1cb      	bne.n	8005d40 <HAL_SPI_Receive+0x114>
 8005da8:	e031      	b.n	8005e0e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d113      	bne.n	8005de0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc2:	b292      	uxth	r2, r2
 8005dc4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dca:	1c9a      	adds	r2, r3, #2
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dde:	e011      	b.n	8005e04 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005de0:	f7fd f814 	bl	8002e0c <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	683a      	ldr	r2, [r7, #0]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d803      	bhi.n	8005df8 <HAL_SPI_Receive+0x1cc>
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df6:	d102      	bne.n	8005dfe <HAL_SPI_Receive+0x1d2>
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d102      	bne.n	8005e04 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005e02:	e017      	b.n	8005e34 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1cd      	bne.n	8005daa <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	6839      	ldr	r1, [r7, #0]
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f000 fcb4 	bl	8006780 <SPI_EndRxTransaction>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d002      	beq.n	8005e24 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2220      	movs	r2, #32
 8005e22:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d002      	beq.n	8005e32 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	75fb      	strb	r3, [r7, #23]
 8005e30:	e000      	b.n	8005e34 <HAL_SPI_Receive+0x208>
  }

error :
 8005e32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3718      	adds	r7, #24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b08c      	sub	sp, #48	; 0x30
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	60f8      	str	r0, [r7, #12]
 8005e56:	60b9      	str	r1, [r7, #8]
 8005e58:	607a      	str	r2, [r7, #4]
 8005e5a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d101      	bne.n	8005e74 <HAL_SPI_TransmitReceive+0x26>
 8005e70:	2302      	movs	r3, #2
 8005e72:	e18a      	b.n	800618a <HAL_SPI_TransmitReceive+0x33c>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e7c:	f7fc ffc6 	bl	8002e0c <HAL_GetTick>
 8005e80:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005e92:	887b      	ldrh	r3, [r7, #2]
 8005e94:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d00f      	beq.n	8005ebe <HAL_SPI_TransmitReceive+0x70>
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ea4:	d107      	bne.n	8005eb6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d103      	bne.n	8005eb6 <HAL_SPI_TransmitReceive+0x68>
 8005eae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005eb2:	2b04      	cmp	r3, #4
 8005eb4:	d003      	beq.n	8005ebe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005eb6:	2302      	movs	r3, #2
 8005eb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ebc:	e15b      	b.n	8006176 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d005      	beq.n	8005ed0 <HAL_SPI_TransmitReceive+0x82>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <HAL_SPI_TransmitReceive+0x82>
 8005eca:	887b      	ldrh	r3, [r7, #2]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d103      	bne.n	8005ed8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ed6:	e14e      	b.n	8006176 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b04      	cmp	r3, #4
 8005ee2:	d003      	beq.n	8005eec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2205      	movs	r2, #5
 8005ee8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	887a      	ldrh	r2, [r7, #2]
 8005efc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	887a      	ldrh	r2, [r7, #2]
 8005f02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	887a      	ldrh	r2, [r7, #2]
 8005f0e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	887a      	ldrh	r2, [r7, #2]
 8005f14:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2c:	2b40      	cmp	r3, #64	; 0x40
 8005f2e:	d007      	beq.n	8005f40 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f48:	d178      	bne.n	800603c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d002      	beq.n	8005f58 <HAL_SPI_TransmitReceive+0x10a>
 8005f52:	8b7b      	ldrh	r3, [r7, #26]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d166      	bne.n	8006026 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5c:	881a      	ldrh	r2, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f68:	1c9a      	adds	r2, r3, #2
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	3b01      	subs	r3, #1
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f7c:	e053      	b.n	8006026 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d11b      	bne.n	8005fc4 <HAL_SPI_TransmitReceive+0x176>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d016      	beq.n	8005fc4 <HAL_SPI_TransmitReceive+0x176>
 8005f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d113      	bne.n	8005fc4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa0:	881a      	ldrh	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fac:	1c9a      	adds	r2, r3, #2
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d119      	bne.n	8006006 <HAL_SPI_TransmitReceive+0x1b8>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d014      	beq.n	8006006 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe6:	b292      	uxth	r2, r2
 8005fe8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fee:	1c9a      	adds	r2, r3, #2
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006002:	2301      	movs	r3, #1
 8006004:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006006:	f7fc ff01 	bl	8002e0c <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006012:	429a      	cmp	r2, r3
 8006014:	d807      	bhi.n	8006026 <HAL_SPI_TransmitReceive+0x1d8>
 8006016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601c:	d003      	beq.n	8006026 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006024:	e0a7      	b.n	8006176 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800602a:	b29b      	uxth	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1a6      	bne.n	8005f7e <HAL_SPI_TransmitReceive+0x130>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006034:	b29b      	uxth	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1a1      	bne.n	8005f7e <HAL_SPI_TransmitReceive+0x130>
 800603a:	e07c      	b.n	8006136 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d002      	beq.n	800604a <HAL_SPI_TransmitReceive+0x1fc>
 8006044:	8b7b      	ldrh	r3, [r7, #26]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d16b      	bne.n	8006122 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	330c      	adds	r3, #12
 8006054:	7812      	ldrb	r2, [r2, #0]
 8006056:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605c:	1c5a      	adds	r2, r3, #1
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006070:	e057      	b.n	8006122 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b02      	cmp	r3, #2
 800607e:	d11c      	bne.n	80060ba <HAL_SPI_TransmitReceive+0x26c>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006084:	b29b      	uxth	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d017      	beq.n	80060ba <HAL_SPI_TransmitReceive+0x26c>
 800608a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608c:	2b01      	cmp	r3, #1
 800608e:	d114      	bne.n	80060ba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	330c      	adds	r3, #12
 800609a:	7812      	ldrb	r2, [r2, #0]
 800609c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a2:	1c5a      	adds	r2, r3, #1
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d119      	bne.n	80060fc <HAL_SPI_TransmitReceive+0x2ae>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d014      	beq.n	80060fc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68da      	ldr	r2, [r3, #12]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060dc:	b2d2      	uxtb	r2, r2
 80060de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e4:	1c5a      	adds	r2, r3, #1
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	3b01      	subs	r3, #1
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060f8:	2301      	movs	r3, #1
 80060fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80060fc:	f7fc fe86 	bl	8002e0c <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006108:	429a      	cmp	r2, r3
 800610a:	d803      	bhi.n	8006114 <HAL_SPI_TransmitReceive+0x2c6>
 800610c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006112:	d102      	bne.n	800611a <HAL_SPI_TransmitReceive+0x2cc>
 8006114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006116:	2b00      	cmp	r3, #0
 8006118:	d103      	bne.n	8006122 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006120:	e029      	b.n	8006176 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006126:	b29b      	uxth	r3, r3
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1a2      	bne.n	8006072 <HAL_SPI_TransmitReceive+0x224>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006130:	b29b      	uxth	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d19d      	bne.n	8006072 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006138:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f000 fb86 	bl	800684c <SPI_EndRxTxTransaction>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d006      	beq.n	8006154 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2220      	movs	r2, #32
 8006150:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006152:	e010      	b.n	8006176 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10b      	bne.n	8006174 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800615c:	2300      	movs	r3, #0
 800615e:	617b      	str	r3, [r7, #20]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	617b      	str	r3, [r7, #20]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	617b      	str	r3, [r7, #20]
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	e000      	b.n	8006176 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006174:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006186:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800618a:	4618      	mov	r0, r3
 800618c:	3730      	adds	r7, #48	; 0x30
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
	...

08006194 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	4613      	mov	r3, r2
 80061a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d101      	bne.n	80061b4 <HAL_SPI_Transmit_DMA+0x20>
 80061b0:	2302      	movs	r3, #2
 80061b2:	e09b      	b.n	80062ec <HAL_SPI_Transmit_DMA+0x158>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d002      	beq.n	80061ce <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80061c8:	2302      	movs	r3, #2
 80061ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061cc:	e089      	b.n	80062e2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d002      	beq.n	80061da <HAL_SPI_Transmit_DMA+0x46>
 80061d4:	88fb      	ldrh	r3, [r7, #6]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d102      	bne.n	80061e0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061de:	e080      	b.n	80062e2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2203      	movs	r2, #3
 80061e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	88fa      	ldrh	r2, [r7, #6]
 80061f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	88fa      	ldrh	r2, [r7, #6]
 80061fe:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006226:	d10f      	bne.n	8006248 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006236:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006246:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800624c:	4a29      	ldr	r2, [pc, #164]	; (80062f4 <HAL_SPI_Transmit_DMA+0x160>)
 800624e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006254:	4a28      	ldr	r2, [pc, #160]	; (80062f8 <HAL_SPI_Transmit_DMA+0x164>)
 8006256:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800625c:	4a27      	ldr	r2, [pc, #156]	; (80062fc <HAL_SPI_Transmit_DMA+0x168>)
 800625e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006264:	2200      	movs	r2, #0
 8006266:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006270:	4619      	mov	r1, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	330c      	adds	r3, #12
 8006278:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800627e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006280:	f7fc ff84 	bl	800318c <HAL_DMA_Start_IT>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00c      	beq.n	80062a4 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628e:	f043 0210 	orr.w	r2, r3, #16
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80062a2:	e01e      	b.n	80062e2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ae:	2b40      	cmp	r3, #64	; 0x40
 80062b0:	d007      	beq.n	80062c2 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062c0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f042 0220 	orr.w	r2, r2, #32
 80062d0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f042 0202 	orr.w	r2, r2, #2
 80062e0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80062ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3718      	adds	r7, #24
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	080065ed 	.word	0x080065ed
 80062f8:	08006545 	.word	0x08006545
 80062fc:	08006609 	.word	0x08006609

08006300 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b088      	sub	sp, #32
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	099b      	lsrs	r3, r3, #6
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10f      	bne.n	8006344 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00a      	beq.n	8006344 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	099b      	lsrs	r3, r3, #6
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	d004      	beq.n	8006344 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	4798      	blx	r3
    return;
 8006342:	e0d7      	b.n	80064f4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	085b      	lsrs	r3, r3, #1
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00a      	beq.n	8006366 <HAL_SPI_IRQHandler+0x66>
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	09db      	lsrs	r3, r3, #7
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b00      	cmp	r3, #0
 800635a:	d004      	beq.n	8006366 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	4798      	blx	r3
    return;
 8006364:	e0c6      	b.n	80064f4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	095b      	lsrs	r3, r3, #5
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10c      	bne.n	800638c <HAL_SPI_IRQHandler+0x8c>
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	099b      	lsrs	r3, r3, #6
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	2b00      	cmp	r3, #0
 800637c:	d106      	bne.n	800638c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	0a1b      	lsrs	r3, r3, #8
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	f000 80b4 	beq.w	80064f4 <HAL_SPI_IRQHandler+0x1f4>
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	095b      	lsrs	r3, r3, #5
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 80ad 	beq.w	80064f4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	099b      	lsrs	r3, r3, #6
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d023      	beq.n	80063ee <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b03      	cmp	r3, #3
 80063b0:	d011      	beq.n	80063d6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b6:	f043 0204 	orr.w	r2, r3, #4
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063be:	2300      	movs	r3, #0
 80063c0:	617b      	str	r3, [r7, #20]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	617b      	str	r3, [r7, #20]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	617b      	str	r3, [r7, #20]
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	e00b      	b.n	80063ee <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063d6:	2300      	movs	r3, #0
 80063d8:	613b      	str	r3, [r7, #16]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	613b      	str	r3, [r7, #16]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	613b      	str	r3, [r7, #16]
 80063ea:	693b      	ldr	r3, [r7, #16]
        return;
 80063ec:	e082      	b.n	80064f4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	095b      	lsrs	r3, r3, #5
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d014      	beq.n	8006424 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063fe:	f043 0201 	orr.w	r2, r3, #1
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006406:	2300      	movs	r3, #0
 8006408:	60fb      	str	r3, [r7, #12]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	60fb      	str	r3, [r7, #12]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006420:	601a      	str	r2, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	0a1b      	lsrs	r3, r3, #8
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00c      	beq.n	800644a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006434:	f043 0208 	orr.w	r2, r3, #8
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800643c:	2300      	movs	r3, #0
 800643e:	60bb      	str	r3, [r7, #8]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	60bb      	str	r3, [r7, #8]
 8006448:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800644e:	2b00      	cmp	r3, #0
 8006450:	d04f      	beq.n	80064f2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006460:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	2b00      	cmp	r3, #0
 8006472:	d104      	bne.n	800647e <HAL_SPI_IRQHandler+0x17e>
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b00      	cmp	r3, #0
 800647c:	d034      	beq.n	80064e8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f022 0203 	bic.w	r2, r2, #3
 800648c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006492:	2b00      	cmp	r3, #0
 8006494:	d011      	beq.n	80064ba <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800649a:	4a18      	ldr	r2, [pc, #96]	; (80064fc <HAL_SPI_IRQHandler+0x1fc>)
 800649c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fc feca 	bl	800323c <HAL_DMA_Abort_IT>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d005      	beq.n	80064ba <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d016      	beq.n	80064f0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064c6:	4a0d      	ldr	r2, [pc, #52]	; (80064fc <HAL_SPI_IRQHandler+0x1fc>)
 80064c8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fc feb4 	bl	800323c <HAL_DMA_Abort_IT>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00a      	beq.n	80064f0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80064e6:	e003      	b.n	80064f0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f813 	bl	8006514 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80064ee:	e000      	b.n	80064f2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80064f0:	bf00      	nop
    return;
 80064f2:	bf00      	nop
  }
}
 80064f4:	3720      	adds	r7, #32
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	08006649 	.word	0x08006649

08006500 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006536:	b2db      	uxtb	r3, r3
}
 8006538:	4618      	mov	r0, r3
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006550:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006552:	f7fc fc5b 	bl	8002e0c <HAL_GetTick>
 8006556:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006566:	d03b      	beq.n	80065e0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f022 0220 	bic.w	r2, r2, #32
 8006576:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 0202 	bic.w	r2, r2, #2
 8006586:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	2164      	movs	r1, #100	; 0x64
 800658c:	6978      	ldr	r0, [r7, #20]
 800658e:	f000 f95d 	bl	800684c <SPI_EndRxTxTransaction>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d005      	beq.n	80065a4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800659c:	f043 0220 	orr.w	r2, r3, #32
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10a      	bne.n	80065c2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065ac:	2300      	movs	r3, #0
 80065ae:	60fb      	str	r3, [r7, #12]
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	60fb      	str	r3, [r7, #12]
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	60fb      	str	r3, [r7, #12]
 80065c0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	2200      	movs	r2, #0
 80065c6:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d003      	beq.n	80065e0 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80065d8:	6978      	ldr	r0, [r7, #20]
 80065da:	f7ff ff9b 	bl	8006514 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80065de:	e002      	b.n	80065e6 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80065e0:	6978      	ldr	r0, [r7, #20]
 80065e2:	f7fa fbaf 	bl	8000d44 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80065e6:	3718      	adds	r7, #24
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f7ff ff80 	bl	8006500 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006600:	bf00      	nop
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006614:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f022 0203 	bic.w	r2, r2, #3
 8006624:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800662a:	f043 0210 	orr.w	r2, r3, #16
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f7ff ff6a 	bl	8006514 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006640:	bf00      	nop
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006654:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f7ff ff56 	bl	8006514 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006668:	bf00      	nop
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b088      	sub	sp, #32
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	603b      	str	r3, [r7, #0]
 800667c:	4613      	mov	r3, r2
 800667e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006680:	f7fc fbc4 	bl	8002e0c <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006688:	1a9b      	subs	r3, r3, r2
 800668a:	683a      	ldr	r2, [r7, #0]
 800668c:	4413      	add	r3, r2
 800668e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006690:	f7fc fbbc 	bl	8002e0c <HAL_GetTick>
 8006694:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006696:	4b39      	ldr	r3, [pc, #228]	; (800677c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	015b      	lsls	r3, r3, #5
 800669c:	0d1b      	lsrs	r3, r3, #20
 800669e:	69fa      	ldr	r2, [r7, #28]
 80066a0:	fb02 f303 	mul.w	r3, r2, r3
 80066a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066a6:	e054      	b.n	8006752 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ae:	d050      	beq.n	8006752 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066b0:	f7fc fbac 	bl	8002e0c <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	69fa      	ldr	r2, [r7, #28]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d902      	bls.n	80066c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d13d      	bne.n	8006742 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80066d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066de:	d111      	bne.n	8006704 <SPI_WaitFlagStateUntilTimeout+0x94>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066e8:	d004      	beq.n	80066f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066f2:	d107      	bne.n	8006704 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006702:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800670c:	d10f      	bne.n	800672e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800672c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e017      	b.n	8006772 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d101      	bne.n	800674c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006748:	2300      	movs	r3, #0
 800674a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	3b01      	subs	r3, #1
 8006750:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	689a      	ldr	r2, [r3, #8]
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	4013      	ands	r3, r2
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	429a      	cmp	r2, r3
 8006760:	bf0c      	ite	eq
 8006762:	2301      	moveq	r3, #1
 8006764:	2300      	movne	r3, #0
 8006766:	b2db      	uxtb	r3, r3
 8006768:	461a      	mov	r2, r3
 800676a:	79fb      	ldrb	r3, [r7, #7]
 800676c:	429a      	cmp	r2, r3
 800676e:	d19b      	bne.n	80066a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3720      	adds	r7, #32
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	20000004 	.word	0x20000004

08006780 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af02      	add	r7, sp, #8
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006794:	d111      	bne.n	80067ba <SPI_EndRxTransaction+0x3a>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800679e:	d004      	beq.n	80067aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067a8:	d107      	bne.n	80067ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067b8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067c2:	d12a      	bne.n	800681a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067cc:	d012      	beq.n	80067f4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2200      	movs	r2, #0
 80067d6:	2180      	movs	r1, #128	; 0x80
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f7ff ff49 	bl	8006670 <SPI_WaitFlagStateUntilTimeout>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d02d      	beq.n	8006840 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e8:	f043 0220 	orr.w	r2, r3, #32
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e026      	b.n	8006842 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	2200      	movs	r2, #0
 80067fc:	2101      	movs	r1, #1
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f7ff ff36 	bl	8006670 <SPI_WaitFlagStateUntilTimeout>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d01a      	beq.n	8006840 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800680e:	f043 0220 	orr.w	r2, r3, #32
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e013      	b.n	8006842 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	2200      	movs	r2, #0
 8006822:	2101      	movs	r1, #1
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f7ff ff23 	bl	8006670 <SPI_WaitFlagStateUntilTimeout>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d007      	beq.n	8006840 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006834:	f043 0220 	orr.w	r2, r3, #32
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e000      	b.n	8006842 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
	...

0800684c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b088      	sub	sp, #32
 8006850:	af02      	add	r7, sp, #8
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006858:	4b1b      	ldr	r3, [pc, #108]	; (80068c8 <SPI_EndRxTxTransaction+0x7c>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a1b      	ldr	r2, [pc, #108]	; (80068cc <SPI_EndRxTxTransaction+0x80>)
 800685e:	fba2 2303 	umull	r2, r3, r2, r3
 8006862:	0d5b      	lsrs	r3, r3, #21
 8006864:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006868:	fb02 f303 	mul.w	r3, r2, r3
 800686c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006876:	d112      	bne.n	800689e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2200      	movs	r2, #0
 8006880:	2180      	movs	r1, #128	; 0x80
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f7ff fef4 	bl	8006670 <SPI_WaitFlagStateUntilTimeout>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d016      	beq.n	80068bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006892:	f043 0220 	orr.w	r2, r3, #32
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e00f      	b.n	80068be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00a      	beq.n	80068ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b4:	2b80      	cmp	r3, #128	; 0x80
 80068b6:	d0f2      	beq.n	800689e <SPI_EndRxTxTransaction+0x52>
 80068b8:	e000      	b.n	80068bc <SPI_EndRxTxTransaction+0x70>
        break;
 80068ba:	bf00      	nop
  }

  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20000004 	.word	0x20000004
 80068cc:	165e9f81 	.word	0x165e9f81

080068d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d101      	bne.n	80068e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e041      	b.n	8006966 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d106      	bne.n	80068fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f839 	bl	800696e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	3304      	adds	r3, #4
 800690c:	4619      	mov	r1, r3
 800690e:	4610      	mov	r0, r2
 8006910:	f000 f9d8 	bl	8006cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3708      	adds	r7, #8
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800696e:	b480      	push	{r7}
 8006970:	b083      	sub	sp, #12
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006976:	bf00      	nop
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
	...

08006984 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b01      	cmp	r3, #1
 8006996:	d001      	beq.n	800699c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e04e      	b.n	8006a3a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2202      	movs	r2, #2
 80069a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68da      	ldr	r2, [r3, #12]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f042 0201 	orr.w	r2, r2, #1
 80069b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a23      	ldr	r2, [pc, #140]	; (8006a48 <HAL_TIM_Base_Start_IT+0xc4>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d022      	beq.n	8006a04 <HAL_TIM_Base_Start_IT+0x80>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069c6:	d01d      	beq.n	8006a04 <HAL_TIM_Base_Start_IT+0x80>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a1f      	ldr	r2, [pc, #124]	; (8006a4c <HAL_TIM_Base_Start_IT+0xc8>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d018      	beq.n	8006a04 <HAL_TIM_Base_Start_IT+0x80>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a1e      	ldr	r2, [pc, #120]	; (8006a50 <HAL_TIM_Base_Start_IT+0xcc>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d013      	beq.n	8006a04 <HAL_TIM_Base_Start_IT+0x80>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a1c      	ldr	r2, [pc, #112]	; (8006a54 <HAL_TIM_Base_Start_IT+0xd0>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d00e      	beq.n	8006a04 <HAL_TIM_Base_Start_IT+0x80>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a1b      	ldr	r2, [pc, #108]	; (8006a58 <HAL_TIM_Base_Start_IT+0xd4>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d009      	beq.n	8006a04 <HAL_TIM_Base_Start_IT+0x80>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a19      	ldr	r2, [pc, #100]	; (8006a5c <HAL_TIM_Base_Start_IT+0xd8>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d004      	beq.n	8006a04 <HAL_TIM_Base_Start_IT+0x80>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a18      	ldr	r2, [pc, #96]	; (8006a60 <HAL_TIM_Base_Start_IT+0xdc>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d111      	bne.n	8006a28 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f003 0307 	and.w	r3, r3, #7
 8006a0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2b06      	cmp	r3, #6
 8006a14:	d010      	beq.n	8006a38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f042 0201 	orr.w	r2, r2, #1
 8006a24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a26:	e007      	b.n	8006a38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f042 0201 	orr.w	r2, r2, #1
 8006a36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	40010000 	.word	0x40010000
 8006a4c:	40000400 	.word	0x40000400
 8006a50:	40000800 	.word	0x40000800
 8006a54:	40000c00 	.word	0x40000c00
 8006a58:	40010400 	.word	0x40010400
 8006a5c:	40014000 	.word	0x40014000
 8006a60:	40001800 	.word	0x40001800

08006a64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	f003 0302 	and.w	r3, r3, #2
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d122      	bne.n	8006ac0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	f003 0302 	and.w	r3, r3, #2
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d11b      	bne.n	8006ac0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f06f 0202 	mvn.w	r2, #2
 8006a90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	f003 0303 	and.w	r3, r3, #3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d003      	beq.n	8006aae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f8ee 	bl	8006c88 <HAL_TIM_IC_CaptureCallback>
 8006aac:	e005      	b.n	8006aba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f8e0 	bl	8006c74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 f8f1 	bl	8006c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	f003 0304 	and.w	r3, r3, #4
 8006aca:	2b04      	cmp	r3, #4
 8006acc:	d122      	bne.n	8006b14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	f003 0304 	and.w	r3, r3, #4
 8006ad8:	2b04      	cmp	r3, #4
 8006ada:	d11b      	bne.n	8006b14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f06f 0204 	mvn.w	r2, #4
 8006ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2202      	movs	r2, #2
 8006aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f8c4 	bl	8006c88 <HAL_TIM_IC_CaptureCallback>
 8006b00:	e005      	b.n	8006b0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f8b6 	bl	8006c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 f8c7 	bl	8006c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	f003 0308 	and.w	r3, r3, #8
 8006b1e:	2b08      	cmp	r3, #8
 8006b20:	d122      	bne.n	8006b68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	f003 0308 	and.w	r3, r3, #8
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d11b      	bne.n	8006b68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f06f 0208 	mvn.w	r2, #8
 8006b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2204      	movs	r2, #4
 8006b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	69db      	ldr	r3, [r3, #28]
 8006b46:	f003 0303 	and.w	r3, r3, #3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d003      	beq.n	8006b56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f89a 	bl	8006c88 <HAL_TIM_IC_CaptureCallback>
 8006b54:	e005      	b.n	8006b62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f88c 	bl	8006c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 f89d 	bl	8006c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	f003 0310 	and.w	r3, r3, #16
 8006b72:	2b10      	cmp	r3, #16
 8006b74:	d122      	bne.n	8006bbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f003 0310 	and.w	r3, r3, #16
 8006b80:	2b10      	cmp	r3, #16
 8006b82:	d11b      	bne.n	8006bbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f06f 0210 	mvn.w	r2, #16
 8006b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2208      	movs	r2, #8
 8006b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	69db      	ldr	r3, [r3, #28]
 8006b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d003      	beq.n	8006baa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f870 	bl	8006c88 <HAL_TIM_IC_CaptureCallback>
 8006ba8:	e005      	b.n	8006bb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f862 	bl	8006c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f873 	bl	8006c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d10e      	bne.n	8006be8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	f003 0301 	and.w	r3, r3, #1
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d107      	bne.n	8006be8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f06f 0201 	mvn.w	r2, #1
 8006be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f7fb fe36 	bl	8002854 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf2:	2b80      	cmp	r3, #128	; 0x80
 8006bf4:	d10e      	bne.n	8006c14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c00:	2b80      	cmp	r3, #128	; 0x80
 8006c02:	d107      	bne.n	8006c14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f902 	bl	8006e18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c1e:	2b40      	cmp	r3, #64	; 0x40
 8006c20:	d10e      	bne.n	8006c40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c2c:	2b40      	cmp	r3, #64	; 0x40
 8006c2e:	d107      	bne.n	8006c40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f838 	bl	8006cb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	f003 0320 	and.w	r3, r3, #32
 8006c4a:	2b20      	cmp	r3, #32
 8006c4c:	d10e      	bne.n	8006c6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	f003 0320 	and.w	r3, r3, #32
 8006c58:	2b20      	cmp	r3, #32
 8006c5a:	d107      	bne.n	8006c6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f06f 0220 	mvn.w	r2, #32
 8006c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f8cc 	bl	8006e04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c6c:	bf00      	nop
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a40      	ldr	r2, [pc, #256]	; (8006dd8 <TIM_Base_SetConfig+0x114>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d013      	beq.n	8006d04 <TIM_Base_SetConfig+0x40>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ce2:	d00f      	beq.n	8006d04 <TIM_Base_SetConfig+0x40>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a3d      	ldr	r2, [pc, #244]	; (8006ddc <TIM_Base_SetConfig+0x118>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d00b      	beq.n	8006d04 <TIM_Base_SetConfig+0x40>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a3c      	ldr	r2, [pc, #240]	; (8006de0 <TIM_Base_SetConfig+0x11c>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d007      	beq.n	8006d04 <TIM_Base_SetConfig+0x40>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a3b      	ldr	r2, [pc, #236]	; (8006de4 <TIM_Base_SetConfig+0x120>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d003      	beq.n	8006d04 <TIM_Base_SetConfig+0x40>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a3a      	ldr	r2, [pc, #232]	; (8006de8 <TIM_Base_SetConfig+0x124>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d108      	bne.n	8006d16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a2f      	ldr	r2, [pc, #188]	; (8006dd8 <TIM_Base_SetConfig+0x114>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d02b      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d24:	d027      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a2c      	ldr	r2, [pc, #176]	; (8006ddc <TIM_Base_SetConfig+0x118>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d023      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a2b      	ldr	r2, [pc, #172]	; (8006de0 <TIM_Base_SetConfig+0x11c>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d01f      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a2a      	ldr	r2, [pc, #168]	; (8006de4 <TIM_Base_SetConfig+0x120>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d01b      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a29      	ldr	r2, [pc, #164]	; (8006de8 <TIM_Base_SetConfig+0x124>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d017      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a28      	ldr	r2, [pc, #160]	; (8006dec <TIM_Base_SetConfig+0x128>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d013      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a27      	ldr	r2, [pc, #156]	; (8006df0 <TIM_Base_SetConfig+0x12c>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d00f      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a26      	ldr	r2, [pc, #152]	; (8006df4 <TIM_Base_SetConfig+0x130>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d00b      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a25      	ldr	r2, [pc, #148]	; (8006df8 <TIM_Base_SetConfig+0x134>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d007      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a24      	ldr	r2, [pc, #144]	; (8006dfc <TIM_Base_SetConfig+0x138>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d003      	beq.n	8006d76 <TIM_Base_SetConfig+0xb2>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a23      	ldr	r2, [pc, #140]	; (8006e00 <TIM_Base_SetConfig+0x13c>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d108      	bne.n	8006d88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a0a      	ldr	r2, [pc, #40]	; (8006dd8 <TIM_Base_SetConfig+0x114>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d003      	beq.n	8006dbc <TIM_Base_SetConfig+0xf8>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a0c      	ldr	r2, [pc, #48]	; (8006de8 <TIM_Base_SetConfig+0x124>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d103      	bne.n	8006dc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	691a      	ldr	r2, [r3, #16]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	615a      	str	r2, [r3, #20]
}
 8006dca:	bf00      	nop
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	40010000 	.word	0x40010000
 8006ddc:	40000400 	.word	0x40000400
 8006de0:	40000800 	.word	0x40000800
 8006de4:	40000c00 	.word	0x40000c00
 8006de8:	40010400 	.word	0x40010400
 8006dec:	40014000 	.word	0x40014000
 8006df0:	40014400 	.word	0x40014400
 8006df4:	40014800 	.word	0x40014800
 8006df8:	40001800 	.word	0x40001800
 8006dfc:	40001c00 	.word	0x40001c00
 8006e00:	40002000 	.word	0x40002000

08006e04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e03f      	b.n	8006ebe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d106      	bne.n	8006e58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7fb fe28 	bl	8002aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2224      	movs	r2, #36	; 0x24
 8006e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68da      	ldr	r2, [r3, #12]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f829 	bl	8006ec8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	691a      	ldr	r2, [r3, #16]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	695a      	ldr	r2, [r3, #20]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68da      	ldr	r2, [r3, #12]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ea4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3708      	adds	r7, #8
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
	...

08006ec8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ecc:	b0c0      	sub	sp, #256	; 0x100
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ee4:	68d9      	ldr	r1, [r3, #12]
 8006ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	ea40 0301 	orr.w	r3, r0, r1
 8006ef0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef6:	689a      	ldr	r2, [r3, #8]
 8006ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	431a      	orrs	r2, r3
 8006f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	431a      	orrs	r2, r3
 8006f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f0c:	69db      	ldr	r3, [r3, #28]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006f20:	f021 010c 	bic.w	r1, r1, #12
 8006f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f2e:	430b      	orrs	r3, r1
 8006f30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f42:	6999      	ldr	r1, [r3, #24]
 8006f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	ea40 0301 	orr.w	r3, r0, r1
 8006f4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	4b8f      	ldr	r3, [pc, #572]	; (8007194 <UART_SetConfig+0x2cc>)
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d005      	beq.n	8006f68 <UART_SetConfig+0xa0>
 8006f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	4b8d      	ldr	r3, [pc, #564]	; (8007198 <UART_SetConfig+0x2d0>)
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d104      	bne.n	8006f72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f68:	f7fc ff34 	bl	8003dd4 <HAL_RCC_GetPCLK2Freq>
 8006f6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006f70:	e003      	b.n	8006f7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f72:	f7fc ff1b 	bl	8003dac <HAL_RCC_GetPCLK1Freq>
 8006f76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f7e:	69db      	ldr	r3, [r3, #28]
 8006f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f84:	f040 810c 	bne.w	80071a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006f96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006f9a:	4622      	mov	r2, r4
 8006f9c:	462b      	mov	r3, r5
 8006f9e:	1891      	adds	r1, r2, r2
 8006fa0:	65b9      	str	r1, [r7, #88]	; 0x58
 8006fa2:	415b      	adcs	r3, r3
 8006fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fa6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006faa:	4621      	mov	r1, r4
 8006fac:	eb12 0801 	adds.w	r8, r2, r1
 8006fb0:	4629      	mov	r1, r5
 8006fb2:	eb43 0901 	adc.w	r9, r3, r1
 8006fb6:	f04f 0200 	mov.w	r2, #0
 8006fba:	f04f 0300 	mov.w	r3, #0
 8006fbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006fc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fca:	4690      	mov	r8, r2
 8006fcc:	4699      	mov	r9, r3
 8006fce:	4623      	mov	r3, r4
 8006fd0:	eb18 0303 	adds.w	r3, r8, r3
 8006fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006fd8:	462b      	mov	r3, r5
 8006fda:	eb49 0303 	adc.w	r3, r9, r3
 8006fde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006fee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006ff2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	18db      	adds	r3, r3, r3
 8006ffa:	653b      	str	r3, [r7, #80]	; 0x50
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	eb42 0303 	adc.w	r3, r2, r3
 8007002:	657b      	str	r3, [r7, #84]	; 0x54
 8007004:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007008:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800700c:	f7f9 f950 	bl	80002b0 <__aeabi_uldivmod>
 8007010:	4602      	mov	r2, r0
 8007012:	460b      	mov	r3, r1
 8007014:	4b61      	ldr	r3, [pc, #388]	; (800719c <UART_SetConfig+0x2d4>)
 8007016:	fba3 2302 	umull	r2, r3, r3, r2
 800701a:	095b      	lsrs	r3, r3, #5
 800701c:	011c      	lsls	r4, r3, #4
 800701e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007022:	2200      	movs	r2, #0
 8007024:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007028:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800702c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007030:	4642      	mov	r2, r8
 8007032:	464b      	mov	r3, r9
 8007034:	1891      	adds	r1, r2, r2
 8007036:	64b9      	str	r1, [r7, #72]	; 0x48
 8007038:	415b      	adcs	r3, r3
 800703a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800703c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007040:	4641      	mov	r1, r8
 8007042:	eb12 0a01 	adds.w	sl, r2, r1
 8007046:	4649      	mov	r1, r9
 8007048:	eb43 0b01 	adc.w	fp, r3, r1
 800704c:	f04f 0200 	mov.w	r2, #0
 8007050:	f04f 0300 	mov.w	r3, #0
 8007054:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007058:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800705c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007060:	4692      	mov	sl, r2
 8007062:	469b      	mov	fp, r3
 8007064:	4643      	mov	r3, r8
 8007066:	eb1a 0303 	adds.w	r3, sl, r3
 800706a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800706e:	464b      	mov	r3, r9
 8007070:	eb4b 0303 	adc.w	r3, fp, r3
 8007074:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007084:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007088:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800708c:	460b      	mov	r3, r1
 800708e:	18db      	adds	r3, r3, r3
 8007090:	643b      	str	r3, [r7, #64]	; 0x40
 8007092:	4613      	mov	r3, r2
 8007094:	eb42 0303 	adc.w	r3, r2, r3
 8007098:	647b      	str	r3, [r7, #68]	; 0x44
 800709a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800709e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80070a2:	f7f9 f905 	bl	80002b0 <__aeabi_uldivmod>
 80070a6:	4602      	mov	r2, r0
 80070a8:	460b      	mov	r3, r1
 80070aa:	4611      	mov	r1, r2
 80070ac:	4b3b      	ldr	r3, [pc, #236]	; (800719c <UART_SetConfig+0x2d4>)
 80070ae:	fba3 2301 	umull	r2, r3, r3, r1
 80070b2:	095b      	lsrs	r3, r3, #5
 80070b4:	2264      	movs	r2, #100	; 0x64
 80070b6:	fb02 f303 	mul.w	r3, r2, r3
 80070ba:	1acb      	subs	r3, r1, r3
 80070bc:	00db      	lsls	r3, r3, #3
 80070be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80070c2:	4b36      	ldr	r3, [pc, #216]	; (800719c <UART_SetConfig+0x2d4>)
 80070c4:	fba3 2302 	umull	r2, r3, r3, r2
 80070c8:	095b      	lsrs	r3, r3, #5
 80070ca:	005b      	lsls	r3, r3, #1
 80070cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80070d0:	441c      	add	r4, r3
 80070d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070d6:	2200      	movs	r2, #0
 80070d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80070e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80070e4:	4642      	mov	r2, r8
 80070e6:	464b      	mov	r3, r9
 80070e8:	1891      	adds	r1, r2, r2
 80070ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80070ec:	415b      	adcs	r3, r3
 80070ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80070f4:	4641      	mov	r1, r8
 80070f6:	1851      	adds	r1, r2, r1
 80070f8:	6339      	str	r1, [r7, #48]	; 0x30
 80070fa:	4649      	mov	r1, r9
 80070fc:	414b      	adcs	r3, r1
 80070fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007100:	f04f 0200 	mov.w	r2, #0
 8007104:	f04f 0300 	mov.w	r3, #0
 8007108:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800710c:	4659      	mov	r1, fp
 800710e:	00cb      	lsls	r3, r1, #3
 8007110:	4651      	mov	r1, sl
 8007112:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007116:	4651      	mov	r1, sl
 8007118:	00ca      	lsls	r2, r1, #3
 800711a:	4610      	mov	r0, r2
 800711c:	4619      	mov	r1, r3
 800711e:	4603      	mov	r3, r0
 8007120:	4642      	mov	r2, r8
 8007122:	189b      	adds	r3, r3, r2
 8007124:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007128:	464b      	mov	r3, r9
 800712a:	460a      	mov	r2, r1
 800712c:	eb42 0303 	adc.w	r3, r2, r3
 8007130:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007140:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007144:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007148:	460b      	mov	r3, r1
 800714a:	18db      	adds	r3, r3, r3
 800714c:	62bb      	str	r3, [r7, #40]	; 0x28
 800714e:	4613      	mov	r3, r2
 8007150:	eb42 0303 	adc.w	r3, r2, r3
 8007154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007156:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800715a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800715e:	f7f9 f8a7 	bl	80002b0 <__aeabi_uldivmod>
 8007162:	4602      	mov	r2, r0
 8007164:	460b      	mov	r3, r1
 8007166:	4b0d      	ldr	r3, [pc, #52]	; (800719c <UART_SetConfig+0x2d4>)
 8007168:	fba3 1302 	umull	r1, r3, r3, r2
 800716c:	095b      	lsrs	r3, r3, #5
 800716e:	2164      	movs	r1, #100	; 0x64
 8007170:	fb01 f303 	mul.w	r3, r1, r3
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	00db      	lsls	r3, r3, #3
 8007178:	3332      	adds	r3, #50	; 0x32
 800717a:	4a08      	ldr	r2, [pc, #32]	; (800719c <UART_SetConfig+0x2d4>)
 800717c:	fba2 2303 	umull	r2, r3, r2, r3
 8007180:	095b      	lsrs	r3, r3, #5
 8007182:	f003 0207 	and.w	r2, r3, #7
 8007186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4422      	add	r2, r4
 800718e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007190:	e105      	b.n	800739e <UART_SetConfig+0x4d6>
 8007192:	bf00      	nop
 8007194:	40011000 	.word	0x40011000
 8007198:	40011400 	.word	0x40011400
 800719c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071a4:	2200      	movs	r2, #0
 80071a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80071aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80071ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80071b2:	4642      	mov	r2, r8
 80071b4:	464b      	mov	r3, r9
 80071b6:	1891      	adds	r1, r2, r2
 80071b8:	6239      	str	r1, [r7, #32]
 80071ba:	415b      	adcs	r3, r3
 80071bc:	627b      	str	r3, [r7, #36]	; 0x24
 80071be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071c2:	4641      	mov	r1, r8
 80071c4:	1854      	adds	r4, r2, r1
 80071c6:	4649      	mov	r1, r9
 80071c8:	eb43 0501 	adc.w	r5, r3, r1
 80071cc:	f04f 0200 	mov.w	r2, #0
 80071d0:	f04f 0300 	mov.w	r3, #0
 80071d4:	00eb      	lsls	r3, r5, #3
 80071d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071da:	00e2      	lsls	r2, r4, #3
 80071dc:	4614      	mov	r4, r2
 80071de:	461d      	mov	r5, r3
 80071e0:	4643      	mov	r3, r8
 80071e2:	18e3      	adds	r3, r4, r3
 80071e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80071e8:	464b      	mov	r3, r9
 80071ea:	eb45 0303 	adc.w	r3, r5, r3
 80071ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80071f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007202:	f04f 0200 	mov.w	r2, #0
 8007206:	f04f 0300 	mov.w	r3, #0
 800720a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800720e:	4629      	mov	r1, r5
 8007210:	008b      	lsls	r3, r1, #2
 8007212:	4621      	mov	r1, r4
 8007214:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007218:	4621      	mov	r1, r4
 800721a:	008a      	lsls	r2, r1, #2
 800721c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007220:	f7f9 f846 	bl	80002b0 <__aeabi_uldivmod>
 8007224:	4602      	mov	r2, r0
 8007226:	460b      	mov	r3, r1
 8007228:	4b60      	ldr	r3, [pc, #384]	; (80073ac <UART_SetConfig+0x4e4>)
 800722a:	fba3 2302 	umull	r2, r3, r3, r2
 800722e:	095b      	lsrs	r3, r3, #5
 8007230:	011c      	lsls	r4, r3, #4
 8007232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007236:	2200      	movs	r2, #0
 8007238:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800723c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007240:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007244:	4642      	mov	r2, r8
 8007246:	464b      	mov	r3, r9
 8007248:	1891      	adds	r1, r2, r2
 800724a:	61b9      	str	r1, [r7, #24]
 800724c:	415b      	adcs	r3, r3
 800724e:	61fb      	str	r3, [r7, #28]
 8007250:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007254:	4641      	mov	r1, r8
 8007256:	1851      	adds	r1, r2, r1
 8007258:	6139      	str	r1, [r7, #16]
 800725a:	4649      	mov	r1, r9
 800725c:	414b      	adcs	r3, r1
 800725e:	617b      	str	r3, [r7, #20]
 8007260:	f04f 0200 	mov.w	r2, #0
 8007264:	f04f 0300 	mov.w	r3, #0
 8007268:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800726c:	4659      	mov	r1, fp
 800726e:	00cb      	lsls	r3, r1, #3
 8007270:	4651      	mov	r1, sl
 8007272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007276:	4651      	mov	r1, sl
 8007278:	00ca      	lsls	r2, r1, #3
 800727a:	4610      	mov	r0, r2
 800727c:	4619      	mov	r1, r3
 800727e:	4603      	mov	r3, r0
 8007280:	4642      	mov	r2, r8
 8007282:	189b      	adds	r3, r3, r2
 8007284:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007288:	464b      	mov	r3, r9
 800728a:	460a      	mov	r2, r1
 800728c:	eb42 0303 	adc.w	r3, r2, r3
 8007290:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	67bb      	str	r3, [r7, #120]	; 0x78
 800729e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80072a0:	f04f 0200 	mov.w	r2, #0
 80072a4:	f04f 0300 	mov.w	r3, #0
 80072a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80072ac:	4649      	mov	r1, r9
 80072ae:	008b      	lsls	r3, r1, #2
 80072b0:	4641      	mov	r1, r8
 80072b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072b6:	4641      	mov	r1, r8
 80072b8:	008a      	lsls	r2, r1, #2
 80072ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80072be:	f7f8 fff7 	bl	80002b0 <__aeabi_uldivmod>
 80072c2:	4602      	mov	r2, r0
 80072c4:	460b      	mov	r3, r1
 80072c6:	4b39      	ldr	r3, [pc, #228]	; (80073ac <UART_SetConfig+0x4e4>)
 80072c8:	fba3 1302 	umull	r1, r3, r3, r2
 80072cc:	095b      	lsrs	r3, r3, #5
 80072ce:	2164      	movs	r1, #100	; 0x64
 80072d0:	fb01 f303 	mul.w	r3, r1, r3
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	011b      	lsls	r3, r3, #4
 80072d8:	3332      	adds	r3, #50	; 0x32
 80072da:	4a34      	ldr	r2, [pc, #208]	; (80073ac <UART_SetConfig+0x4e4>)
 80072dc:	fba2 2303 	umull	r2, r3, r2, r3
 80072e0:	095b      	lsrs	r3, r3, #5
 80072e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072e6:	441c      	add	r4, r3
 80072e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072ec:	2200      	movs	r2, #0
 80072ee:	673b      	str	r3, [r7, #112]	; 0x70
 80072f0:	677a      	str	r2, [r7, #116]	; 0x74
 80072f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80072f6:	4642      	mov	r2, r8
 80072f8:	464b      	mov	r3, r9
 80072fa:	1891      	adds	r1, r2, r2
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	415b      	adcs	r3, r3
 8007300:	60fb      	str	r3, [r7, #12]
 8007302:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007306:	4641      	mov	r1, r8
 8007308:	1851      	adds	r1, r2, r1
 800730a:	6039      	str	r1, [r7, #0]
 800730c:	4649      	mov	r1, r9
 800730e:	414b      	adcs	r3, r1
 8007310:	607b      	str	r3, [r7, #4]
 8007312:	f04f 0200 	mov.w	r2, #0
 8007316:	f04f 0300 	mov.w	r3, #0
 800731a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800731e:	4659      	mov	r1, fp
 8007320:	00cb      	lsls	r3, r1, #3
 8007322:	4651      	mov	r1, sl
 8007324:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007328:	4651      	mov	r1, sl
 800732a:	00ca      	lsls	r2, r1, #3
 800732c:	4610      	mov	r0, r2
 800732e:	4619      	mov	r1, r3
 8007330:	4603      	mov	r3, r0
 8007332:	4642      	mov	r2, r8
 8007334:	189b      	adds	r3, r3, r2
 8007336:	66bb      	str	r3, [r7, #104]	; 0x68
 8007338:	464b      	mov	r3, r9
 800733a:	460a      	mov	r2, r1
 800733c:	eb42 0303 	adc.w	r3, r2, r3
 8007340:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	663b      	str	r3, [r7, #96]	; 0x60
 800734c:	667a      	str	r2, [r7, #100]	; 0x64
 800734e:	f04f 0200 	mov.w	r2, #0
 8007352:	f04f 0300 	mov.w	r3, #0
 8007356:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800735a:	4649      	mov	r1, r9
 800735c:	008b      	lsls	r3, r1, #2
 800735e:	4641      	mov	r1, r8
 8007360:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007364:	4641      	mov	r1, r8
 8007366:	008a      	lsls	r2, r1, #2
 8007368:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800736c:	f7f8 ffa0 	bl	80002b0 <__aeabi_uldivmod>
 8007370:	4602      	mov	r2, r0
 8007372:	460b      	mov	r3, r1
 8007374:	4b0d      	ldr	r3, [pc, #52]	; (80073ac <UART_SetConfig+0x4e4>)
 8007376:	fba3 1302 	umull	r1, r3, r3, r2
 800737a:	095b      	lsrs	r3, r3, #5
 800737c:	2164      	movs	r1, #100	; 0x64
 800737e:	fb01 f303 	mul.w	r3, r1, r3
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	011b      	lsls	r3, r3, #4
 8007386:	3332      	adds	r3, #50	; 0x32
 8007388:	4a08      	ldr	r2, [pc, #32]	; (80073ac <UART_SetConfig+0x4e4>)
 800738a:	fba2 2303 	umull	r2, r3, r2, r3
 800738e:	095b      	lsrs	r3, r3, #5
 8007390:	f003 020f 	and.w	r2, r3, #15
 8007394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4422      	add	r2, r4
 800739c:	609a      	str	r2, [r3, #8]
}
 800739e:	bf00      	nop
 80073a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80073a4:	46bd      	mov	sp, r7
 80073a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073aa:	bf00      	nop
 80073ac:	51eb851f 	.word	0x51eb851f

080073b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	4603      	mov	r3, r0
 80073b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80073ba:	2300      	movs	r3, #0
 80073bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80073be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073c2:	2b84      	cmp	r3, #132	; 0x84
 80073c4:	d005      	beq.n	80073d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80073c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	4413      	add	r3, r2
 80073ce:	3303      	adds	r3, #3
 80073d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80073d2:	68fb      	ldr	r3, [r7, #12]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80073e4:	f000 faf6 	bl	80079d4 <vTaskStartScheduler>
  
  return osOK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	bd80      	pop	{r7, pc}

080073ee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80073ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073f0:	b089      	sub	sp, #36	; 0x24
 80073f2:	af04      	add	r7, sp, #16
 80073f4:	6078      	str	r0, [r7, #4]
 80073f6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	695b      	ldr	r3, [r3, #20]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d020      	beq.n	8007442 <osThreadCreate+0x54>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d01c      	beq.n	8007442 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685c      	ldr	r4, [r3, #4]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681d      	ldr	r5, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	691e      	ldr	r6, [r3, #16]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800741a:	4618      	mov	r0, r3
 800741c:	f7ff ffc8 	bl	80073b0 <makeFreeRtosPriority>
 8007420:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800742a:	9202      	str	r2, [sp, #8]
 800742c:	9301      	str	r3, [sp, #4]
 800742e:	9100      	str	r1, [sp, #0]
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	4632      	mov	r2, r6
 8007434:	4629      	mov	r1, r5
 8007436:	4620      	mov	r0, r4
 8007438:	f000 f8ed 	bl	8007616 <xTaskCreateStatic>
 800743c:	4603      	mov	r3, r0
 800743e:	60fb      	str	r3, [r7, #12]
 8007440:	e01c      	b.n	800747c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685c      	ldr	r4, [r3, #4]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800744e:	b29e      	uxth	r6, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007456:	4618      	mov	r0, r3
 8007458:	f7ff ffaa 	bl	80073b0 <makeFreeRtosPriority>
 800745c:	4602      	mov	r2, r0
 800745e:	f107 030c 	add.w	r3, r7, #12
 8007462:	9301      	str	r3, [sp, #4]
 8007464:	9200      	str	r2, [sp, #0]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	4632      	mov	r2, r6
 800746a:	4629      	mov	r1, r5
 800746c:	4620      	mov	r0, r4
 800746e:	f000 f92f 	bl	80076d0 <xTaskCreate>
 8007472:	4603      	mov	r3, r0
 8007474:	2b01      	cmp	r3, #1
 8007476:	d001      	beq.n	800747c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007478:	2300      	movs	r3, #0
 800747a:	e000      	b.n	800747e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800747c:	68fb      	ldr	r3, [r7, #12]
}
 800747e:	4618      	mov	r0, r3
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007486 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b084      	sub	sp, #16
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d001      	beq.n	800749c <osDelay+0x16>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	e000      	b.n	800749e <osDelay+0x18>
 800749c:	2301      	movs	r3, #1
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 fa64 	bl	800796c <vTaskDelay>
  
  return osOK;
 80074a4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80074ae:	b480      	push	{r7}
 80074b0:	b083      	sub	sp, #12
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f103 0208 	add.w	r2, r3, #8
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f04f 32ff 	mov.w	r2, #4294967295
 80074c6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f103 0208 	add.w	r2, r3, #8
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f103 0208 	add.w	r2, r3, #8
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80074e2:	bf00      	nop
 80074e4:	370c      	adds	r7, #12
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80074ee:	b480      	push	{r7}
 80074f0:	b083      	sub	sp, #12
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80074fc:	bf00      	nop
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	689a      	ldr	r2, [r3, #8]
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	683a      	ldr	r2, [r7, #0]
 800752c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	683a      	ldr	r2, [r7, #0]
 8007532:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	1c5a      	adds	r2, r3, #1
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	601a      	str	r2, [r3, #0]
}
 8007544:	bf00      	nop
 8007546:	3714      	adds	r7, #20
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007566:	d103      	bne.n	8007570 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	60fb      	str	r3, [r7, #12]
 800756e:	e00c      	b.n	800758a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	3308      	adds	r3, #8
 8007574:	60fb      	str	r3, [r7, #12]
 8007576:	e002      	b.n	800757e <vListInsert+0x2e>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	60fb      	str	r3, [r7, #12]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	429a      	cmp	r2, r3
 8007588:	d2f6      	bcs.n	8007578 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	685a      	ldr	r2, [r3, #4]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	683a      	ldr	r2, [r7, #0]
 8007598:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	1c5a      	adds	r2, r3, #1
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	601a      	str	r2, [r3, #0]
}
 80075b6:	bf00      	nop
 80075b8:	3714      	adds	r7, #20
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80075c2:	b480      	push	{r7}
 80075c4:	b085      	sub	sp, #20
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	6892      	ldr	r2, [r2, #8]
 80075d8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	6852      	ldr	r2, [r2, #4]
 80075e2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d103      	bne.n	80075f6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	689a      	ldr	r2, [r3, #8]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	1e5a      	subs	r2, r3, #1
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007616:	b580      	push	{r7, lr}
 8007618:	b08e      	sub	sp, #56	; 0x38
 800761a:	af04      	add	r7, sp, #16
 800761c:	60f8      	str	r0, [r7, #12]
 800761e:	60b9      	str	r1, [r7, #8]
 8007620:	607a      	str	r2, [r7, #4]
 8007622:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10a      	bne.n	8007640 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800762a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762e:	f383 8811 	msr	BASEPRI, r3
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800763c:	bf00      	nop
 800763e:	e7fe      	b.n	800763e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007642:	2b00      	cmp	r3, #0
 8007644:	d10a      	bne.n	800765c <xTaskCreateStatic+0x46>
	__asm volatile
 8007646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764a:	f383 8811 	msr	BASEPRI, r3
 800764e:	f3bf 8f6f 	isb	sy
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	61fb      	str	r3, [r7, #28]
}
 8007658:	bf00      	nop
 800765a:	e7fe      	b.n	800765a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800765c:	23b4      	movs	r3, #180	; 0xb4
 800765e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	2bb4      	cmp	r3, #180	; 0xb4
 8007664:	d00a      	beq.n	800767c <xTaskCreateStatic+0x66>
	__asm volatile
 8007666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766a:	f383 8811 	msr	BASEPRI, r3
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	f3bf 8f4f 	dsb	sy
 8007676:	61bb      	str	r3, [r7, #24]
}
 8007678:	bf00      	nop
 800767a:	e7fe      	b.n	800767a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800767c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800767e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007680:	2b00      	cmp	r3, #0
 8007682:	d01e      	beq.n	80076c2 <xTaskCreateStatic+0xac>
 8007684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007686:	2b00      	cmp	r3, #0
 8007688:	d01b      	beq.n	80076c2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800768a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007690:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007692:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007696:	2202      	movs	r2, #2
 8007698:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800769c:	2300      	movs	r3, #0
 800769e:	9303      	str	r3, [sp, #12]
 80076a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a2:	9302      	str	r3, [sp, #8]
 80076a4:	f107 0314 	add.w	r3, r7, #20
 80076a8:	9301      	str	r3, [sp, #4]
 80076aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	68b9      	ldr	r1, [r7, #8]
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f000 f851 	bl	800775c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076bc:	f000 f8ec 	bl	8007898 <prvAddNewTaskToReadyList>
 80076c0:	e001      	b.n	80076c6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80076c6:	697b      	ldr	r3, [r7, #20]
	}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3728      	adds	r7, #40	; 0x28
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b08c      	sub	sp, #48	; 0x30
 80076d4:	af04      	add	r7, sp, #16
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	603b      	str	r3, [r7, #0]
 80076dc:	4613      	mov	r3, r2
 80076de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80076e0:	88fb      	ldrh	r3, [r7, #6]
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	4618      	mov	r0, r3
 80076e6:	f000 feef 	bl	80084c8 <pvPortMalloc>
 80076ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00e      	beq.n	8007710 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80076f2:	20b4      	movs	r0, #180	; 0xb4
 80076f4:	f000 fee8 	bl	80084c8 <pvPortMalloc>
 80076f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d003      	beq.n	8007708 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	631a      	str	r2, [r3, #48]	; 0x30
 8007706:	e005      	b.n	8007714 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007708:	6978      	ldr	r0, [r7, #20]
 800770a:	f000 ffa9 	bl	8008660 <vPortFree>
 800770e:	e001      	b.n	8007714 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007710:	2300      	movs	r3, #0
 8007712:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d017      	beq.n	800774a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007722:	88fa      	ldrh	r2, [r7, #6]
 8007724:	2300      	movs	r3, #0
 8007726:	9303      	str	r3, [sp, #12]
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	9302      	str	r3, [sp, #8]
 800772c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772e:	9301      	str	r3, [sp, #4]
 8007730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	68b9      	ldr	r1, [r7, #8]
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f000 f80f 	bl	800775c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800773e:	69f8      	ldr	r0, [r7, #28]
 8007740:	f000 f8aa 	bl	8007898 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007744:	2301      	movs	r3, #1
 8007746:	61bb      	str	r3, [r7, #24]
 8007748:	e002      	b.n	8007750 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800774a:	f04f 33ff 	mov.w	r3, #4294967295
 800774e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007750:	69bb      	ldr	r3, [r7, #24]
	}
 8007752:	4618      	mov	r0, r3
 8007754:	3720      	adds	r7, #32
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
	...

0800775c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b088      	sub	sp, #32
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
 8007768:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800776a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007774:	3b01      	subs	r3, #1
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	4413      	add	r3, r2
 800777a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	f023 0307 	bic.w	r3, r3, #7
 8007782:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	f003 0307 	and.w	r3, r3, #7
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00a      	beq.n	80077a4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800778e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	617b      	str	r3, [r7, #20]
}
 80077a0:	bf00      	nop
 80077a2:	e7fe      	b.n	80077a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d01f      	beq.n	80077ea <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077aa:	2300      	movs	r3, #0
 80077ac:	61fb      	str	r3, [r7, #28]
 80077ae:	e012      	b.n	80077d6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	4413      	add	r3, r2
 80077b6:	7819      	ldrb	r1, [r3, #0]
 80077b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	4413      	add	r3, r2
 80077be:	3334      	adds	r3, #52	; 0x34
 80077c0:	460a      	mov	r2, r1
 80077c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	4413      	add	r3, r2
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d006      	beq.n	80077de <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	3301      	adds	r3, #1
 80077d4:	61fb      	str	r3, [r7, #28]
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	2b0f      	cmp	r3, #15
 80077da:	d9e9      	bls.n	80077b0 <prvInitialiseNewTask+0x54>
 80077dc:	e000      	b.n	80077e0 <prvInitialiseNewTask+0x84>
			{
				break;
 80077de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80077e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077e8:	e003      	b.n	80077f2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80077ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80077f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f4:	2b06      	cmp	r3, #6
 80077f6:	d901      	bls.n	80077fc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80077f8:	2306      	movs	r3, #6
 80077fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80077fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007800:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007806:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780a:	2200      	movs	r2, #0
 800780c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800780e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007810:	3304      	adds	r3, #4
 8007812:	4618      	mov	r0, r3
 8007814:	f7ff fe6b 	bl	80074ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781a:	3318      	adds	r3, #24
 800781c:	4618      	mov	r0, r3
 800781e:	f7ff fe66 	bl	80074ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007826:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782a:	f1c3 0207 	rsb	r2, r3, #7
 800782e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007830:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007836:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783a:	2200      	movs	r2, #0
 800783c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007842:	2200      	movs	r2, #0
 8007844:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784a:	334c      	adds	r3, #76	; 0x4c
 800784c:	2260      	movs	r2, #96	; 0x60
 800784e:	2100      	movs	r1, #0
 8007850:	4618      	mov	r0, r3
 8007852:	f001 f85d 	bl	8008910 <memset>
 8007856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007858:	4a0c      	ldr	r2, [pc, #48]	; (800788c <prvInitialiseNewTask+0x130>)
 800785a:	651a      	str	r2, [r3, #80]	; 0x50
 800785c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785e:	4a0c      	ldr	r2, [pc, #48]	; (8007890 <prvInitialiseNewTask+0x134>)
 8007860:	655a      	str	r2, [r3, #84]	; 0x54
 8007862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007864:	4a0b      	ldr	r2, [pc, #44]	; (8007894 <prvInitialiseNewTask+0x138>)
 8007866:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	68f9      	ldr	r1, [r7, #12]
 800786c:	69b8      	ldr	r0, [r7, #24]
 800786e:	f000 fc1f 	bl	80080b0 <pxPortInitialiseStack>
 8007872:	4602      	mov	r2, r0
 8007874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007876:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787a:	2b00      	cmp	r3, #0
 800787c:	d002      	beq.n	8007884 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800787e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007882:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007884:	bf00      	nop
 8007886:	3720      	adds	r7, #32
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	0800ae5c 	.word	0x0800ae5c
 8007890:	0800ae7c 	.word	0x0800ae7c
 8007894:	0800ae3c 	.word	0x0800ae3c

08007898 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80078a0:	f000 fd30 	bl	8008304 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80078a4:	4b2a      	ldr	r3, [pc, #168]	; (8007950 <prvAddNewTaskToReadyList+0xb8>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3301      	adds	r3, #1
 80078aa:	4a29      	ldr	r2, [pc, #164]	; (8007950 <prvAddNewTaskToReadyList+0xb8>)
 80078ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80078ae:	4b29      	ldr	r3, [pc, #164]	; (8007954 <prvAddNewTaskToReadyList+0xbc>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d109      	bne.n	80078ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80078b6:	4a27      	ldr	r2, [pc, #156]	; (8007954 <prvAddNewTaskToReadyList+0xbc>)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80078bc:	4b24      	ldr	r3, [pc, #144]	; (8007950 <prvAddNewTaskToReadyList+0xb8>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d110      	bne.n	80078e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80078c4:	f000 facc 	bl	8007e60 <prvInitialiseTaskLists>
 80078c8:	e00d      	b.n	80078e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80078ca:	4b23      	ldr	r3, [pc, #140]	; (8007958 <prvAddNewTaskToReadyList+0xc0>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d109      	bne.n	80078e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80078d2:	4b20      	ldr	r3, [pc, #128]	; (8007954 <prvAddNewTaskToReadyList+0xbc>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078dc:	429a      	cmp	r2, r3
 80078de:	d802      	bhi.n	80078e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80078e0:	4a1c      	ldr	r2, [pc, #112]	; (8007954 <prvAddNewTaskToReadyList+0xbc>)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80078e6:	4b1d      	ldr	r3, [pc, #116]	; (800795c <prvAddNewTaskToReadyList+0xc4>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	3301      	adds	r3, #1
 80078ec:	4a1b      	ldr	r2, [pc, #108]	; (800795c <prvAddNewTaskToReadyList+0xc4>)
 80078ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f4:	2201      	movs	r2, #1
 80078f6:	409a      	lsls	r2, r3
 80078f8:	4b19      	ldr	r3, [pc, #100]	; (8007960 <prvAddNewTaskToReadyList+0xc8>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	4a18      	ldr	r2, [pc, #96]	; (8007960 <prvAddNewTaskToReadyList+0xc8>)
 8007900:	6013      	str	r3, [r2, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007906:	4613      	mov	r3, r2
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	4413      	add	r3, r2
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	4a15      	ldr	r2, [pc, #84]	; (8007964 <prvAddNewTaskToReadyList+0xcc>)
 8007910:	441a      	add	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	3304      	adds	r3, #4
 8007916:	4619      	mov	r1, r3
 8007918:	4610      	mov	r0, r2
 800791a:	f7ff fdf5 	bl	8007508 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800791e:	f000 fd21 	bl	8008364 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007922:	4b0d      	ldr	r3, [pc, #52]	; (8007958 <prvAddNewTaskToReadyList+0xc0>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d00e      	beq.n	8007948 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800792a:	4b0a      	ldr	r3, [pc, #40]	; (8007954 <prvAddNewTaskToReadyList+0xbc>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007934:	429a      	cmp	r2, r3
 8007936:	d207      	bcs.n	8007948 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007938:	4b0b      	ldr	r3, [pc, #44]	; (8007968 <prvAddNewTaskToReadyList+0xd0>)
 800793a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800793e:	601a      	str	r2, [r3, #0]
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007948:	bf00      	nop
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	200006c4 	.word	0x200006c4
 8007954:	200005c4 	.word	0x200005c4
 8007958:	200006d0 	.word	0x200006d0
 800795c:	200006e0 	.word	0x200006e0
 8007960:	200006cc 	.word	0x200006cc
 8007964:	200005c8 	.word	0x200005c8
 8007968:	e000ed04 	.word	0xe000ed04

0800796c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007974:	2300      	movs	r3, #0
 8007976:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d017      	beq.n	80079ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800797e:	4b13      	ldr	r3, [pc, #76]	; (80079cc <vTaskDelay+0x60>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00a      	beq.n	800799c <vTaskDelay+0x30>
	__asm volatile
 8007986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798a:	f383 8811 	msr	BASEPRI, r3
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	60bb      	str	r3, [r7, #8]
}
 8007998:	bf00      	nop
 800799a:	e7fe      	b.n	800799a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800799c:	f000 f884 	bl	8007aa8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80079a0:	2100      	movs	r1, #0
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fb1e 	bl	8007fe4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80079a8:	f000 f88c 	bl	8007ac4 <xTaskResumeAll>
 80079ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d107      	bne.n	80079c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80079b4:	4b06      	ldr	r3, [pc, #24]	; (80079d0 <vTaskDelay+0x64>)
 80079b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ba:	601a      	str	r2, [r3, #0]
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80079c4:	bf00      	nop
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	200006ec 	.word	0x200006ec
 80079d0:	e000ed04 	.word	0xe000ed04

080079d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b08a      	sub	sp, #40	; 0x28
 80079d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80079da:	2300      	movs	r3, #0
 80079dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80079de:	2300      	movs	r3, #0
 80079e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80079e2:	463a      	mov	r2, r7
 80079e4:	1d39      	adds	r1, r7, #4
 80079e6:	f107 0308 	add.w	r3, r7, #8
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fa fb8a 	bl	8002104 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	9202      	str	r2, [sp, #8]
 80079f8:	9301      	str	r3, [sp, #4]
 80079fa:	2300      	movs	r3, #0
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	2300      	movs	r3, #0
 8007a00:	460a      	mov	r2, r1
 8007a02:	4921      	ldr	r1, [pc, #132]	; (8007a88 <vTaskStartScheduler+0xb4>)
 8007a04:	4821      	ldr	r0, [pc, #132]	; (8007a8c <vTaskStartScheduler+0xb8>)
 8007a06:	f7ff fe06 	bl	8007616 <xTaskCreateStatic>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	4a20      	ldr	r2, [pc, #128]	; (8007a90 <vTaskStartScheduler+0xbc>)
 8007a0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a10:	4b1f      	ldr	r3, [pc, #124]	; (8007a90 <vTaskStartScheduler+0xbc>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d002      	beq.n	8007a1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	617b      	str	r3, [r7, #20]
 8007a1c:	e001      	b.n	8007a22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d11b      	bne.n	8007a60 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2c:	f383 8811 	msr	BASEPRI, r3
 8007a30:	f3bf 8f6f 	isb	sy
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	613b      	str	r3, [r7, #16]
}
 8007a3a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a3c:	4b15      	ldr	r3, [pc, #84]	; (8007a94 <vTaskStartScheduler+0xc0>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	334c      	adds	r3, #76	; 0x4c
 8007a42:	4a15      	ldr	r2, [pc, #84]	; (8007a98 <vTaskStartScheduler+0xc4>)
 8007a44:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a46:	4b15      	ldr	r3, [pc, #84]	; (8007a9c <vTaskStartScheduler+0xc8>)
 8007a48:	f04f 32ff 	mov.w	r2, #4294967295
 8007a4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a4e:	4b14      	ldr	r3, [pc, #80]	; (8007aa0 <vTaskStartScheduler+0xcc>)
 8007a50:	2201      	movs	r2, #1
 8007a52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a54:	4b13      	ldr	r3, [pc, #76]	; (8007aa4 <vTaskStartScheduler+0xd0>)
 8007a56:	2200      	movs	r2, #0
 8007a58:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a5a:	f000 fbb1 	bl	80081c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007a5e:	e00e      	b.n	8007a7e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a66:	d10a      	bne.n	8007a7e <vTaskStartScheduler+0xaa>
	__asm volatile
 8007a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6c:	f383 8811 	msr	BASEPRI, r3
 8007a70:	f3bf 8f6f 	isb	sy
 8007a74:	f3bf 8f4f 	dsb	sy
 8007a78:	60fb      	str	r3, [r7, #12]
}
 8007a7a:	bf00      	nop
 8007a7c:	e7fe      	b.n	8007a7c <vTaskStartScheduler+0xa8>
}
 8007a7e:	bf00      	nop
 8007a80:	3718      	adds	r7, #24
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	0800936c 	.word	0x0800936c
 8007a8c:	08007e31 	.word	0x08007e31
 8007a90:	200006e8 	.word	0x200006e8
 8007a94:	200005c4 	.word	0x200005c4
 8007a98:	20000014 	.word	0x20000014
 8007a9c:	200006e4 	.word	0x200006e4
 8007aa0:	200006d0 	.word	0x200006d0
 8007aa4:	200006c8 	.word	0x200006c8

08007aa8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007aac:	4b04      	ldr	r3, [pc, #16]	; (8007ac0 <vTaskSuspendAll+0x18>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	4a03      	ldr	r2, [pc, #12]	; (8007ac0 <vTaskSuspendAll+0x18>)
 8007ab4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007ab6:	bf00      	nop
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr
 8007ac0:	200006ec 	.word	0x200006ec

08007ac4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007aca:	2300      	movs	r3, #0
 8007acc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007ad2:	4b41      	ldr	r3, [pc, #260]	; (8007bd8 <xTaskResumeAll+0x114>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10a      	bne.n	8007af0 <xTaskResumeAll+0x2c>
	__asm volatile
 8007ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ade:	f383 8811 	msr	BASEPRI, r3
 8007ae2:	f3bf 8f6f 	isb	sy
 8007ae6:	f3bf 8f4f 	dsb	sy
 8007aea:	603b      	str	r3, [r7, #0]
}
 8007aec:	bf00      	nop
 8007aee:	e7fe      	b.n	8007aee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007af0:	f000 fc08 	bl	8008304 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007af4:	4b38      	ldr	r3, [pc, #224]	; (8007bd8 <xTaskResumeAll+0x114>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	3b01      	subs	r3, #1
 8007afa:	4a37      	ldr	r2, [pc, #220]	; (8007bd8 <xTaskResumeAll+0x114>)
 8007afc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007afe:	4b36      	ldr	r3, [pc, #216]	; (8007bd8 <xTaskResumeAll+0x114>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d161      	bne.n	8007bca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b06:	4b35      	ldr	r3, [pc, #212]	; (8007bdc <xTaskResumeAll+0x118>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d05d      	beq.n	8007bca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b0e:	e02e      	b.n	8007b6e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b10:	4b33      	ldr	r3, [pc, #204]	; (8007be0 <xTaskResumeAll+0x11c>)
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	3318      	adds	r3, #24
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7ff fd50 	bl	80075c2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	3304      	adds	r3, #4
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7ff fd4b 	bl	80075c2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b30:	2201      	movs	r2, #1
 8007b32:	409a      	lsls	r2, r3
 8007b34:	4b2b      	ldr	r3, [pc, #172]	; (8007be4 <xTaskResumeAll+0x120>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	4a2a      	ldr	r2, [pc, #168]	; (8007be4 <xTaskResumeAll+0x120>)
 8007b3c:	6013      	str	r3, [r2, #0]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b42:	4613      	mov	r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4413      	add	r3, r2
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	4a27      	ldr	r2, [pc, #156]	; (8007be8 <xTaskResumeAll+0x124>)
 8007b4c:	441a      	add	r2, r3
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	3304      	adds	r3, #4
 8007b52:	4619      	mov	r1, r3
 8007b54:	4610      	mov	r0, r2
 8007b56:	f7ff fcd7 	bl	8007508 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b5e:	4b23      	ldr	r3, [pc, #140]	; (8007bec <xTaskResumeAll+0x128>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d302      	bcc.n	8007b6e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007b68:	4b21      	ldr	r3, [pc, #132]	; (8007bf0 <xTaskResumeAll+0x12c>)
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b6e:	4b1c      	ldr	r3, [pc, #112]	; (8007be0 <xTaskResumeAll+0x11c>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1cc      	bne.n	8007b10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d001      	beq.n	8007b80 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007b7c:	f000 fa12 	bl	8007fa4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007b80:	4b1c      	ldr	r3, [pc, #112]	; (8007bf4 <xTaskResumeAll+0x130>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d010      	beq.n	8007bae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007b8c:	f000 f836 	bl	8007bfc <xTaskIncrementTick>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d002      	beq.n	8007b9c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007b96:	4b16      	ldr	r3, [pc, #88]	; (8007bf0 <xTaskResumeAll+0x12c>)
 8007b98:	2201      	movs	r2, #1
 8007b9a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d1f1      	bne.n	8007b8c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007ba8:	4b12      	ldr	r3, [pc, #72]	; (8007bf4 <xTaskResumeAll+0x130>)
 8007baa:	2200      	movs	r2, #0
 8007bac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007bae:	4b10      	ldr	r3, [pc, #64]	; (8007bf0 <xTaskResumeAll+0x12c>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d009      	beq.n	8007bca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007bba:	4b0f      	ldr	r3, [pc, #60]	; (8007bf8 <xTaskResumeAll+0x134>)
 8007bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bc0:	601a      	str	r2, [r3, #0]
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007bca:	f000 fbcb 	bl	8008364 <vPortExitCritical>

	return xAlreadyYielded;
 8007bce:	68bb      	ldr	r3, [r7, #8]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	200006ec 	.word	0x200006ec
 8007bdc:	200006c4 	.word	0x200006c4
 8007be0:	20000684 	.word	0x20000684
 8007be4:	200006cc 	.word	0x200006cc
 8007be8:	200005c8 	.word	0x200005c8
 8007bec:	200005c4 	.word	0x200005c4
 8007bf0:	200006d8 	.word	0x200006d8
 8007bf4:	200006d4 	.word	0x200006d4
 8007bf8:	e000ed04 	.word	0xe000ed04

08007bfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b086      	sub	sp, #24
 8007c00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c02:	2300      	movs	r3, #0
 8007c04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c06:	4b4e      	ldr	r3, [pc, #312]	; (8007d40 <xTaskIncrementTick+0x144>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f040 808e 	bne.w	8007d2c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c10:	4b4c      	ldr	r3, [pc, #304]	; (8007d44 <xTaskIncrementTick+0x148>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	3301      	adds	r3, #1
 8007c16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c18:	4a4a      	ldr	r2, [pc, #296]	; (8007d44 <xTaskIncrementTick+0x148>)
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d120      	bne.n	8007c66 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c24:	4b48      	ldr	r3, [pc, #288]	; (8007d48 <xTaskIncrementTick+0x14c>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00a      	beq.n	8007c44 <xTaskIncrementTick+0x48>
	__asm volatile
 8007c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	603b      	str	r3, [r7, #0]
}
 8007c40:	bf00      	nop
 8007c42:	e7fe      	b.n	8007c42 <xTaskIncrementTick+0x46>
 8007c44:	4b40      	ldr	r3, [pc, #256]	; (8007d48 <xTaskIncrementTick+0x14c>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	60fb      	str	r3, [r7, #12]
 8007c4a:	4b40      	ldr	r3, [pc, #256]	; (8007d4c <xTaskIncrementTick+0x150>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a3e      	ldr	r2, [pc, #248]	; (8007d48 <xTaskIncrementTick+0x14c>)
 8007c50:	6013      	str	r3, [r2, #0]
 8007c52:	4a3e      	ldr	r2, [pc, #248]	; (8007d4c <xTaskIncrementTick+0x150>)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6013      	str	r3, [r2, #0]
 8007c58:	4b3d      	ldr	r3, [pc, #244]	; (8007d50 <xTaskIncrementTick+0x154>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	4a3c      	ldr	r2, [pc, #240]	; (8007d50 <xTaskIncrementTick+0x154>)
 8007c60:	6013      	str	r3, [r2, #0]
 8007c62:	f000 f99f 	bl	8007fa4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007c66:	4b3b      	ldr	r3, [pc, #236]	; (8007d54 <xTaskIncrementTick+0x158>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	693a      	ldr	r2, [r7, #16]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d348      	bcc.n	8007d02 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c70:	4b35      	ldr	r3, [pc, #212]	; (8007d48 <xTaskIncrementTick+0x14c>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d104      	bne.n	8007c84 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c7a:	4b36      	ldr	r3, [pc, #216]	; (8007d54 <xTaskIncrementTick+0x158>)
 8007c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c80:	601a      	str	r2, [r3, #0]
					break;
 8007c82:	e03e      	b.n	8007d02 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c84:	4b30      	ldr	r3, [pc, #192]	; (8007d48 <xTaskIncrementTick+0x14c>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d203      	bcs.n	8007ca4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007c9c:	4a2d      	ldr	r2, [pc, #180]	; (8007d54 <xTaskIncrementTick+0x158>)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ca2:	e02e      	b.n	8007d02 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	3304      	adds	r3, #4
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7ff fc8a 	bl	80075c2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d004      	beq.n	8007cc0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	3318      	adds	r3, #24
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7ff fc81 	bl	80075c2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	409a      	lsls	r2, r3
 8007cc8:	4b23      	ldr	r3, [pc, #140]	; (8007d58 <xTaskIncrementTick+0x15c>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	4a22      	ldr	r2, [pc, #136]	; (8007d58 <xTaskIncrementTick+0x15c>)
 8007cd0:	6013      	str	r3, [r2, #0]
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4413      	add	r3, r2
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	4a1f      	ldr	r2, [pc, #124]	; (8007d5c <xTaskIncrementTick+0x160>)
 8007ce0:	441a      	add	r2, r3
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	3304      	adds	r3, #4
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	4610      	mov	r0, r2
 8007cea:	f7ff fc0d 	bl	8007508 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf2:	4b1b      	ldr	r3, [pc, #108]	; (8007d60 <xTaskIncrementTick+0x164>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d3b9      	bcc.n	8007c70 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d00:	e7b6      	b.n	8007c70 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d02:	4b17      	ldr	r3, [pc, #92]	; (8007d60 <xTaskIncrementTick+0x164>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d08:	4914      	ldr	r1, [pc, #80]	; (8007d5c <xTaskIncrementTick+0x160>)
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	4413      	add	r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	440b      	add	r3, r1
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d901      	bls.n	8007d1e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007d1e:	4b11      	ldr	r3, [pc, #68]	; (8007d64 <xTaskIncrementTick+0x168>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d007      	beq.n	8007d36 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007d26:	2301      	movs	r3, #1
 8007d28:	617b      	str	r3, [r7, #20]
 8007d2a:	e004      	b.n	8007d36 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007d2c:	4b0e      	ldr	r3, [pc, #56]	; (8007d68 <xTaskIncrementTick+0x16c>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	3301      	adds	r3, #1
 8007d32:	4a0d      	ldr	r2, [pc, #52]	; (8007d68 <xTaskIncrementTick+0x16c>)
 8007d34:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007d36:	697b      	ldr	r3, [r7, #20]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3718      	adds	r7, #24
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	200006ec 	.word	0x200006ec
 8007d44:	200006c8 	.word	0x200006c8
 8007d48:	2000067c 	.word	0x2000067c
 8007d4c:	20000680 	.word	0x20000680
 8007d50:	200006dc 	.word	0x200006dc
 8007d54:	200006e4 	.word	0x200006e4
 8007d58:	200006cc 	.word	0x200006cc
 8007d5c:	200005c8 	.word	0x200005c8
 8007d60:	200005c4 	.word	0x200005c4
 8007d64:	200006d8 	.word	0x200006d8
 8007d68:	200006d4 	.word	0x200006d4

08007d6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b087      	sub	sp, #28
 8007d70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d72:	4b29      	ldr	r3, [pc, #164]	; (8007e18 <vTaskSwitchContext+0xac>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d003      	beq.n	8007d82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007d7a:	4b28      	ldr	r3, [pc, #160]	; (8007e1c <vTaskSwitchContext+0xb0>)
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007d80:	e044      	b.n	8007e0c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007d82:	4b26      	ldr	r3, [pc, #152]	; (8007e1c <vTaskSwitchContext+0xb0>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d88:	4b25      	ldr	r3, [pc, #148]	; (8007e20 <vTaskSwitchContext+0xb4>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	fab3 f383 	clz	r3, r3
 8007d94:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007d96:	7afb      	ldrb	r3, [r7, #11]
 8007d98:	f1c3 031f 	rsb	r3, r3, #31
 8007d9c:	617b      	str	r3, [r7, #20]
 8007d9e:	4921      	ldr	r1, [pc, #132]	; (8007e24 <vTaskSwitchContext+0xb8>)
 8007da0:	697a      	ldr	r2, [r7, #20]
 8007da2:	4613      	mov	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4413      	add	r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	440b      	add	r3, r1
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d10a      	bne.n	8007dc8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db6:	f383 8811 	msr	BASEPRI, r3
 8007dba:	f3bf 8f6f 	isb	sy
 8007dbe:	f3bf 8f4f 	dsb	sy
 8007dc2:	607b      	str	r3, [r7, #4]
}
 8007dc4:	bf00      	nop
 8007dc6:	e7fe      	b.n	8007dc6 <vTaskSwitchContext+0x5a>
 8007dc8:	697a      	ldr	r2, [r7, #20]
 8007dca:	4613      	mov	r3, r2
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	4413      	add	r3, r2
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4a14      	ldr	r2, [pc, #80]	; (8007e24 <vTaskSwitchContext+0xb8>)
 8007dd4:	4413      	add	r3, r2
 8007dd6:	613b      	str	r3, [r7, #16]
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	685a      	ldr	r2, [r3, #4]
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	605a      	str	r2, [r3, #4]
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	685a      	ldr	r2, [r3, #4]
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	3308      	adds	r3, #8
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d104      	bne.n	8007df8 <vTaskSwitchContext+0x8c>
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	685a      	ldr	r2, [r3, #4]
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	605a      	str	r2, [r3, #4]
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	4a0a      	ldr	r2, [pc, #40]	; (8007e28 <vTaskSwitchContext+0xbc>)
 8007e00:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007e02:	4b09      	ldr	r3, [pc, #36]	; (8007e28 <vTaskSwitchContext+0xbc>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	334c      	adds	r3, #76	; 0x4c
 8007e08:	4a08      	ldr	r2, [pc, #32]	; (8007e2c <vTaskSwitchContext+0xc0>)
 8007e0a:	6013      	str	r3, [r2, #0]
}
 8007e0c:	bf00      	nop
 8007e0e:	371c      	adds	r7, #28
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr
 8007e18:	200006ec 	.word	0x200006ec
 8007e1c:	200006d8 	.word	0x200006d8
 8007e20:	200006cc 	.word	0x200006cc
 8007e24:	200005c8 	.word	0x200005c8
 8007e28:	200005c4 	.word	0x200005c4
 8007e2c:	20000014 	.word	0x20000014

08007e30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e38:	f000 f852 	bl	8007ee0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e3c:	4b06      	ldr	r3, [pc, #24]	; (8007e58 <prvIdleTask+0x28>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d9f9      	bls.n	8007e38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e44:	4b05      	ldr	r3, [pc, #20]	; (8007e5c <prvIdleTask+0x2c>)
 8007e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e4a:	601a      	str	r2, [r3, #0]
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e54:	e7f0      	b.n	8007e38 <prvIdleTask+0x8>
 8007e56:	bf00      	nop
 8007e58:	200005c8 	.word	0x200005c8
 8007e5c:	e000ed04 	.word	0xe000ed04

08007e60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e66:	2300      	movs	r3, #0
 8007e68:	607b      	str	r3, [r7, #4]
 8007e6a:	e00c      	b.n	8007e86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	4413      	add	r3, r2
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	4a12      	ldr	r2, [pc, #72]	; (8007ec0 <prvInitialiseTaskLists+0x60>)
 8007e78:	4413      	add	r3, r2
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7ff fb17 	bl	80074ae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	3301      	adds	r3, #1
 8007e84:	607b      	str	r3, [r7, #4]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2b06      	cmp	r3, #6
 8007e8a:	d9ef      	bls.n	8007e6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e8c:	480d      	ldr	r0, [pc, #52]	; (8007ec4 <prvInitialiseTaskLists+0x64>)
 8007e8e:	f7ff fb0e 	bl	80074ae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e92:	480d      	ldr	r0, [pc, #52]	; (8007ec8 <prvInitialiseTaskLists+0x68>)
 8007e94:	f7ff fb0b 	bl	80074ae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e98:	480c      	ldr	r0, [pc, #48]	; (8007ecc <prvInitialiseTaskLists+0x6c>)
 8007e9a:	f7ff fb08 	bl	80074ae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e9e:	480c      	ldr	r0, [pc, #48]	; (8007ed0 <prvInitialiseTaskLists+0x70>)
 8007ea0:	f7ff fb05 	bl	80074ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ea4:	480b      	ldr	r0, [pc, #44]	; (8007ed4 <prvInitialiseTaskLists+0x74>)
 8007ea6:	f7ff fb02 	bl	80074ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007eaa:	4b0b      	ldr	r3, [pc, #44]	; (8007ed8 <prvInitialiseTaskLists+0x78>)
 8007eac:	4a05      	ldr	r2, [pc, #20]	; (8007ec4 <prvInitialiseTaskLists+0x64>)
 8007eae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007eb0:	4b0a      	ldr	r3, [pc, #40]	; (8007edc <prvInitialiseTaskLists+0x7c>)
 8007eb2:	4a05      	ldr	r2, [pc, #20]	; (8007ec8 <prvInitialiseTaskLists+0x68>)
 8007eb4:	601a      	str	r2, [r3, #0]
}
 8007eb6:	bf00      	nop
 8007eb8:	3708      	adds	r7, #8
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	200005c8 	.word	0x200005c8
 8007ec4:	20000654 	.word	0x20000654
 8007ec8:	20000668 	.word	0x20000668
 8007ecc:	20000684 	.word	0x20000684
 8007ed0:	20000698 	.word	0x20000698
 8007ed4:	200006b0 	.word	0x200006b0
 8007ed8:	2000067c 	.word	0x2000067c
 8007edc:	20000680 	.word	0x20000680

08007ee0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ee6:	e019      	b.n	8007f1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ee8:	f000 fa0c 	bl	8008304 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eec:	4b10      	ldr	r3, [pc, #64]	; (8007f30 <prvCheckTasksWaitingTermination+0x50>)
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	3304      	adds	r3, #4
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7ff fb62 	bl	80075c2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007efe:	4b0d      	ldr	r3, [pc, #52]	; (8007f34 <prvCheckTasksWaitingTermination+0x54>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	3b01      	subs	r3, #1
 8007f04:	4a0b      	ldr	r2, [pc, #44]	; (8007f34 <prvCheckTasksWaitingTermination+0x54>)
 8007f06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f08:	4b0b      	ldr	r3, [pc, #44]	; (8007f38 <prvCheckTasksWaitingTermination+0x58>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	4a0a      	ldr	r2, [pc, #40]	; (8007f38 <prvCheckTasksWaitingTermination+0x58>)
 8007f10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f12:	f000 fa27 	bl	8008364 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f810 	bl	8007f3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f1c:	4b06      	ldr	r3, [pc, #24]	; (8007f38 <prvCheckTasksWaitingTermination+0x58>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1e1      	bne.n	8007ee8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f24:	bf00      	nop
 8007f26:	bf00      	nop
 8007f28:	3708      	adds	r7, #8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	20000698 	.word	0x20000698
 8007f34:	200006c4 	.word	0x200006c4
 8007f38:	200006ac 	.word	0x200006ac

08007f3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	334c      	adds	r3, #76	; 0x4c
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f000 fd8b 	bl	8008a64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d108      	bne.n	8007f6a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f000 fb7f 	bl	8008660 <vPortFree>
				vPortFree( pxTCB );
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fb7c 	bl	8008660 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f68:	e018      	b.n	8007f9c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d103      	bne.n	8007f7c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 fb73 	bl	8008660 <vPortFree>
	}
 8007f7a:	e00f      	b.n	8007f9c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d00a      	beq.n	8007f9c <prvDeleteTCB+0x60>
	__asm volatile
 8007f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8a:	f383 8811 	msr	BASEPRI, r3
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f3bf 8f4f 	dsb	sy
 8007f96:	60fb      	str	r3, [r7, #12]
}
 8007f98:	bf00      	nop
 8007f9a:	e7fe      	b.n	8007f9a <prvDeleteTCB+0x5e>
	}
 8007f9c:	bf00      	nop
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007faa:	4b0c      	ldr	r3, [pc, #48]	; (8007fdc <prvResetNextTaskUnblockTime+0x38>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d104      	bne.n	8007fbe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007fb4:	4b0a      	ldr	r3, [pc, #40]	; (8007fe0 <prvResetNextTaskUnblockTime+0x3c>)
 8007fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8007fba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007fbc:	e008      	b.n	8007fd0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fbe:	4b07      	ldr	r3, [pc, #28]	; (8007fdc <prvResetNextTaskUnblockTime+0x38>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	4a04      	ldr	r2, [pc, #16]	; (8007fe0 <prvResetNextTaskUnblockTime+0x3c>)
 8007fce:	6013      	str	r3, [r2, #0]
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	2000067c 	.word	0x2000067c
 8007fe0:	200006e4 	.word	0x200006e4

08007fe4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007fee:	4b29      	ldr	r3, [pc, #164]	; (8008094 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ff4:	4b28      	ldr	r3, [pc, #160]	; (8008098 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	3304      	adds	r3, #4
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7ff fae1 	bl	80075c2 <uxListRemove>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d10b      	bne.n	800801e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008006:	4b24      	ldr	r3, [pc, #144]	; (8008098 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800c:	2201      	movs	r2, #1
 800800e:	fa02 f303 	lsl.w	r3, r2, r3
 8008012:	43da      	mvns	r2, r3
 8008014:	4b21      	ldr	r3, [pc, #132]	; (800809c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4013      	ands	r3, r2
 800801a:	4a20      	ldr	r2, [pc, #128]	; (800809c <prvAddCurrentTaskToDelayedList+0xb8>)
 800801c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008024:	d10a      	bne.n	800803c <prvAddCurrentTaskToDelayedList+0x58>
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d007      	beq.n	800803c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800802c:	4b1a      	ldr	r3, [pc, #104]	; (8008098 <prvAddCurrentTaskToDelayedList+0xb4>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	3304      	adds	r3, #4
 8008032:	4619      	mov	r1, r3
 8008034:	481a      	ldr	r0, [pc, #104]	; (80080a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008036:	f7ff fa67 	bl	8007508 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800803a:	e026      	b.n	800808a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4413      	add	r3, r2
 8008042:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008044:	4b14      	ldr	r3, [pc, #80]	; (8008098 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800804c:	68ba      	ldr	r2, [r7, #8]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	429a      	cmp	r2, r3
 8008052:	d209      	bcs.n	8008068 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008054:	4b13      	ldr	r3, [pc, #76]	; (80080a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	4b0f      	ldr	r3, [pc, #60]	; (8008098 <prvAddCurrentTaskToDelayedList+0xb4>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	3304      	adds	r3, #4
 800805e:	4619      	mov	r1, r3
 8008060:	4610      	mov	r0, r2
 8008062:	f7ff fa75 	bl	8007550 <vListInsert>
}
 8008066:	e010      	b.n	800808a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008068:	4b0f      	ldr	r3, [pc, #60]	; (80080a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	4b0a      	ldr	r3, [pc, #40]	; (8008098 <prvAddCurrentTaskToDelayedList+0xb4>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	3304      	adds	r3, #4
 8008072:	4619      	mov	r1, r3
 8008074:	4610      	mov	r0, r2
 8008076:	f7ff fa6b 	bl	8007550 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800807a:	4b0c      	ldr	r3, [pc, #48]	; (80080ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	429a      	cmp	r2, r3
 8008082:	d202      	bcs.n	800808a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008084:	4a09      	ldr	r2, [pc, #36]	; (80080ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	6013      	str	r3, [r2, #0]
}
 800808a:	bf00      	nop
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	200006c8 	.word	0x200006c8
 8008098:	200005c4 	.word	0x200005c4
 800809c:	200006cc 	.word	0x200006cc
 80080a0:	200006b0 	.word	0x200006b0
 80080a4:	20000680 	.word	0x20000680
 80080a8:	2000067c 	.word	0x2000067c
 80080ac:	200006e4 	.word	0x200006e4

080080b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	3b04      	subs	r3, #4
 80080c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80080c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	3b04      	subs	r3, #4
 80080ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	f023 0201 	bic.w	r2, r3, #1
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	3b04      	subs	r3, #4
 80080de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80080e0:	4a0c      	ldr	r2, [pc, #48]	; (8008114 <pxPortInitialiseStack+0x64>)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	3b14      	subs	r3, #20
 80080ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	3b04      	subs	r3, #4
 80080f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f06f 0202 	mvn.w	r2, #2
 80080fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	3b20      	subs	r3, #32
 8008104:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008106:	68fb      	ldr	r3, [r7, #12]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3714      	adds	r7, #20
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr
 8008114:	08008119 	.word	0x08008119

08008118 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800811e:	2300      	movs	r3, #0
 8008120:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008122:	4b12      	ldr	r3, [pc, #72]	; (800816c <prvTaskExitError+0x54>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800812a:	d00a      	beq.n	8008142 <prvTaskExitError+0x2a>
	__asm volatile
 800812c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	60fb      	str	r3, [r7, #12]
}
 800813e:	bf00      	nop
 8008140:	e7fe      	b.n	8008140 <prvTaskExitError+0x28>
	__asm volatile
 8008142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008146:	f383 8811 	msr	BASEPRI, r3
 800814a:	f3bf 8f6f 	isb	sy
 800814e:	f3bf 8f4f 	dsb	sy
 8008152:	60bb      	str	r3, [r7, #8]
}
 8008154:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008156:	bf00      	nop
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d0fc      	beq.n	8008158 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800815e:	bf00      	nop
 8008160:	bf00      	nop
 8008162:	3714      	adds	r7, #20
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr
 800816c:	20000010 	.word	0x20000010

08008170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008170:	4b07      	ldr	r3, [pc, #28]	; (8008190 <pxCurrentTCBConst2>)
 8008172:	6819      	ldr	r1, [r3, #0]
 8008174:	6808      	ldr	r0, [r1, #0]
 8008176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800817a:	f380 8809 	msr	PSP, r0
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f04f 0000 	mov.w	r0, #0
 8008186:	f380 8811 	msr	BASEPRI, r0
 800818a:	4770      	bx	lr
 800818c:	f3af 8000 	nop.w

08008190 <pxCurrentTCBConst2>:
 8008190:	200005c4 	.word	0x200005c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008194:	bf00      	nop
 8008196:	bf00      	nop

08008198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008198:	4808      	ldr	r0, [pc, #32]	; (80081bc <prvPortStartFirstTask+0x24>)
 800819a:	6800      	ldr	r0, [r0, #0]
 800819c:	6800      	ldr	r0, [r0, #0]
 800819e:	f380 8808 	msr	MSP, r0
 80081a2:	f04f 0000 	mov.w	r0, #0
 80081a6:	f380 8814 	msr	CONTROL, r0
 80081aa:	b662      	cpsie	i
 80081ac:	b661      	cpsie	f
 80081ae:	f3bf 8f4f 	dsb	sy
 80081b2:	f3bf 8f6f 	isb	sy
 80081b6:	df00      	svc	0
 80081b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80081ba:	bf00      	nop
 80081bc:	e000ed08 	.word	0xe000ed08

080081c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80081c6:	4b46      	ldr	r3, [pc, #280]	; (80082e0 <xPortStartScheduler+0x120>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a46      	ldr	r2, [pc, #280]	; (80082e4 <xPortStartScheduler+0x124>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d10a      	bne.n	80081e6 <xPortStartScheduler+0x26>
	__asm volatile
 80081d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	613b      	str	r3, [r7, #16]
}
 80081e2:	bf00      	nop
 80081e4:	e7fe      	b.n	80081e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80081e6:	4b3e      	ldr	r3, [pc, #248]	; (80082e0 <xPortStartScheduler+0x120>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a3f      	ldr	r2, [pc, #252]	; (80082e8 <xPortStartScheduler+0x128>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d10a      	bne.n	8008206 <xPortStartScheduler+0x46>
	__asm volatile
 80081f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f4:	f383 8811 	msr	BASEPRI, r3
 80081f8:	f3bf 8f6f 	isb	sy
 80081fc:	f3bf 8f4f 	dsb	sy
 8008200:	60fb      	str	r3, [r7, #12]
}
 8008202:	bf00      	nop
 8008204:	e7fe      	b.n	8008204 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008206:	4b39      	ldr	r3, [pc, #228]	; (80082ec <xPortStartScheduler+0x12c>)
 8008208:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	b2db      	uxtb	r3, r3
 8008210:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	22ff      	movs	r2, #255	; 0xff
 8008216:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	b2db      	uxtb	r3, r3
 800821e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008220:	78fb      	ldrb	r3, [r7, #3]
 8008222:	b2db      	uxtb	r3, r3
 8008224:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008228:	b2da      	uxtb	r2, r3
 800822a:	4b31      	ldr	r3, [pc, #196]	; (80082f0 <xPortStartScheduler+0x130>)
 800822c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800822e:	4b31      	ldr	r3, [pc, #196]	; (80082f4 <xPortStartScheduler+0x134>)
 8008230:	2207      	movs	r2, #7
 8008232:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008234:	e009      	b.n	800824a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008236:	4b2f      	ldr	r3, [pc, #188]	; (80082f4 <xPortStartScheduler+0x134>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3b01      	subs	r3, #1
 800823c:	4a2d      	ldr	r2, [pc, #180]	; (80082f4 <xPortStartScheduler+0x134>)
 800823e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008240:	78fb      	ldrb	r3, [r7, #3]
 8008242:	b2db      	uxtb	r3, r3
 8008244:	005b      	lsls	r3, r3, #1
 8008246:	b2db      	uxtb	r3, r3
 8008248:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800824a:	78fb      	ldrb	r3, [r7, #3]
 800824c:	b2db      	uxtb	r3, r3
 800824e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008252:	2b80      	cmp	r3, #128	; 0x80
 8008254:	d0ef      	beq.n	8008236 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008256:	4b27      	ldr	r3, [pc, #156]	; (80082f4 <xPortStartScheduler+0x134>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f1c3 0307 	rsb	r3, r3, #7
 800825e:	2b04      	cmp	r3, #4
 8008260:	d00a      	beq.n	8008278 <xPortStartScheduler+0xb8>
	__asm volatile
 8008262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008266:	f383 8811 	msr	BASEPRI, r3
 800826a:	f3bf 8f6f 	isb	sy
 800826e:	f3bf 8f4f 	dsb	sy
 8008272:	60bb      	str	r3, [r7, #8]
}
 8008274:	bf00      	nop
 8008276:	e7fe      	b.n	8008276 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008278:	4b1e      	ldr	r3, [pc, #120]	; (80082f4 <xPortStartScheduler+0x134>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	021b      	lsls	r3, r3, #8
 800827e:	4a1d      	ldr	r2, [pc, #116]	; (80082f4 <xPortStartScheduler+0x134>)
 8008280:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008282:	4b1c      	ldr	r3, [pc, #112]	; (80082f4 <xPortStartScheduler+0x134>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800828a:	4a1a      	ldr	r2, [pc, #104]	; (80082f4 <xPortStartScheduler+0x134>)
 800828c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	b2da      	uxtb	r2, r3
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008296:	4b18      	ldr	r3, [pc, #96]	; (80082f8 <xPortStartScheduler+0x138>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a17      	ldr	r2, [pc, #92]	; (80082f8 <xPortStartScheduler+0x138>)
 800829c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80082a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80082a2:	4b15      	ldr	r3, [pc, #84]	; (80082f8 <xPortStartScheduler+0x138>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a14      	ldr	r2, [pc, #80]	; (80082f8 <xPortStartScheduler+0x138>)
 80082a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80082ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80082ae:	f000 f8dd 	bl	800846c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082b2:	4b12      	ldr	r3, [pc, #72]	; (80082fc <xPortStartScheduler+0x13c>)
 80082b4:	2200      	movs	r2, #0
 80082b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80082b8:	f000 f8fc 	bl	80084b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80082bc:	4b10      	ldr	r3, [pc, #64]	; (8008300 <xPortStartScheduler+0x140>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a0f      	ldr	r2, [pc, #60]	; (8008300 <xPortStartScheduler+0x140>)
 80082c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80082c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80082c8:	f7ff ff66 	bl	8008198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80082cc:	f7ff fd4e 	bl	8007d6c <vTaskSwitchContext>
	prvTaskExitError();
 80082d0:	f7ff ff22 	bl	8008118 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3718      	adds	r7, #24
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	e000ed00 	.word	0xe000ed00
 80082e4:	410fc271 	.word	0x410fc271
 80082e8:	410fc270 	.word	0x410fc270
 80082ec:	e000e400 	.word	0xe000e400
 80082f0:	200006f0 	.word	0x200006f0
 80082f4:	200006f4 	.word	0x200006f4
 80082f8:	e000ed20 	.word	0xe000ed20
 80082fc:	20000010 	.word	0x20000010
 8008300:	e000ef34 	.word	0xe000ef34

08008304 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
	__asm volatile
 800830a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830e:	f383 8811 	msr	BASEPRI, r3
 8008312:	f3bf 8f6f 	isb	sy
 8008316:	f3bf 8f4f 	dsb	sy
 800831a:	607b      	str	r3, [r7, #4]
}
 800831c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800831e:	4b0f      	ldr	r3, [pc, #60]	; (800835c <vPortEnterCritical+0x58>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	3301      	adds	r3, #1
 8008324:	4a0d      	ldr	r2, [pc, #52]	; (800835c <vPortEnterCritical+0x58>)
 8008326:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008328:	4b0c      	ldr	r3, [pc, #48]	; (800835c <vPortEnterCritical+0x58>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d10f      	bne.n	8008350 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008330:	4b0b      	ldr	r3, [pc, #44]	; (8008360 <vPortEnterCritical+0x5c>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	b2db      	uxtb	r3, r3
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00a      	beq.n	8008350 <vPortEnterCritical+0x4c>
	__asm volatile
 800833a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833e:	f383 8811 	msr	BASEPRI, r3
 8008342:	f3bf 8f6f 	isb	sy
 8008346:	f3bf 8f4f 	dsb	sy
 800834a:	603b      	str	r3, [r7, #0]
}
 800834c:	bf00      	nop
 800834e:	e7fe      	b.n	800834e <vPortEnterCritical+0x4a>
	}
}
 8008350:	bf00      	nop
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr
 800835c:	20000010 	.word	0x20000010
 8008360:	e000ed04 	.word	0xe000ed04

08008364 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800836a:	4b12      	ldr	r3, [pc, #72]	; (80083b4 <vPortExitCritical+0x50>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10a      	bne.n	8008388 <vPortExitCritical+0x24>
	__asm volatile
 8008372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008376:	f383 8811 	msr	BASEPRI, r3
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	607b      	str	r3, [r7, #4]
}
 8008384:	bf00      	nop
 8008386:	e7fe      	b.n	8008386 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008388:	4b0a      	ldr	r3, [pc, #40]	; (80083b4 <vPortExitCritical+0x50>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	3b01      	subs	r3, #1
 800838e:	4a09      	ldr	r2, [pc, #36]	; (80083b4 <vPortExitCritical+0x50>)
 8008390:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008392:	4b08      	ldr	r3, [pc, #32]	; (80083b4 <vPortExitCritical+0x50>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d105      	bne.n	80083a6 <vPortExitCritical+0x42>
 800839a:	2300      	movs	r3, #0
 800839c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80083a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80083a6:	bf00      	nop
 80083a8:	370c      	adds	r7, #12
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	20000010 	.word	0x20000010
	...

080083c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80083c0:	f3ef 8009 	mrs	r0, PSP
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	4b15      	ldr	r3, [pc, #84]	; (8008420 <pxCurrentTCBConst>)
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	f01e 0f10 	tst.w	lr, #16
 80083d0:	bf08      	it	eq
 80083d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80083d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083da:	6010      	str	r0, [r2, #0]
 80083dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80083e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80083e4:	f380 8811 	msr	BASEPRI, r0
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	f3bf 8f6f 	isb	sy
 80083f0:	f7ff fcbc 	bl	8007d6c <vTaskSwitchContext>
 80083f4:	f04f 0000 	mov.w	r0, #0
 80083f8:	f380 8811 	msr	BASEPRI, r0
 80083fc:	bc09      	pop	{r0, r3}
 80083fe:	6819      	ldr	r1, [r3, #0]
 8008400:	6808      	ldr	r0, [r1, #0]
 8008402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008406:	f01e 0f10 	tst.w	lr, #16
 800840a:	bf08      	it	eq
 800840c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008410:	f380 8809 	msr	PSP, r0
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop
 800841c:	f3af 8000 	nop.w

08008420 <pxCurrentTCBConst>:
 8008420:	200005c4 	.word	0x200005c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008424:	bf00      	nop
 8008426:	bf00      	nop

08008428 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
	__asm volatile
 800842e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008432:	f383 8811 	msr	BASEPRI, r3
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	607b      	str	r3, [r7, #4]
}
 8008440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008442:	f7ff fbdb 	bl	8007bfc <xTaskIncrementTick>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d003      	beq.n	8008454 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800844c:	4b06      	ldr	r3, [pc, #24]	; (8008468 <SysTick_Handler+0x40>)
 800844e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008452:	601a      	str	r2, [r3, #0]
 8008454:	2300      	movs	r3, #0
 8008456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	f383 8811 	msr	BASEPRI, r3
}
 800845e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008460:	bf00      	nop
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	e000ed04 	.word	0xe000ed04

0800846c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800846c:	b480      	push	{r7}
 800846e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008470:	4b0b      	ldr	r3, [pc, #44]	; (80084a0 <vPortSetupTimerInterrupt+0x34>)
 8008472:	2200      	movs	r2, #0
 8008474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008476:	4b0b      	ldr	r3, [pc, #44]	; (80084a4 <vPortSetupTimerInterrupt+0x38>)
 8008478:	2200      	movs	r2, #0
 800847a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800847c:	4b0a      	ldr	r3, [pc, #40]	; (80084a8 <vPortSetupTimerInterrupt+0x3c>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a0a      	ldr	r2, [pc, #40]	; (80084ac <vPortSetupTimerInterrupt+0x40>)
 8008482:	fba2 2303 	umull	r2, r3, r2, r3
 8008486:	099b      	lsrs	r3, r3, #6
 8008488:	4a09      	ldr	r2, [pc, #36]	; (80084b0 <vPortSetupTimerInterrupt+0x44>)
 800848a:	3b01      	subs	r3, #1
 800848c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800848e:	4b04      	ldr	r3, [pc, #16]	; (80084a0 <vPortSetupTimerInterrupt+0x34>)
 8008490:	2207      	movs	r2, #7
 8008492:	601a      	str	r2, [r3, #0]
}
 8008494:	bf00      	nop
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	e000e010 	.word	0xe000e010
 80084a4:	e000e018 	.word	0xe000e018
 80084a8:	20000004 	.word	0x20000004
 80084ac:	10624dd3 	.word	0x10624dd3
 80084b0:	e000e014 	.word	0xe000e014

080084b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80084b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80084c4 <vPortEnableVFP+0x10>
 80084b8:	6801      	ldr	r1, [r0, #0]
 80084ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80084be:	6001      	str	r1, [r0, #0]
 80084c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80084c2:	bf00      	nop
 80084c4:	e000ed88 	.word	0xe000ed88

080084c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b08a      	sub	sp, #40	; 0x28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80084d0:	2300      	movs	r3, #0
 80084d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80084d4:	f7ff fae8 	bl	8007aa8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80084d8:	4b5b      	ldr	r3, [pc, #364]	; (8008648 <pvPortMalloc+0x180>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d101      	bne.n	80084e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80084e0:	f000 f920 	bl	8008724 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80084e4:	4b59      	ldr	r3, [pc, #356]	; (800864c <pvPortMalloc+0x184>)
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4013      	ands	r3, r2
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f040 8093 	bne.w	8008618 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d01d      	beq.n	8008534 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80084f8:	2208      	movs	r2, #8
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4413      	add	r3, r2
 80084fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f003 0307 	and.w	r3, r3, #7
 8008506:	2b00      	cmp	r3, #0
 8008508:	d014      	beq.n	8008534 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f023 0307 	bic.w	r3, r3, #7
 8008510:	3308      	adds	r3, #8
 8008512:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f003 0307 	and.w	r3, r3, #7
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00a      	beq.n	8008534 <pvPortMalloc+0x6c>
	__asm volatile
 800851e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008522:	f383 8811 	msr	BASEPRI, r3
 8008526:	f3bf 8f6f 	isb	sy
 800852a:	f3bf 8f4f 	dsb	sy
 800852e:	617b      	str	r3, [r7, #20]
}
 8008530:	bf00      	nop
 8008532:	e7fe      	b.n	8008532 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d06e      	beq.n	8008618 <pvPortMalloc+0x150>
 800853a:	4b45      	ldr	r3, [pc, #276]	; (8008650 <pvPortMalloc+0x188>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	429a      	cmp	r2, r3
 8008542:	d869      	bhi.n	8008618 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008544:	4b43      	ldr	r3, [pc, #268]	; (8008654 <pvPortMalloc+0x18c>)
 8008546:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008548:	4b42      	ldr	r3, [pc, #264]	; (8008654 <pvPortMalloc+0x18c>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800854e:	e004      	b.n	800855a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008552:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	429a      	cmp	r2, r3
 8008562:	d903      	bls.n	800856c <pvPortMalloc+0xa4>
 8008564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d1f1      	bne.n	8008550 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800856c:	4b36      	ldr	r3, [pc, #216]	; (8008648 <pvPortMalloc+0x180>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008572:	429a      	cmp	r2, r3
 8008574:	d050      	beq.n	8008618 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008576:	6a3b      	ldr	r3, [r7, #32]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2208      	movs	r2, #8
 800857c:	4413      	add	r3, r2
 800857e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	6a3b      	ldr	r3, [r7, #32]
 8008586:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858a:	685a      	ldr	r2, [r3, #4]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	1ad2      	subs	r2, r2, r3
 8008590:	2308      	movs	r3, #8
 8008592:	005b      	lsls	r3, r3, #1
 8008594:	429a      	cmp	r2, r3
 8008596:	d91f      	bls.n	80085d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4413      	add	r3, r2
 800859e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	f003 0307 	and.w	r3, r3, #7
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00a      	beq.n	80085c0 <pvPortMalloc+0xf8>
	__asm volatile
 80085aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ae:	f383 8811 	msr	BASEPRI, r3
 80085b2:	f3bf 8f6f 	isb	sy
 80085b6:	f3bf 8f4f 	dsb	sy
 80085ba:	613b      	str	r3, [r7, #16]
}
 80085bc:	bf00      	nop
 80085be:	e7fe      	b.n	80085be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80085c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c2:	685a      	ldr	r2, [r3, #4]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	1ad2      	subs	r2, r2, r3
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80085cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80085d2:	69b8      	ldr	r0, [r7, #24]
 80085d4:	f000 f908 	bl	80087e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80085d8:	4b1d      	ldr	r3, [pc, #116]	; (8008650 <pvPortMalloc+0x188>)
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	4a1b      	ldr	r2, [pc, #108]	; (8008650 <pvPortMalloc+0x188>)
 80085e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80085e6:	4b1a      	ldr	r3, [pc, #104]	; (8008650 <pvPortMalloc+0x188>)
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	4b1b      	ldr	r3, [pc, #108]	; (8008658 <pvPortMalloc+0x190>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d203      	bcs.n	80085fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80085f2:	4b17      	ldr	r3, [pc, #92]	; (8008650 <pvPortMalloc+0x188>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a18      	ldr	r2, [pc, #96]	; (8008658 <pvPortMalloc+0x190>)
 80085f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80085fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fc:	685a      	ldr	r2, [r3, #4]
 80085fe:	4b13      	ldr	r3, [pc, #76]	; (800864c <pvPortMalloc+0x184>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	431a      	orrs	r2, r3
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860a:	2200      	movs	r2, #0
 800860c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800860e:	4b13      	ldr	r3, [pc, #76]	; (800865c <pvPortMalloc+0x194>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	3301      	adds	r3, #1
 8008614:	4a11      	ldr	r2, [pc, #68]	; (800865c <pvPortMalloc+0x194>)
 8008616:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008618:	f7ff fa54 	bl	8007ac4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	f003 0307 	and.w	r3, r3, #7
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00a      	beq.n	800863c <pvPortMalloc+0x174>
	__asm volatile
 8008626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862a:	f383 8811 	msr	BASEPRI, r3
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f3bf 8f4f 	dsb	sy
 8008636:	60fb      	str	r3, [r7, #12]
}
 8008638:	bf00      	nop
 800863a:	e7fe      	b.n	800863a <pvPortMalloc+0x172>
	return pvReturn;
 800863c:	69fb      	ldr	r3, [r7, #28]
}
 800863e:	4618      	mov	r0, r3
 8008640:	3728      	adds	r7, #40	; 0x28
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	20004300 	.word	0x20004300
 800864c:	20004314 	.word	0x20004314
 8008650:	20004304 	.word	0x20004304
 8008654:	200042f8 	.word	0x200042f8
 8008658:	20004308 	.word	0x20004308
 800865c:	2000430c 	.word	0x2000430c

08008660 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b086      	sub	sp, #24
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d04d      	beq.n	800870e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008672:	2308      	movs	r3, #8
 8008674:	425b      	negs	r3, r3
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	4413      	add	r3, r2
 800867a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	685a      	ldr	r2, [r3, #4]
 8008684:	4b24      	ldr	r3, [pc, #144]	; (8008718 <vPortFree+0xb8>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4013      	ands	r3, r2
 800868a:	2b00      	cmp	r3, #0
 800868c:	d10a      	bne.n	80086a4 <vPortFree+0x44>
	__asm volatile
 800868e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008692:	f383 8811 	msr	BASEPRI, r3
 8008696:	f3bf 8f6f 	isb	sy
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	60fb      	str	r3, [r7, #12]
}
 80086a0:	bf00      	nop
 80086a2:	e7fe      	b.n	80086a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00a      	beq.n	80086c2 <vPortFree+0x62>
	__asm volatile
 80086ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b0:	f383 8811 	msr	BASEPRI, r3
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	60bb      	str	r3, [r7, #8]
}
 80086be:	bf00      	nop
 80086c0:	e7fe      	b.n	80086c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	685a      	ldr	r2, [r3, #4]
 80086c6:	4b14      	ldr	r3, [pc, #80]	; (8008718 <vPortFree+0xb8>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4013      	ands	r3, r2
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d01e      	beq.n	800870e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d11a      	bne.n	800870e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	685a      	ldr	r2, [r3, #4]
 80086dc:	4b0e      	ldr	r3, [pc, #56]	; (8008718 <vPortFree+0xb8>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	43db      	mvns	r3, r3
 80086e2:	401a      	ands	r2, r3
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80086e8:	f7ff f9de 	bl	8007aa8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	685a      	ldr	r2, [r3, #4]
 80086f0:	4b0a      	ldr	r3, [pc, #40]	; (800871c <vPortFree+0xbc>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4413      	add	r3, r2
 80086f6:	4a09      	ldr	r2, [pc, #36]	; (800871c <vPortFree+0xbc>)
 80086f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80086fa:	6938      	ldr	r0, [r7, #16]
 80086fc:	f000 f874 	bl	80087e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008700:	4b07      	ldr	r3, [pc, #28]	; (8008720 <vPortFree+0xc0>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	3301      	adds	r3, #1
 8008706:	4a06      	ldr	r2, [pc, #24]	; (8008720 <vPortFree+0xc0>)
 8008708:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800870a:	f7ff f9db 	bl	8007ac4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800870e:	bf00      	nop
 8008710:	3718      	adds	r7, #24
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	20004314 	.word	0x20004314
 800871c:	20004304 	.word	0x20004304
 8008720:	20004310 	.word	0x20004310

08008724 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800872a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800872e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008730:	4b27      	ldr	r3, [pc, #156]	; (80087d0 <prvHeapInit+0xac>)
 8008732:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f003 0307 	and.w	r3, r3, #7
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00c      	beq.n	8008758 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	3307      	adds	r3, #7
 8008742:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f023 0307 	bic.w	r3, r3, #7
 800874a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800874c:	68ba      	ldr	r2, [r7, #8]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	4a1f      	ldr	r2, [pc, #124]	; (80087d0 <prvHeapInit+0xac>)
 8008754:	4413      	add	r3, r2
 8008756:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800875c:	4a1d      	ldr	r2, [pc, #116]	; (80087d4 <prvHeapInit+0xb0>)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008762:	4b1c      	ldr	r3, [pc, #112]	; (80087d4 <prvHeapInit+0xb0>)
 8008764:	2200      	movs	r2, #0
 8008766:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	68ba      	ldr	r2, [r7, #8]
 800876c:	4413      	add	r3, r2
 800876e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008770:	2208      	movs	r2, #8
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	1a9b      	subs	r3, r3, r2
 8008776:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f023 0307 	bic.w	r3, r3, #7
 800877e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	4a15      	ldr	r2, [pc, #84]	; (80087d8 <prvHeapInit+0xb4>)
 8008784:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008786:	4b14      	ldr	r3, [pc, #80]	; (80087d8 <prvHeapInit+0xb4>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2200      	movs	r2, #0
 800878c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800878e:	4b12      	ldr	r3, [pc, #72]	; (80087d8 <prvHeapInit+0xb4>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2200      	movs	r2, #0
 8008794:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	1ad2      	subs	r2, r2, r3
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80087a4:	4b0c      	ldr	r3, [pc, #48]	; (80087d8 <prvHeapInit+0xb4>)
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	4a0a      	ldr	r2, [pc, #40]	; (80087dc <prvHeapInit+0xb8>)
 80087b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	4a09      	ldr	r2, [pc, #36]	; (80087e0 <prvHeapInit+0xbc>)
 80087ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80087bc:	4b09      	ldr	r3, [pc, #36]	; (80087e4 <prvHeapInit+0xc0>)
 80087be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80087c2:	601a      	str	r2, [r3, #0]
}
 80087c4:	bf00      	nop
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr
 80087d0:	200006f8 	.word	0x200006f8
 80087d4:	200042f8 	.word	0x200042f8
 80087d8:	20004300 	.word	0x20004300
 80087dc:	20004308 	.word	0x20004308
 80087e0:	20004304 	.word	0x20004304
 80087e4:	20004314 	.word	0x20004314

080087e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80087e8:	b480      	push	{r7}
 80087ea:	b085      	sub	sp, #20
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80087f0:	4b28      	ldr	r3, [pc, #160]	; (8008894 <prvInsertBlockIntoFreeList+0xac>)
 80087f2:	60fb      	str	r3, [r7, #12]
 80087f4:	e002      	b.n	80087fc <prvInsertBlockIntoFreeList+0x14>
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	60fb      	str	r3, [r7, #12]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	429a      	cmp	r2, r3
 8008804:	d8f7      	bhi.n	80087f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	4413      	add	r3, r2
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	429a      	cmp	r2, r3
 8008816:	d108      	bne.n	800882a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	685a      	ldr	r2, [r3, #4]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	441a      	add	r2, r3
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	441a      	add	r2, r3
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	429a      	cmp	r2, r3
 800883c:	d118      	bne.n	8008870 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	4b15      	ldr	r3, [pc, #84]	; (8008898 <prvInsertBlockIntoFreeList+0xb0>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	429a      	cmp	r2, r3
 8008848:	d00d      	beq.n	8008866 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	685a      	ldr	r2, [r3, #4]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	441a      	add	r2, r3
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	601a      	str	r2, [r3, #0]
 8008864:	e008      	b.n	8008878 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008866:	4b0c      	ldr	r3, [pc, #48]	; (8008898 <prvInsertBlockIntoFreeList+0xb0>)
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	601a      	str	r2, [r3, #0]
 800886e:	e003      	b.n	8008878 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	429a      	cmp	r2, r3
 800887e:	d002      	beq.n	8008886 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008886:	bf00      	nop
 8008888:	3714      	adds	r7, #20
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	200042f8 	.word	0x200042f8
 8008898:	20004300 	.word	0x20004300

0800889c <__errno>:
 800889c:	4b01      	ldr	r3, [pc, #4]	; (80088a4 <__errno+0x8>)
 800889e:	6818      	ldr	r0, [r3, #0]
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	20000014 	.word	0x20000014

080088a8 <__libc_init_array>:
 80088a8:	b570      	push	{r4, r5, r6, lr}
 80088aa:	4d0d      	ldr	r5, [pc, #52]	; (80088e0 <__libc_init_array+0x38>)
 80088ac:	4c0d      	ldr	r4, [pc, #52]	; (80088e4 <__libc_init_array+0x3c>)
 80088ae:	1b64      	subs	r4, r4, r5
 80088b0:	10a4      	asrs	r4, r4, #2
 80088b2:	2600      	movs	r6, #0
 80088b4:	42a6      	cmp	r6, r4
 80088b6:	d109      	bne.n	80088cc <__libc_init_array+0x24>
 80088b8:	4d0b      	ldr	r5, [pc, #44]	; (80088e8 <__libc_init_array+0x40>)
 80088ba:	4c0c      	ldr	r4, [pc, #48]	; (80088ec <__libc_init_array+0x44>)
 80088bc:	f000 fcf8 	bl	80092b0 <_init>
 80088c0:	1b64      	subs	r4, r4, r5
 80088c2:	10a4      	asrs	r4, r4, #2
 80088c4:	2600      	movs	r6, #0
 80088c6:	42a6      	cmp	r6, r4
 80088c8:	d105      	bne.n	80088d6 <__libc_init_array+0x2e>
 80088ca:	bd70      	pop	{r4, r5, r6, pc}
 80088cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80088d0:	4798      	blx	r3
 80088d2:	3601      	adds	r6, #1
 80088d4:	e7ee      	b.n	80088b4 <__libc_init_array+0xc>
 80088d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80088da:	4798      	blx	r3
 80088dc:	3601      	adds	r6, #1
 80088de:	e7f2      	b.n	80088c6 <__libc_init_array+0x1e>
 80088e0:	0800aed8 	.word	0x0800aed8
 80088e4:	0800aed8 	.word	0x0800aed8
 80088e8:	0800aed8 	.word	0x0800aed8
 80088ec:	0800aedc 	.word	0x0800aedc

080088f0 <__retarget_lock_acquire_recursive>:
 80088f0:	4770      	bx	lr

080088f2 <__retarget_lock_release_recursive>:
 80088f2:	4770      	bx	lr

080088f4 <memcpy>:
 80088f4:	440a      	add	r2, r1
 80088f6:	4291      	cmp	r1, r2
 80088f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80088fc:	d100      	bne.n	8008900 <memcpy+0xc>
 80088fe:	4770      	bx	lr
 8008900:	b510      	push	{r4, lr}
 8008902:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008906:	f803 4f01 	strb.w	r4, [r3, #1]!
 800890a:	4291      	cmp	r1, r2
 800890c:	d1f9      	bne.n	8008902 <memcpy+0xe>
 800890e:	bd10      	pop	{r4, pc}

08008910 <memset>:
 8008910:	4402      	add	r2, r0
 8008912:	4603      	mov	r3, r0
 8008914:	4293      	cmp	r3, r2
 8008916:	d100      	bne.n	800891a <memset+0xa>
 8008918:	4770      	bx	lr
 800891a:	f803 1b01 	strb.w	r1, [r3], #1
 800891e:	e7f9      	b.n	8008914 <memset+0x4>

08008920 <sbrk_aligned>:
 8008920:	b570      	push	{r4, r5, r6, lr}
 8008922:	4e0e      	ldr	r6, [pc, #56]	; (800895c <sbrk_aligned+0x3c>)
 8008924:	460c      	mov	r4, r1
 8008926:	6831      	ldr	r1, [r6, #0]
 8008928:	4605      	mov	r5, r0
 800892a:	b911      	cbnz	r1, 8008932 <sbrk_aligned+0x12>
 800892c:	f000 f8f6 	bl	8008b1c <_sbrk_r>
 8008930:	6030      	str	r0, [r6, #0]
 8008932:	4621      	mov	r1, r4
 8008934:	4628      	mov	r0, r5
 8008936:	f000 f8f1 	bl	8008b1c <_sbrk_r>
 800893a:	1c43      	adds	r3, r0, #1
 800893c:	d00a      	beq.n	8008954 <sbrk_aligned+0x34>
 800893e:	1cc4      	adds	r4, r0, #3
 8008940:	f024 0403 	bic.w	r4, r4, #3
 8008944:	42a0      	cmp	r0, r4
 8008946:	d007      	beq.n	8008958 <sbrk_aligned+0x38>
 8008948:	1a21      	subs	r1, r4, r0
 800894a:	4628      	mov	r0, r5
 800894c:	f000 f8e6 	bl	8008b1c <_sbrk_r>
 8008950:	3001      	adds	r0, #1
 8008952:	d101      	bne.n	8008958 <sbrk_aligned+0x38>
 8008954:	f04f 34ff 	mov.w	r4, #4294967295
 8008958:	4620      	mov	r0, r4
 800895a:	bd70      	pop	{r4, r5, r6, pc}
 800895c:	20004320 	.word	0x20004320

08008960 <_malloc_r>:
 8008960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008964:	1ccd      	adds	r5, r1, #3
 8008966:	f025 0503 	bic.w	r5, r5, #3
 800896a:	3508      	adds	r5, #8
 800896c:	2d0c      	cmp	r5, #12
 800896e:	bf38      	it	cc
 8008970:	250c      	movcc	r5, #12
 8008972:	2d00      	cmp	r5, #0
 8008974:	4607      	mov	r7, r0
 8008976:	db01      	blt.n	800897c <_malloc_r+0x1c>
 8008978:	42a9      	cmp	r1, r5
 800897a:	d905      	bls.n	8008988 <_malloc_r+0x28>
 800897c:	230c      	movs	r3, #12
 800897e:	603b      	str	r3, [r7, #0]
 8008980:	2600      	movs	r6, #0
 8008982:	4630      	mov	r0, r6
 8008984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008988:	4e2e      	ldr	r6, [pc, #184]	; (8008a44 <_malloc_r+0xe4>)
 800898a:	f000 f8f7 	bl	8008b7c <__malloc_lock>
 800898e:	6833      	ldr	r3, [r6, #0]
 8008990:	461c      	mov	r4, r3
 8008992:	bb34      	cbnz	r4, 80089e2 <_malloc_r+0x82>
 8008994:	4629      	mov	r1, r5
 8008996:	4638      	mov	r0, r7
 8008998:	f7ff ffc2 	bl	8008920 <sbrk_aligned>
 800899c:	1c43      	adds	r3, r0, #1
 800899e:	4604      	mov	r4, r0
 80089a0:	d14d      	bne.n	8008a3e <_malloc_r+0xde>
 80089a2:	6834      	ldr	r4, [r6, #0]
 80089a4:	4626      	mov	r6, r4
 80089a6:	2e00      	cmp	r6, #0
 80089a8:	d140      	bne.n	8008a2c <_malloc_r+0xcc>
 80089aa:	6823      	ldr	r3, [r4, #0]
 80089ac:	4631      	mov	r1, r6
 80089ae:	4638      	mov	r0, r7
 80089b0:	eb04 0803 	add.w	r8, r4, r3
 80089b4:	f000 f8b2 	bl	8008b1c <_sbrk_r>
 80089b8:	4580      	cmp	r8, r0
 80089ba:	d13a      	bne.n	8008a32 <_malloc_r+0xd2>
 80089bc:	6821      	ldr	r1, [r4, #0]
 80089be:	3503      	adds	r5, #3
 80089c0:	1a6d      	subs	r5, r5, r1
 80089c2:	f025 0503 	bic.w	r5, r5, #3
 80089c6:	3508      	adds	r5, #8
 80089c8:	2d0c      	cmp	r5, #12
 80089ca:	bf38      	it	cc
 80089cc:	250c      	movcc	r5, #12
 80089ce:	4629      	mov	r1, r5
 80089d0:	4638      	mov	r0, r7
 80089d2:	f7ff ffa5 	bl	8008920 <sbrk_aligned>
 80089d6:	3001      	adds	r0, #1
 80089d8:	d02b      	beq.n	8008a32 <_malloc_r+0xd2>
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	442b      	add	r3, r5
 80089de:	6023      	str	r3, [r4, #0]
 80089e0:	e00e      	b.n	8008a00 <_malloc_r+0xa0>
 80089e2:	6822      	ldr	r2, [r4, #0]
 80089e4:	1b52      	subs	r2, r2, r5
 80089e6:	d41e      	bmi.n	8008a26 <_malloc_r+0xc6>
 80089e8:	2a0b      	cmp	r2, #11
 80089ea:	d916      	bls.n	8008a1a <_malloc_r+0xba>
 80089ec:	1961      	adds	r1, r4, r5
 80089ee:	42a3      	cmp	r3, r4
 80089f0:	6025      	str	r5, [r4, #0]
 80089f2:	bf18      	it	ne
 80089f4:	6059      	strne	r1, [r3, #4]
 80089f6:	6863      	ldr	r3, [r4, #4]
 80089f8:	bf08      	it	eq
 80089fa:	6031      	streq	r1, [r6, #0]
 80089fc:	5162      	str	r2, [r4, r5]
 80089fe:	604b      	str	r3, [r1, #4]
 8008a00:	4638      	mov	r0, r7
 8008a02:	f104 060b 	add.w	r6, r4, #11
 8008a06:	f000 f8bf 	bl	8008b88 <__malloc_unlock>
 8008a0a:	f026 0607 	bic.w	r6, r6, #7
 8008a0e:	1d23      	adds	r3, r4, #4
 8008a10:	1af2      	subs	r2, r6, r3
 8008a12:	d0b6      	beq.n	8008982 <_malloc_r+0x22>
 8008a14:	1b9b      	subs	r3, r3, r6
 8008a16:	50a3      	str	r3, [r4, r2]
 8008a18:	e7b3      	b.n	8008982 <_malloc_r+0x22>
 8008a1a:	6862      	ldr	r2, [r4, #4]
 8008a1c:	42a3      	cmp	r3, r4
 8008a1e:	bf0c      	ite	eq
 8008a20:	6032      	streq	r2, [r6, #0]
 8008a22:	605a      	strne	r2, [r3, #4]
 8008a24:	e7ec      	b.n	8008a00 <_malloc_r+0xa0>
 8008a26:	4623      	mov	r3, r4
 8008a28:	6864      	ldr	r4, [r4, #4]
 8008a2a:	e7b2      	b.n	8008992 <_malloc_r+0x32>
 8008a2c:	4634      	mov	r4, r6
 8008a2e:	6876      	ldr	r6, [r6, #4]
 8008a30:	e7b9      	b.n	80089a6 <_malloc_r+0x46>
 8008a32:	230c      	movs	r3, #12
 8008a34:	603b      	str	r3, [r7, #0]
 8008a36:	4638      	mov	r0, r7
 8008a38:	f000 f8a6 	bl	8008b88 <__malloc_unlock>
 8008a3c:	e7a1      	b.n	8008982 <_malloc_r+0x22>
 8008a3e:	6025      	str	r5, [r4, #0]
 8008a40:	e7de      	b.n	8008a00 <_malloc_r+0xa0>
 8008a42:	bf00      	nop
 8008a44:	2000431c 	.word	0x2000431c

08008a48 <cleanup_glue>:
 8008a48:	b538      	push	{r3, r4, r5, lr}
 8008a4a:	460c      	mov	r4, r1
 8008a4c:	6809      	ldr	r1, [r1, #0]
 8008a4e:	4605      	mov	r5, r0
 8008a50:	b109      	cbz	r1, 8008a56 <cleanup_glue+0xe>
 8008a52:	f7ff fff9 	bl	8008a48 <cleanup_glue>
 8008a56:	4621      	mov	r1, r4
 8008a58:	4628      	mov	r0, r5
 8008a5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a5e:	f000 b899 	b.w	8008b94 <_free_r>
	...

08008a64 <_reclaim_reent>:
 8008a64:	4b2c      	ldr	r3, [pc, #176]	; (8008b18 <_reclaim_reent+0xb4>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4283      	cmp	r3, r0
 8008a6a:	b570      	push	{r4, r5, r6, lr}
 8008a6c:	4604      	mov	r4, r0
 8008a6e:	d051      	beq.n	8008b14 <_reclaim_reent+0xb0>
 8008a70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008a72:	b143      	cbz	r3, 8008a86 <_reclaim_reent+0x22>
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d14a      	bne.n	8008b10 <_reclaim_reent+0xac>
 8008a7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a7c:	6819      	ldr	r1, [r3, #0]
 8008a7e:	b111      	cbz	r1, 8008a86 <_reclaim_reent+0x22>
 8008a80:	4620      	mov	r0, r4
 8008a82:	f000 f887 	bl	8008b94 <_free_r>
 8008a86:	6961      	ldr	r1, [r4, #20]
 8008a88:	b111      	cbz	r1, 8008a90 <_reclaim_reent+0x2c>
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	f000 f882 	bl	8008b94 <_free_r>
 8008a90:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008a92:	b111      	cbz	r1, 8008a9a <_reclaim_reent+0x36>
 8008a94:	4620      	mov	r0, r4
 8008a96:	f000 f87d 	bl	8008b94 <_free_r>
 8008a9a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008a9c:	b111      	cbz	r1, 8008aa4 <_reclaim_reent+0x40>
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f000 f878 	bl	8008b94 <_free_r>
 8008aa4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008aa6:	b111      	cbz	r1, 8008aae <_reclaim_reent+0x4a>
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	f000 f873 	bl	8008b94 <_free_r>
 8008aae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008ab0:	b111      	cbz	r1, 8008ab8 <_reclaim_reent+0x54>
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f000 f86e 	bl	8008b94 <_free_r>
 8008ab8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008aba:	b111      	cbz	r1, 8008ac2 <_reclaim_reent+0x5e>
 8008abc:	4620      	mov	r0, r4
 8008abe:	f000 f869 	bl	8008b94 <_free_r>
 8008ac2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008ac4:	b111      	cbz	r1, 8008acc <_reclaim_reent+0x68>
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f000 f864 	bl	8008b94 <_free_r>
 8008acc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ace:	b111      	cbz	r1, 8008ad6 <_reclaim_reent+0x72>
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	f000 f85f 	bl	8008b94 <_free_r>
 8008ad6:	69a3      	ldr	r3, [r4, #24]
 8008ad8:	b1e3      	cbz	r3, 8008b14 <_reclaim_reent+0xb0>
 8008ada:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008adc:	4620      	mov	r0, r4
 8008ade:	4798      	blx	r3
 8008ae0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008ae2:	b1b9      	cbz	r1, 8008b14 <_reclaim_reent+0xb0>
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008aea:	f7ff bfad 	b.w	8008a48 <cleanup_glue>
 8008aee:	5949      	ldr	r1, [r1, r5]
 8008af0:	b941      	cbnz	r1, 8008b04 <_reclaim_reent+0xa0>
 8008af2:	3504      	adds	r5, #4
 8008af4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008af6:	2d80      	cmp	r5, #128	; 0x80
 8008af8:	68d9      	ldr	r1, [r3, #12]
 8008afa:	d1f8      	bne.n	8008aee <_reclaim_reent+0x8a>
 8008afc:	4620      	mov	r0, r4
 8008afe:	f000 f849 	bl	8008b94 <_free_r>
 8008b02:	e7ba      	b.n	8008a7a <_reclaim_reent+0x16>
 8008b04:	680e      	ldr	r6, [r1, #0]
 8008b06:	4620      	mov	r0, r4
 8008b08:	f000 f844 	bl	8008b94 <_free_r>
 8008b0c:	4631      	mov	r1, r6
 8008b0e:	e7ef      	b.n	8008af0 <_reclaim_reent+0x8c>
 8008b10:	2500      	movs	r5, #0
 8008b12:	e7ef      	b.n	8008af4 <_reclaim_reent+0x90>
 8008b14:	bd70      	pop	{r4, r5, r6, pc}
 8008b16:	bf00      	nop
 8008b18:	20000014 	.word	0x20000014

08008b1c <_sbrk_r>:
 8008b1c:	b538      	push	{r3, r4, r5, lr}
 8008b1e:	4d06      	ldr	r5, [pc, #24]	; (8008b38 <_sbrk_r+0x1c>)
 8008b20:	2300      	movs	r3, #0
 8008b22:	4604      	mov	r4, r0
 8008b24:	4608      	mov	r0, r1
 8008b26:	602b      	str	r3, [r5, #0]
 8008b28:	f7fa f8c8 	bl	8002cbc <_sbrk>
 8008b2c:	1c43      	adds	r3, r0, #1
 8008b2e:	d102      	bne.n	8008b36 <_sbrk_r+0x1a>
 8008b30:	682b      	ldr	r3, [r5, #0]
 8008b32:	b103      	cbz	r3, 8008b36 <_sbrk_r+0x1a>
 8008b34:	6023      	str	r3, [r4, #0]
 8008b36:	bd38      	pop	{r3, r4, r5, pc}
 8008b38:	20004324 	.word	0x20004324

08008b3c <siprintf>:
 8008b3c:	b40e      	push	{r1, r2, r3}
 8008b3e:	b500      	push	{lr}
 8008b40:	b09c      	sub	sp, #112	; 0x70
 8008b42:	ab1d      	add	r3, sp, #116	; 0x74
 8008b44:	9002      	str	r0, [sp, #8]
 8008b46:	9006      	str	r0, [sp, #24]
 8008b48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b4c:	4809      	ldr	r0, [pc, #36]	; (8008b74 <siprintf+0x38>)
 8008b4e:	9107      	str	r1, [sp, #28]
 8008b50:	9104      	str	r1, [sp, #16]
 8008b52:	4909      	ldr	r1, [pc, #36]	; (8008b78 <siprintf+0x3c>)
 8008b54:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b58:	9105      	str	r1, [sp, #20]
 8008b5a:	6800      	ldr	r0, [r0, #0]
 8008b5c:	9301      	str	r3, [sp, #4]
 8008b5e:	a902      	add	r1, sp, #8
 8008b60:	f000 f8c0 	bl	8008ce4 <_svfiprintf_r>
 8008b64:	9b02      	ldr	r3, [sp, #8]
 8008b66:	2200      	movs	r2, #0
 8008b68:	701a      	strb	r2, [r3, #0]
 8008b6a:	b01c      	add	sp, #112	; 0x70
 8008b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b70:	b003      	add	sp, #12
 8008b72:	4770      	bx	lr
 8008b74:	20000014 	.word	0x20000014
 8008b78:	ffff0208 	.word	0xffff0208

08008b7c <__malloc_lock>:
 8008b7c:	4801      	ldr	r0, [pc, #4]	; (8008b84 <__malloc_lock+0x8>)
 8008b7e:	f7ff beb7 	b.w	80088f0 <__retarget_lock_acquire_recursive>
 8008b82:	bf00      	nop
 8008b84:	20004318 	.word	0x20004318

08008b88 <__malloc_unlock>:
 8008b88:	4801      	ldr	r0, [pc, #4]	; (8008b90 <__malloc_unlock+0x8>)
 8008b8a:	f7ff beb2 	b.w	80088f2 <__retarget_lock_release_recursive>
 8008b8e:	bf00      	nop
 8008b90:	20004318 	.word	0x20004318

08008b94 <_free_r>:
 8008b94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b96:	2900      	cmp	r1, #0
 8008b98:	d044      	beq.n	8008c24 <_free_r+0x90>
 8008b9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b9e:	9001      	str	r0, [sp, #4]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	f1a1 0404 	sub.w	r4, r1, #4
 8008ba6:	bfb8      	it	lt
 8008ba8:	18e4      	addlt	r4, r4, r3
 8008baa:	f7ff ffe7 	bl	8008b7c <__malloc_lock>
 8008bae:	4a1e      	ldr	r2, [pc, #120]	; (8008c28 <_free_r+0x94>)
 8008bb0:	9801      	ldr	r0, [sp, #4]
 8008bb2:	6813      	ldr	r3, [r2, #0]
 8008bb4:	b933      	cbnz	r3, 8008bc4 <_free_r+0x30>
 8008bb6:	6063      	str	r3, [r4, #4]
 8008bb8:	6014      	str	r4, [r2, #0]
 8008bba:	b003      	add	sp, #12
 8008bbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bc0:	f7ff bfe2 	b.w	8008b88 <__malloc_unlock>
 8008bc4:	42a3      	cmp	r3, r4
 8008bc6:	d908      	bls.n	8008bda <_free_r+0x46>
 8008bc8:	6825      	ldr	r5, [r4, #0]
 8008bca:	1961      	adds	r1, r4, r5
 8008bcc:	428b      	cmp	r3, r1
 8008bce:	bf01      	itttt	eq
 8008bd0:	6819      	ldreq	r1, [r3, #0]
 8008bd2:	685b      	ldreq	r3, [r3, #4]
 8008bd4:	1949      	addeq	r1, r1, r5
 8008bd6:	6021      	streq	r1, [r4, #0]
 8008bd8:	e7ed      	b.n	8008bb6 <_free_r+0x22>
 8008bda:	461a      	mov	r2, r3
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	b10b      	cbz	r3, 8008be4 <_free_r+0x50>
 8008be0:	42a3      	cmp	r3, r4
 8008be2:	d9fa      	bls.n	8008bda <_free_r+0x46>
 8008be4:	6811      	ldr	r1, [r2, #0]
 8008be6:	1855      	adds	r5, r2, r1
 8008be8:	42a5      	cmp	r5, r4
 8008bea:	d10b      	bne.n	8008c04 <_free_r+0x70>
 8008bec:	6824      	ldr	r4, [r4, #0]
 8008bee:	4421      	add	r1, r4
 8008bf0:	1854      	adds	r4, r2, r1
 8008bf2:	42a3      	cmp	r3, r4
 8008bf4:	6011      	str	r1, [r2, #0]
 8008bf6:	d1e0      	bne.n	8008bba <_free_r+0x26>
 8008bf8:	681c      	ldr	r4, [r3, #0]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	6053      	str	r3, [r2, #4]
 8008bfe:	4421      	add	r1, r4
 8008c00:	6011      	str	r1, [r2, #0]
 8008c02:	e7da      	b.n	8008bba <_free_r+0x26>
 8008c04:	d902      	bls.n	8008c0c <_free_r+0x78>
 8008c06:	230c      	movs	r3, #12
 8008c08:	6003      	str	r3, [r0, #0]
 8008c0a:	e7d6      	b.n	8008bba <_free_r+0x26>
 8008c0c:	6825      	ldr	r5, [r4, #0]
 8008c0e:	1961      	adds	r1, r4, r5
 8008c10:	428b      	cmp	r3, r1
 8008c12:	bf04      	itt	eq
 8008c14:	6819      	ldreq	r1, [r3, #0]
 8008c16:	685b      	ldreq	r3, [r3, #4]
 8008c18:	6063      	str	r3, [r4, #4]
 8008c1a:	bf04      	itt	eq
 8008c1c:	1949      	addeq	r1, r1, r5
 8008c1e:	6021      	streq	r1, [r4, #0]
 8008c20:	6054      	str	r4, [r2, #4]
 8008c22:	e7ca      	b.n	8008bba <_free_r+0x26>
 8008c24:	b003      	add	sp, #12
 8008c26:	bd30      	pop	{r4, r5, pc}
 8008c28:	2000431c 	.word	0x2000431c

08008c2c <__ssputs_r>:
 8008c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c30:	688e      	ldr	r6, [r1, #8]
 8008c32:	429e      	cmp	r6, r3
 8008c34:	4682      	mov	sl, r0
 8008c36:	460c      	mov	r4, r1
 8008c38:	4690      	mov	r8, r2
 8008c3a:	461f      	mov	r7, r3
 8008c3c:	d838      	bhi.n	8008cb0 <__ssputs_r+0x84>
 8008c3e:	898a      	ldrh	r2, [r1, #12]
 8008c40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c44:	d032      	beq.n	8008cac <__ssputs_r+0x80>
 8008c46:	6825      	ldr	r5, [r4, #0]
 8008c48:	6909      	ldr	r1, [r1, #16]
 8008c4a:	eba5 0901 	sub.w	r9, r5, r1
 8008c4e:	6965      	ldr	r5, [r4, #20]
 8008c50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c58:	3301      	adds	r3, #1
 8008c5a:	444b      	add	r3, r9
 8008c5c:	106d      	asrs	r5, r5, #1
 8008c5e:	429d      	cmp	r5, r3
 8008c60:	bf38      	it	cc
 8008c62:	461d      	movcc	r5, r3
 8008c64:	0553      	lsls	r3, r2, #21
 8008c66:	d531      	bpl.n	8008ccc <__ssputs_r+0xa0>
 8008c68:	4629      	mov	r1, r5
 8008c6a:	f7ff fe79 	bl	8008960 <_malloc_r>
 8008c6e:	4606      	mov	r6, r0
 8008c70:	b950      	cbnz	r0, 8008c88 <__ssputs_r+0x5c>
 8008c72:	230c      	movs	r3, #12
 8008c74:	f8ca 3000 	str.w	r3, [sl]
 8008c78:	89a3      	ldrh	r3, [r4, #12]
 8008c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c7e:	81a3      	strh	r3, [r4, #12]
 8008c80:	f04f 30ff 	mov.w	r0, #4294967295
 8008c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c88:	6921      	ldr	r1, [r4, #16]
 8008c8a:	464a      	mov	r2, r9
 8008c8c:	f7ff fe32 	bl	80088f4 <memcpy>
 8008c90:	89a3      	ldrh	r3, [r4, #12]
 8008c92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c9a:	81a3      	strh	r3, [r4, #12]
 8008c9c:	6126      	str	r6, [r4, #16]
 8008c9e:	6165      	str	r5, [r4, #20]
 8008ca0:	444e      	add	r6, r9
 8008ca2:	eba5 0509 	sub.w	r5, r5, r9
 8008ca6:	6026      	str	r6, [r4, #0]
 8008ca8:	60a5      	str	r5, [r4, #8]
 8008caa:	463e      	mov	r6, r7
 8008cac:	42be      	cmp	r6, r7
 8008cae:	d900      	bls.n	8008cb2 <__ssputs_r+0x86>
 8008cb0:	463e      	mov	r6, r7
 8008cb2:	6820      	ldr	r0, [r4, #0]
 8008cb4:	4632      	mov	r2, r6
 8008cb6:	4641      	mov	r1, r8
 8008cb8:	f000 faa8 	bl	800920c <memmove>
 8008cbc:	68a3      	ldr	r3, [r4, #8]
 8008cbe:	1b9b      	subs	r3, r3, r6
 8008cc0:	60a3      	str	r3, [r4, #8]
 8008cc2:	6823      	ldr	r3, [r4, #0]
 8008cc4:	4433      	add	r3, r6
 8008cc6:	6023      	str	r3, [r4, #0]
 8008cc8:	2000      	movs	r0, #0
 8008cca:	e7db      	b.n	8008c84 <__ssputs_r+0x58>
 8008ccc:	462a      	mov	r2, r5
 8008cce:	f000 fab7 	bl	8009240 <_realloc_r>
 8008cd2:	4606      	mov	r6, r0
 8008cd4:	2800      	cmp	r0, #0
 8008cd6:	d1e1      	bne.n	8008c9c <__ssputs_r+0x70>
 8008cd8:	6921      	ldr	r1, [r4, #16]
 8008cda:	4650      	mov	r0, sl
 8008cdc:	f7ff ff5a 	bl	8008b94 <_free_r>
 8008ce0:	e7c7      	b.n	8008c72 <__ssputs_r+0x46>
	...

08008ce4 <_svfiprintf_r>:
 8008ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce8:	4698      	mov	r8, r3
 8008cea:	898b      	ldrh	r3, [r1, #12]
 8008cec:	061b      	lsls	r3, r3, #24
 8008cee:	b09d      	sub	sp, #116	; 0x74
 8008cf0:	4607      	mov	r7, r0
 8008cf2:	460d      	mov	r5, r1
 8008cf4:	4614      	mov	r4, r2
 8008cf6:	d50e      	bpl.n	8008d16 <_svfiprintf_r+0x32>
 8008cf8:	690b      	ldr	r3, [r1, #16]
 8008cfa:	b963      	cbnz	r3, 8008d16 <_svfiprintf_r+0x32>
 8008cfc:	2140      	movs	r1, #64	; 0x40
 8008cfe:	f7ff fe2f 	bl	8008960 <_malloc_r>
 8008d02:	6028      	str	r0, [r5, #0]
 8008d04:	6128      	str	r0, [r5, #16]
 8008d06:	b920      	cbnz	r0, 8008d12 <_svfiprintf_r+0x2e>
 8008d08:	230c      	movs	r3, #12
 8008d0a:	603b      	str	r3, [r7, #0]
 8008d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d10:	e0d1      	b.n	8008eb6 <_svfiprintf_r+0x1d2>
 8008d12:	2340      	movs	r3, #64	; 0x40
 8008d14:	616b      	str	r3, [r5, #20]
 8008d16:	2300      	movs	r3, #0
 8008d18:	9309      	str	r3, [sp, #36]	; 0x24
 8008d1a:	2320      	movs	r3, #32
 8008d1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d20:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d24:	2330      	movs	r3, #48	; 0x30
 8008d26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008ed0 <_svfiprintf_r+0x1ec>
 8008d2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d2e:	f04f 0901 	mov.w	r9, #1
 8008d32:	4623      	mov	r3, r4
 8008d34:	469a      	mov	sl, r3
 8008d36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d3a:	b10a      	cbz	r2, 8008d40 <_svfiprintf_r+0x5c>
 8008d3c:	2a25      	cmp	r2, #37	; 0x25
 8008d3e:	d1f9      	bne.n	8008d34 <_svfiprintf_r+0x50>
 8008d40:	ebba 0b04 	subs.w	fp, sl, r4
 8008d44:	d00b      	beq.n	8008d5e <_svfiprintf_r+0x7a>
 8008d46:	465b      	mov	r3, fp
 8008d48:	4622      	mov	r2, r4
 8008d4a:	4629      	mov	r1, r5
 8008d4c:	4638      	mov	r0, r7
 8008d4e:	f7ff ff6d 	bl	8008c2c <__ssputs_r>
 8008d52:	3001      	adds	r0, #1
 8008d54:	f000 80aa 	beq.w	8008eac <_svfiprintf_r+0x1c8>
 8008d58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d5a:	445a      	add	r2, fp
 8008d5c:	9209      	str	r2, [sp, #36]	; 0x24
 8008d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f000 80a2 	beq.w	8008eac <_svfiprintf_r+0x1c8>
 8008d68:	2300      	movs	r3, #0
 8008d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d72:	f10a 0a01 	add.w	sl, sl, #1
 8008d76:	9304      	str	r3, [sp, #16]
 8008d78:	9307      	str	r3, [sp, #28]
 8008d7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d7e:	931a      	str	r3, [sp, #104]	; 0x68
 8008d80:	4654      	mov	r4, sl
 8008d82:	2205      	movs	r2, #5
 8008d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d88:	4851      	ldr	r0, [pc, #324]	; (8008ed0 <_svfiprintf_r+0x1ec>)
 8008d8a:	f7f7 fa41 	bl	8000210 <memchr>
 8008d8e:	9a04      	ldr	r2, [sp, #16]
 8008d90:	b9d8      	cbnz	r0, 8008dca <_svfiprintf_r+0xe6>
 8008d92:	06d0      	lsls	r0, r2, #27
 8008d94:	bf44      	itt	mi
 8008d96:	2320      	movmi	r3, #32
 8008d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d9c:	0711      	lsls	r1, r2, #28
 8008d9e:	bf44      	itt	mi
 8008da0:	232b      	movmi	r3, #43	; 0x2b
 8008da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008da6:	f89a 3000 	ldrb.w	r3, [sl]
 8008daa:	2b2a      	cmp	r3, #42	; 0x2a
 8008dac:	d015      	beq.n	8008dda <_svfiprintf_r+0xf6>
 8008dae:	9a07      	ldr	r2, [sp, #28]
 8008db0:	4654      	mov	r4, sl
 8008db2:	2000      	movs	r0, #0
 8008db4:	f04f 0c0a 	mov.w	ip, #10
 8008db8:	4621      	mov	r1, r4
 8008dba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dbe:	3b30      	subs	r3, #48	; 0x30
 8008dc0:	2b09      	cmp	r3, #9
 8008dc2:	d94e      	bls.n	8008e62 <_svfiprintf_r+0x17e>
 8008dc4:	b1b0      	cbz	r0, 8008df4 <_svfiprintf_r+0x110>
 8008dc6:	9207      	str	r2, [sp, #28]
 8008dc8:	e014      	b.n	8008df4 <_svfiprintf_r+0x110>
 8008dca:	eba0 0308 	sub.w	r3, r0, r8
 8008dce:	fa09 f303 	lsl.w	r3, r9, r3
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	9304      	str	r3, [sp, #16]
 8008dd6:	46a2      	mov	sl, r4
 8008dd8:	e7d2      	b.n	8008d80 <_svfiprintf_r+0x9c>
 8008dda:	9b03      	ldr	r3, [sp, #12]
 8008ddc:	1d19      	adds	r1, r3, #4
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	9103      	str	r1, [sp, #12]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	bfbb      	ittet	lt
 8008de6:	425b      	neglt	r3, r3
 8008de8:	f042 0202 	orrlt.w	r2, r2, #2
 8008dec:	9307      	strge	r3, [sp, #28]
 8008dee:	9307      	strlt	r3, [sp, #28]
 8008df0:	bfb8      	it	lt
 8008df2:	9204      	strlt	r2, [sp, #16]
 8008df4:	7823      	ldrb	r3, [r4, #0]
 8008df6:	2b2e      	cmp	r3, #46	; 0x2e
 8008df8:	d10c      	bne.n	8008e14 <_svfiprintf_r+0x130>
 8008dfa:	7863      	ldrb	r3, [r4, #1]
 8008dfc:	2b2a      	cmp	r3, #42	; 0x2a
 8008dfe:	d135      	bne.n	8008e6c <_svfiprintf_r+0x188>
 8008e00:	9b03      	ldr	r3, [sp, #12]
 8008e02:	1d1a      	adds	r2, r3, #4
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	9203      	str	r2, [sp, #12]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	bfb8      	it	lt
 8008e0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e10:	3402      	adds	r4, #2
 8008e12:	9305      	str	r3, [sp, #20]
 8008e14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008ee0 <_svfiprintf_r+0x1fc>
 8008e18:	7821      	ldrb	r1, [r4, #0]
 8008e1a:	2203      	movs	r2, #3
 8008e1c:	4650      	mov	r0, sl
 8008e1e:	f7f7 f9f7 	bl	8000210 <memchr>
 8008e22:	b140      	cbz	r0, 8008e36 <_svfiprintf_r+0x152>
 8008e24:	2340      	movs	r3, #64	; 0x40
 8008e26:	eba0 000a 	sub.w	r0, r0, sl
 8008e2a:	fa03 f000 	lsl.w	r0, r3, r0
 8008e2e:	9b04      	ldr	r3, [sp, #16]
 8008e30:	4303      	orrs	r3, r0
 8008e32:	3401      	adds	r4, #1
 8008e34:	9304      	str	r3, [sp, #16]
 8008e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e3a:	4826      	ldr	r0, [pc, #152]	; (8008ed4 <_svfiprintf_r+0x1f0>)
 8008e3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e40:	2206      	movs	r2, #6
 8008e42:	f7f7 f9e5 	bl	8000210 <memchr>
 8008e46:	2800      	cmp	r0, #0
 8008e48:	d038      	beq.n	8008ebc <_svfiprintf_r+0x1d8>
 8008e4a:	4b23      	ldr	r3, [pc, #140]	; (8008ed8 <_svfiprintf_r+0x1f4>)
 8008e4c:	bb1b      	cbnz	r3, 8008e96 <_svfiprintf_r+0x1b2>
 8008e4e:	9b03      	ldr	r3, [sp, #12]
 8008e50:	3307      	adds	r3, #7
 8008e52:	f023 0307 	bic.w	r3, r3, #7
 8008e56:	3308      	adds	r3, #8
 8008e58:	9303      	str	r3, [sp, #12]
 8008e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e5c:	4433      	add	r3, r6
 8008e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e60:	e767      	b.n	8008d32 <_svfiprintf_r+0x4e>
 8008e62:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e66:	460c      	mov	r4, r1
 8008e68:	2001      	movs	r0, #1
 8008e6a:	e7a5      	b.n	8008db8 <_svfiprintf_r+0xd4>
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	3401      	adds	r4, #1
 8008e70:	9305      	str	r3, [sp, #20]
 8008e72:	4619      	mov	r1, r3
 8008e74:	f04f 0c0a 	mov.w	ip, #10
 8008e78:	4620      	mov	r0, r4
 8008e7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e7e:	3a30      	subs	r2, #48	; 0x30
 8008e80:	2a09      	cmp	r2, #9
 8008e82:	d903      	bls.n	8008e8c <_svfiprintf_r+0x1a8>
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d0c5      	beq.n	8008e14 <_svfiprintf_r+0x130>
 8008e88:	9105      	str	r1, [sp, #20]
 8008e8a:	e7c3      	b.n	8008e14 <_svfiprintf_r+0x130>
 8008e8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e90:	4604      	mov	r4, r0
 8008e92:	2301      	movs	r3, #1
 8008e94:	e7f0      	b.n	8008e78 <_svfiprintf_r+0x194>
 8008e96:	ab03      	add	r3, sp, #12
 8008e98:	9300      	str	r3, [sp, #0]
 8008e9a:	462a      	mov	r2, r5
 8008e9c:	4b0f      	ldr	r3, [pc, #60]	; (8008edc <_svfiprintf_r+0x1f8>)
 8008e9e:	a904      	add	r1, sp, #16
 8008ea0:	4638      	mov	r0, r7
 8008ea2:	f3af 8000 	nop.w
 8008ea6:	1c42      	adds	r2, r0, #1
 8008ea8:	4606      	mov	r6, r0
 8008eaa:	d1d6      	bne.n	8008e5a <_svfiprintf_r+0x176>
 8008eac:	89ab      	ldrh	r3, [r5, #12]
 8008eae:	065b      	lsls	r3, r3, #25
 8008eb0:	f53f af2c 	bmi.w	8008d0c <_svfiprintf_r+0x28>
 8008eb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008eb6:	b01d      	add	sp, #116	; 0x74
 8008eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ebc:	ab03      	add	r3, sp, #12
 8008ebe:	9300      	str	r3, [sp, #0]
 8008ec0:	462a      	mov	r2, r5
 8008ec2:	4b06      	ldr	r3, [pc, #24]	; (8008edc <_svfiprintf_r+0x1f8>)
 8008ec4:	a904      	add	r1, sp, #16
 8008ec6:	4638      	mov	r0, r7
 8008ec8:	f000 f87a 	bl	8008fc0 <_printf_i>
 8008ecc:	e7eb      	b.n	8008ea6 <_svfiprintf_r+0x1c2>
 8008ece:	bf00      	nop
 8008ed0:	0800ae9c 	.word	0x0800ae9c
 8008ed4:	0800aea6 	.word	0x0800aea6
 8008ed8:	00000000 	.word	0x00000000
 8008edc:	08008c2d 	.word	0x08008c2d
 8008ee0:	0800aea2 	.word	0x0800aea2

08008ee4 <_printf_common>:
 8008ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ee8:	4616      	mov	r6, r2
 8008eea:	4699      	mov	r9, r3
 8008eec:	688a      	ldr	r2, [r1, #8]
 8008eee:	690b      	ldr	r3, [r1, #16]
 8008ef0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	bfb8      	it	lt
 8008ef8:	4613      	movlt	r3, r2
 8008efa:	6033      	str	r3, [r6, #0]
 8008efc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f00:	4607      	mov	r7, r0
 8008f02:	460c      	mov	r4, r1
 8008f04:	b10a      	cbz	r2, 8008f0a <_printf_common+0x26>
 8008f06:	3301      	adds	r3, #1
 8008f08:	6033      	str	r3, [r6, #0]
 8008f0a:	6823      	ldr	r3, [r4, #0]
 8008f0c:	0699      	lsls	r1, r3, #26
 8008f0e:	bf42      	ittt	mi
 8008f10:	6833      	ldrmi	r3, [r6, #0]
 8008f12:	3302      	addmi	r3, #2
 8008f14:	6033      	strmi	r3, [r6, #0]
 8008f16:	6825      	ldr	r5, [r4, #0]
 8008f18:	f015 0506 	ands.w	r5, r5, #6
 8008f1c:	d106      	bne.n	8008f2c <_printf_common+0x48>
 8008f1e:	f104 0a19 	add.w	sl, r4, #25
 8008f22:	68e3      	ldr	r3, [r4, #12]
 8008f24:	6832      	ldr	r2, [r6, #0]
 8008f26:	1a9b      	subs	r3, r3, r2
 8008f28:	42ab      	cmp	r3, r5
 8008f2a:	dc26      	bgt.n	8008f7a <_printf_common+0x96>
 8008f2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f30:	1e13      	subs	r3, r2, #0
 8008f32:	6822      	ldr	r2, [r4, #0]
 8008f34:	bf18      	it	ne
 8008f36:	2301      	movne	r3, #1
 8008f38:	0692      	lsls	r2, r2, #26
 8008f3a:	d42b      	bmi.n	8008f94 <_printf_common+0xb0>
 8008f3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f40:	4649      	mov	r1, r9
 8008f42:	4638      	mov	r0, r7
 8008f44:	47c0      	blx	r8
 8008f46:	3001      	adds	r0, #1
 8008f48:	d01e      	beq.n	8008f88 <_printf_common+0xa4>
 8008f4a:	6823      	ldr	r3, [r4, #0]
 8008f4c:	68e5      	ldr	r5, [r4, #12]
 8008f4e:	6832      	ldr	r2, [r6, #0]
 8008f50:	f003 0306 	and.w	r3, r3, #6
 8008f54:	2b04      	cmp	r3, #4
 8008f56:	bf08      	it	eq
 8008f58:	1aad      	subeq	r5, r5, r2
 8008f5a:	68a3      	ldr	r3, [r4, #8]
 8008f5c:	6922      	ldr	r2, [r4, #16]
 8008f5e:	bf0c      	ite	eq
 8008f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f64:	2500      	movne	r5, #0
 8008f66:	4293      	cmp	r3, r2
 8008f68:	bfc4      	itt	gt
 8008f6a:	1a9b      	subgt	r3, r3, r2
 8008f6c:	18ed      	addgt	r5, r5, r3
 8008f6e:	2600      	movs	r6, #0
 8008f70:	341a      	adds	r4, #26
 8008f72:	42b5      	cmp	r5, r6
 8008f74:	d11a      	bne.n	8008fac <_printf_common+0xc8>
 8008f76:	2000      	movs	r0, #0
 8008f78:	e008      	b.n	8008f8c <_printf_common+0xa8>
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	4652      	mov	r2, sl
 8008f7e:	4649      	mov	r1, r9
 8008f80:	4638      	mov	r0, r7
 8008f82:	47c0      	blx	r8
 8008f84:	3001      	adds	r0, #1
 8008f86:	d103      	bne.n	8008f90 <_printf_common+0xac>
 8008f88:	f04f 30ff 	mov.w	r0, #4294967295
 8008f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f90:	3501      	adds	r5, #1
 8008f92:	e7c6      	b.n	8008f22 <_printf_common+0x3e>
 8008f94:	18e1      	adds	r1, r4, r3
 8008f96:	1c5a      	adds	r2, r3, #1
 8008f98:	2030      	movs	r0, #48	; 0x30
 8008f9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f9e:	4422      	add	r2, r4
 8008fa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008fa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008fa8:	3302      	adds	r3, #2
 8008faa:	e7c7      	b.n	8008f3c <_printf_common+0x58>
 8008fac:	2301      	movs	r3, #1
 8008fae:	4622      	mov	r2, r4
 8008fb0:	4649      	mov	r1, r9
 8008fb2:	4638      	mov	r0, r7
 8008fb4:	47c0      	blx	r8
 8008fb6:	3001      	adds	r0, #1
 8008fb8:	d0e6      	beq.n	8008f88 <_printf_common+0xa4>
 8008fba:	3601      	adds	r6, #1
 8008fbc:	e7d9      	b.n	8008f72 <_printf_common+0x8e>
	...

08008fc0 <_printf_i>:
 8008fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc4:	7e0f      	ldrb	r7, [r1, #24]
 8008fc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008fc8:	2f78      	cmp	r7, #120	; 0x78
 8008fca:	4691      	mov	r9, r2
 8008fcc:	4680      	mov	r8, r0
 8008fce:	460c      	mov	r4, r1
 8008fd0:	469a      	mov	sl, r3
 8008fd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008fd6:	d807      	bhi.n	8008fe8 <_printf_i+0x28>
 8008fd8:	2f62      	cmp	r7, #98	; 0x62
 8008fda:	d80a      	bhi.n	8008ff2 <_printf_i+0x32>
 8008fdc:	2f00      	cmp	r7, #0
 8008fde:	f000 80d8 	beq.w	8009192 <_printf_i+0x1d2>
 8008fe2:	2f58      	cmp	r7, #88	; 0x58
 8008fe4:	f000 80a3 	beq.w	800912e <_printf_i+0x16e>
 8008fe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ff0:	e03a      	b.n	8009068 <_printf_i+0xa8>
 8008ff2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ff6:	2b15      	cmp	r3, #21
 8008ff8:	d8f6      	bhi.n	8008fe8 <_printf_i+0x28>
 8008ffa:	a101      	add	r1, pc, #4	; (adr r1, 8009000 <_printf_i+0x40>)
 8008ffc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009000:	08009059 	.word	0x08009059
 8009004:	0800906d 	.word	0x0800906d
 8009008:	08008fe9 	.word	0x08008fe9
 800900c:	08008fe9 	.word	0x08008fe9
 8009010:	08008fe9 	.word	0x08008fe9
 8009014:	08008fe9 	.word	0x08008fe9
 8009018:	0800906d 	.word	0x0800906d
 800901c:	08008fe9 	.word	0x08008fe9
 8009020:	08008fe9 	.word	0x08008fe9
 8009024:	08008fe9 	.word	0x08008fe9
 8009028:	08008fe9 	.word	0x08008fe9
 800902c:	08009179 	.word	0x08009179
 8009030:	0800909d 	.word	0x0800909d
 8009034:	0800915b 	.word	0x0800915b
 8009038:	08008fe9 	.word	0x08008fe9
 800903c:	08008fe9 	.word	0x08008fe9
 8009040:	0800919b 	.word	0x0800919b
 8009044:	08008fe9 	.word	0x08008fe9
 8009048:	0800909d 	.word	0x0800909d
 800904c:	08008fe9 	.word	0x08008fe9
 8009050:	08008fe9 	.word	0x08008fe9
 8009054:	08009163 	.word	0x08009163
 8009058:	682b      	ldr	r3, [r5, #0]
 800905a:	1d1a      	adds	r2, r3, #4
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	602a      	str	r2, [r5, #0]
 8009060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009064:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009068:	2301      	movs	r3, #1
 800906a:	e0a3      	b.n	80091b4 <_printf_i+0x1f4>
 800906c:	6820      	ldr	r0, [r4, #0]
 800906e:	6829      	ldr	r1, [r5, #0]
 8009070:	0606      	lsls	r6, r0, #24
 8009072:	f101 0304 	add.w	r3, r1, #4
 8009076:	d50a      	bpl.n	800908e <_printf_i+0xce>
 8009078:	680e      	ldr	r6, [r1, #0]
 800907a:	602b      	str	r3, [r5, #0]
 800907c:	2e00      	cmp	r6, #0
 800907e:	da03      	bge.n	8009088 <_printf_i+0xc8>
 8009080:	232d      	movs	r3, #45	; 0x2d
 8009082:	4276      	negs	r6, r6
 8009084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009088:	485e      	ldr	r0, [pc, #376]	; (8009204 <_printf_i+0x244>)
 800908a:	230a      	movs	r3, #10
 800908c:	e019      	b.n	80090c2 <_printf_i+0x102>
 800908e:	680e      	ldr	r6, [r1, #0]
 8009090:	602b      	str	r3, [r5, #0]
 8009092:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009096:	bf18      	it	ne
 8009098:	b236      	sxthne	r6, r6
 800909a:	e7ef      	b.n	800907c <_printf_i+0xbc>
 800909c:	682b      	ldr	r3, [r5, #0]
 800909e:	6820      	ldr	r0, [r4, #0]
 80090a0:	1d19      	adds	r1, r3, #4
 80090a2:	6029      	str	r1, [r5, #0]
 80090a4:	0601      	lsls	r1, r0, #24
 80090a6:	d501      	bpl.n	80090ac <_printf_i+0xec>
 80090a8:	681e      	ldr	r6, [r3, #0]
 80090aa:	e002      	b.n	80090b2 <_printf_i+0xf2>
 80090ac:	0646      	lsls	r6, r0, #25
 80090ae:	d5fb      	bpl.n	80090a8 <_printf_i+0xe8>
 80090b0:	881e      	ldrh	r6, [r3, #0]
 80090b2:	4854      	ldr	r0, [pc, #336]	; (8009204 <_printf_i+0x244>)
 80090b4:	2f6f      	cmp	r7, #111	; 0x6f
 80090b6:	bf0c      	ite	eq
 80090b8:	2308      	moveq	r3, #8
 80090ba:	230a      	movne	r3, #10
 80090bc:	2100      	movs	r1, #0
 80090be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80090c2:	6865      	ldr	r5, [r4, #4]
 80090c4:	60a5      	str	r5, [r4, #8]
 80090c6:	2d00      	cmp	r5, #0
 80090c8:	bfa2      	ittt	ge
 80090ca:	6821      	ldrge	r1, [r4, #0]
 80090cc:	f021 0104 	bicge.w	r1, r1, #4
 80090d0:	6021      	strge	r1, [r4, #0]
 80090d2:	b90e      	cbnz	r6, 80090d8 <_printf_i+0x118>
 80090d4:	2d00      	cmp	r5, #0
 80090d6:	d04d      	beq.n	8009174 <_printf_i+0x1b4>
 80090d8:	4615      	mov	r5, r2
 80090da:	fbb6 f1f3 	udiv	r1, r6, r3
 80090de:	fb03 6711 	mls	r7, r3, r1, r6
 80090e2:	5dc7      	ldrb	r7, [r0, r7]
 80090e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80090e8:	4637      	mov	r7, r6
 80090ea:	42bb      	cmp	r3, r7
 80090ec:	460e      	mov	r6, r1
 80090ee:	d9f4      	bls.n	80090da <_printf_i+0x11a>
 80090f0:	2b08      	cmp	r3, #8
 80090f2:	d10b      	bne.n	800910c <_printf_i+0x14c>
 80090f4:	6823      	ldr	r3, [r4, #0]
 80090f6:	07de      	lsls	r6, r3, #31
 80090f8:	d508      	bpl.n	800910c <_printf_i+0x14c>
 80090fa:	6923      	ldr	r3, [r4, #16]
 80090fc:	6861      	ldr	r1, [r4, #4]
 80090fe:	4299      	cmp	r1, r3
 8009100:	bfde      	ittt	le
 8009102:	2330      	movle	r3, #48	; 0x30
 8009104:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009108:	f105 35ff 	addle.w	r5, r5, #4294967295
 800910c:	1b52      	subs	r2, r2, r5
 800910e:	6122      	str	r2, [r4, #16]
 8009110:	f8cd a000 	str.w	sl, [sp]
 8009114:	464b      	mov	r3, r9
 8009116:	aa03      	add	r2, sp, #12
 8009118:	4621      	mov	r1, r4
 800911a:	4640      	mov	r0, r8
 800911c:	f7ff fee2 	bl	8008ee4 <_printf_common>
 8009120:	3001      	adds	r0, #1
 8009122:	d14c      	bne.n	80091be <_printf_i+0x1fe>
 8009124:	f04f 30ff 	mov.w	r0, #4294967295
 8009128:	b004      	add	sp, #16
 800912a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800912e:	4835      	ldr	r0, [pc, #212]	; (8009204 <_printf_i+0x244>)
 8009130:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009134:	6829      	ldr	r1, [r5, #0]
 8009136:	6823      	ldr	r3, [r4, #0]
 8009138:	f851 6b04 	ldr.w	r6, [r1], #4
 800913c:	6029      	str	r1, [r5, #0]
 800913e:	061d      	lsls	r5, r3, #24
 8009140:	d514      	bpl.n	800916c <_printf_i+0x1ac>
 8009142:	07df      	lsls	r7, r3, #31
 8009144:	bf44      	itt	mi
 8009146:	f043 0320 	orrmi.w	r3, r3, #32
 800914a:	6023      	strmi	r3, [r4, #0]
 800914c:	b91e      	cbnz	r6, 8009156 <_printf_i+0x196>
 800914e:	6823      	ldr	r3, [r4, #0]
 8009150:	f023 0320 	bic.w	r3, r3, #32
 8009154:	6023      	str	r3, [r4, #0]
 8009156:	2310      	movs	r3, #16
 8009158:	e7b0      	b.n	80090bc <_printf_i+0xfc>
 800915a:	6823      	ldr	r3, [r4, #0]
 800915c:	f043 0320 	orr.w	r3, r3, #32
 8009160:	6023      	str	r3, [r4, #0]
 8009162:	2378      	movs	r3, #120	; 0x78
 8009164:	4828      	ldr	r0, [pc, #160]	; (8009208 <_printf_i+0x248>)
 8009166:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800916a:	e7e3      	b.n	8009134 <_printf_i+0x174>
 800916c:	0659      	lsls	r1, r3, #25
 800916e:	bf48      	it	mi
 8009170:	b2b6      	uxthmi	r6, r6
 8009172:	e7e6      	b.n	8009142 <_printf_i+0x182>
 8009174:	4615      	mov	r5, r2
 8009176:	e7bb      	b.n	80090f0 <_printf_i+0x130>
 8009178:	682b      	ldr	r3, [r5, #0]
 800917a:	6826      	ldr	r6, [r4, #0]
 800917c:	6961      	ldr	r1, [r4, #20]
 800917e:	1d18      	adds	r0, r3, #4
 8009180:	6028      	str	r0, [r5, #0]
 8009182:	0635      	lsls	r5, r6, #24
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	d501      	bpl.n	800918c <_printf_i+0x1cc>
 8009188:	6019      	str	r1, [r3, #0]
 800918a:	e002      	b.n	8009192 <_printf_i+0x1d2>
 800918c:	0670      	lsls	r0, r6, #25
 800918e:	d5fb      	bpl.n	8009188 <_printf_i+0x1c8>
 8009190:	8019      	strh	r1, [r3, #0]
 8009192:	2300      	movs	r3, #0
 8009194:	6123      	str	r3, [r4, #16]
 8009196:	4615      	mov	r5, r2
 8009198:	e7ba      	b.n	8009110 <_printf_i+0x150>
 800919a:	682b      	ldr	r3, [r5, #0]
 800919c:	1d1a      	adds	r2, r3, #4
 800919e:	602a      	str	r2, [r5, #0]
 80091a0:	681d      	ldr	r5, [r3, #0]
 80091a2:	6862      	ldr	r2, [r4, #4]
 80091a4:	2100      	movs	r1, #0
 80091a6:	4628      	mov	r0, r5
 80091a8:	f7f7 f832 	bl	8000210 <memchr>
 80091ac:	b108      	cbz	r0, 80091b2 <_printf_i+0x1f2>
 80091ae:	1b40      	subs	r0, r0, r5
 80091b0:	6060      	str	r0, [r4, #4]
 80091b2:	6863      	ldr	r3, [r4, #4]
 80091b4:	6123      	str	r3, [r4, #16]
 80091b6:	2300      	movs	r3, #0
 80091b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091bc:	e7a8      	b.n	8009110 <_printf_i+0x150>
 80091be:	6923      	ldr	r3, [r4, #16]
 80091c0:	462a      	mov	r2, r5
 80091c2:	4649      	mov	r1, r9
 80091c4:	4640      	mov	r0, r8
 80091c6:	47d0      	blx	sl
 80091c8:	3001      	adds	r0, #1
 80091ca:	d0ab      	beq.n	8009124 <_printf_i+0x164>
 80091cc:	6823      	ldr	r3, [r4, #0]
 80091ce:	079b      	lsls	r3, r3, #30
 80091d0:	d413      	bmi.n	80091fa <_printf_i+0x23a>
 80091d2:	68e0      	ldr	r0, [r4, #12]
 80091d4:	9b03      	ldr	r3, [sp, #12]
 80091d6:	4298      	cmp	r0, r3
 80091d8:	bfb8      	it	lt
 80091da:	4618      	movlt	r0, r3
 80091dc:	e7a4      	b.n	8009128 <_printf_i+0x168>
 80091de:	2301      	movs	r3, #1
 80091e0:	4632      	mov	r2, r6
 80091e2:	4649      	mov	r1, r9
 80091e4:	4640      	mov	r0, r8
 80091e6:	47d0      	blx	sl
 80091e8:	3001      	adds	r0, #1
 80091ea:	d09b      	beq.n	8009124 <_printf_i+0x164>
 80091ec:	3501      	adds	r5, #1
 80091ee:	68e3      	ldr	r3, [r4, #12]
 80091f0:	9903      	ldr	r1, [sp, #12]
 80091f2:	1a5b      	subs	r3, r3, r1
 80091f4:	42ab      	cmp	r3, r5
 80091f6:	dcf2      	bgt.n	80091de <_printf_i+0x21e>
 80091f8:	e7eb      	b.n	80091d2 <_printf_i+0x212>
 80091fa:	2500      	movs	r5, #0
 80091fc:	f104 0619 	add.w	r6, r4, #25
 8009200:	e7f5      	b.n	80091ee <_printf_i+0x22e>
 8009202:	bf00      	nop
 8009204:	0800aead 	.word	0x0800aead
 8009208:	0800aebe 	.word	0x0800aebe

0800920c <memmove>:
 800920c:	4288      	cmp	r0, r1
 800920e:	b510      	push	{r4, lr}
 8009210:	eb01 0402 	add.w	r4, r1, r2
 8009214:	d902      	bls.n	800921c <memmove+0x10>
 8009216:	4284      	cmp	r4, r0
 8009218:	4623      	mov	r3, r4
 800921a:	d807      	bhi.n	800922c <memmove+0x20>
 800921c:	1e43      	subs	r3, r0, #1
 800921e:	42a1      	cmp	r1, r4
 8009220:	d008      	beq.n	8009234 <memmove+0x28>
 8009222:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009226:	f803 2f01 	strb.w	r2, [r3, #1]!
 800922a:	e7f8      	b.n	800921e <memmove+0x12>
 800922c:	4402      	add	r2, r0
 800922e:	4601      	mov	r1, r0
 8009230:	428a      	cmp	r2, r1
 8009232:	d100      	bne.n	8009236 <memmove+0x2a>
 8009234:	bd10      	pop	{r4, pc}
 8009236:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800923a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800923e:	e7f7      	b.n	8009230 <memmove+0x24>

08009240 <_realloc_r>:
 8009240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009244:	4680      	mov	r8, r0
 8009246:	4614      	mov	r4, r2
 8009248:	460e      	mov	r6, r1
 800924a:	b921      	cbnz	r1, 8009256 <_realloc_r+0x16>
 800924c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009250:	4611      	mov	r1, r2
 8009252:	f7ff bb85 	b.w	8008960 <_malloc_r>
 8009256:	b92a      	cbnz	r2, 8009264 <_realloc_r+0x24>
 8009258:	f7ff fc9c 	bl	8008b94 <_free_r>
 800925c:	4625      	mov	r5, r4
 800925e:	4628      	mov	r0, r5
 8009260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009264:	f000 f81b 	bl	800929e <_malloc_usable_size_r>
 8009268:	4284      	cmp	r4, r0
 800926a:	4607      	mov	r7, r0
 800926c:	d802      	bhi.n	8009274 <_realloc_r+0x34>
 800926e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009272:	d812      	bhi.n	800929a <_realloc_r+0x5a>
 8009274:	4621      	mov	r1, r4
 8009276:	4640      	mov	r0, r8
 8009278:	f7ff fb72 	bl	8008960 <_malloc_r>
 800927c:	4605      	mov	r5, r0
 800927e:	2800      	cmp	r0, #0
 8009280:	d0ed      	beq.n	800925e <_realloc_r+0x1e>
 8009282:	42bc      	cmp	r4, r7
 8009284:	4622      	mov	r2, r4
 8009286:	4631      	mov	r1, r6
 8009288:	bf28      	it	cs
 800928a:	463a      	movcs	r2, r7
 800928c:	f7ff fb32 	bl	80088f4 <memcpy>
 8009290:	4631      	mov	r1, r6
 8009292:	4640      	mov	r0, r8
 8009294:	f7ff fc7e 	bl	8008b94 <_free_r>
 8009298:	e7e1      	b.n	800925e <_realloc_r+0x1e>
 800929a:	4635      	mov	r5, r6
 800929c:	e7df      	b.n	800925e <_realloc_r+0x1e>

0800929e <_malloc_usable_size_r>:
 800929e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092a2:	1f18      	subs	r0, r3, #4
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	bfbc      	itt	lt
 80092a8:	580b      	ldrlt	r3, [r1, r0]
 80092aa:	18c0      	addlt	r0, r0, r3
 80092ac:	4770      	bx	lr
	...

080092b0 <_init>:
 80092b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b2:	bf00      	nop
 80092b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092b6:	bc08      	pop	{r3}
 80092b8:	469e      	mov	lr, r3
 80092ba:	4770      	bx	lr

080092bc <_fini>:
 80092bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092be:	bf00      	nop
 80092c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092c2:	bc08      	pop	{r3}
 80092c4:	469e      	mov	lr, r3
 80092c6:	4770      	bx	lr
