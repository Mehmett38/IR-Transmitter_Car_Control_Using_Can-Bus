
001_EmbeddedF33.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a3c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004bc4  08004bc4  00014bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bfc  08004bfc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004bfc  08004bfc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bfc  08004bfc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bfc  08004bfc  00014bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c00  08004c00  00014c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000019c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001a8  200001a8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000117c7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002278  00000000  00000000  00031803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef0  00000000  00000000  00033a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e18  00000000  00000000  00034970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021181  00000000  00000000  00035788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000122ba  00000000  00000000  00056909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c64d0  00000000  00000000  00068bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012f093  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ec0  00000000  00000000  0012f0e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004bac 	.word	0x08004bac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004bac 	.word	0x08004bac

080001c8 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 80001ce:	2300      	movs	r3, #0
 80001d0:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 80001d2:	2300      	movs	r3, #0
 80001d4:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 80001d6:	2300      	movs	r3, #0
 80001d8:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 80001da:	2300      	movs	r3, #0
 80001dc:	71fb      	strb	r3, [r7, #7]
  
  RXM1reg.RXM1SIDH = 0x00;
 80001de:	2300      	movs	r3, #0
 80001e0:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 80001e2:	2300      	movs	r3, #0
 80001e4:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 80001e6:	2300      	movs	r3, #0
 80001e8:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 80001ea:	2300      	movs	r3, #0
 80001ec:	70fb      	strb	r3, [r7, #3]
  
  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;      
 80001ee:	2300      	movs	r3, #0
 80001f0:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 80001f2:	2300      	movs	r3, #0
 80001f4:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 80001f6:	2300      	movs	r3, #0
 80001f8:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 80001fa:	2300      	movs	r3, #0
 80001fc:	77fb      	strb	r3, [r7, #31]
  
  RXF1reg.RXF1SIDH = 0x00;
 80001fe:	2300      	movs	r3, #0
 8000200:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8000202:	2308      	movs	r3, #8
 8000204:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 8000206:	2300      	movs	r3, #0
 8000208:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 800020a:	2300      	movs	r3, #0
 800020c:	76fb      	strb	r3, [r7, #27]
  
  RXF2reg.RXF2SIDH = 0x00;
 800020e:	2300      	movs	r3, #0
 8000210:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8000212:	2300      	movs	r3, #0
 8000214:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8000216:	2300      	movs	r3, #0
 8000218:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 800021a:	2300      	movs	r3, #0
 800021c:	75fb      	strb	r3, [r7, #23]
  
  RXF3reg.RXF3SIDH = 0x00;
 800021e:	2300      	movs	r3, #0
 8000220:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8000222:	2300      	movs	r3, #0
 8000224:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8000226:	2300      	movs	r3, #0
 8000228:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 800022a:	2300      	movs	r3, #0
 800022c:	74fb      	strb	r3, [r7, #19]
  
  RXF4reg.RXF4SIDH = 0x00;
 800022e:	2300      	movs	r3, #0
 8000230:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8000232:	2300      	movs	r3, #0
 8000234:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8000236:	2300      	movs	r3, #0
 8000238:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 800023a:	2300      	movs	r3, #0
 800023c:	73fb      	strb	r3, [r7, #15]
  
  RXF5reg.RXF5SIDH = 0x00;
 800023e:	2300      	movs	r3, #0
 8000240:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 8000242:	2308      	movs	r3, #8
 8000244:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8000246:	2300      	movs	r3, #0
 8000248:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 800024a:	2300      	movs	r3, #0
 800024c:	72fb      	strb	r3, [r7, #11]
  
  /* Intialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
 800024e:	f000 fa9d 	bl	800078c <MCP2515_Initialize>
 8000252:	4603      	mov	r3, r0
 8000254:	f083 0301 	eor.w	r3, r3, #1
 8000258:	b2db      	uxtb	r3, r3
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <CANSPI_Initialize+0x9a>
  {
    return false;
 800025e:	2300      	movs	r3, #0
 8000260:	e05e      	b.n	8000320 <CANSPI_Initialize+0x158>
  }
    
  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
 8000262:	f000 fab5 	bl	80007d0 <MCP2515_SetConfigMode>
 8000266:	4603      	mov	r3, r0
 8000268:	f083 0301 	eor.w	r3, r3, #1
 800026c:	b2db      	uxtb	r3, r3
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <CANSPI_Initialize+0xae>
  {
    return false;
 8000272:	2300      	movs	r3, #0
 8000274:	e054      	b.n	8000320 <CANSPI_Initialize+0x158>
  }
  
  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	461a      	mov	r2, r3
 800027a:	2123      	movs	r1, #35	; 0x23
 800027c:	2020      	movs	r0, #32
 800027e:	f000 fb4b 	bl	8000918 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000282:	463b      	mov	r3, r7
 8000284:	461a      	mov	r2, r3
 8000286:	2127      	movs	r1, #39	; 0x27
 8000288:	2024      	movs	r0, #36	; 0x24
 800028a:	f000 fb45 	bl	8000918 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 800028e:	f107 031c 	add.w	r3, r7, #28
 8000292:	461a      	mov	r2, r3
 8000294:	2103      	movs	r1, #3
 8000296:	2000      	movs	r0, #0
 8000298:	f000 fb3e 	bl	8000918 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 800029c:	f107 0318 	add.w	r3, r7, #24
 80002a0:	461a      	mov	r2, r3
 80002a2:	2107      	movs	r1, #7
 80002a4:	2004      	movs	r0, #4
 80002a6:	f000 fb37 	bl	8000918 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80002aa:	f107 0314 	add.w	r3, r7, #20
 80002ae:	461a      	mov	r2, r3
 80002b0:	210b      	movs	r1, #11
 80002b2:	2008      	movs	r0, #8
 80002b4:	f000 fb30 	bl	8000918 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 80002b8:	f107 0310 	add.w	r3, r7, #16
 80002bc:	461a      	mov	r2, r3
 80002be:	2113      	movs	r1, #19
 80002c0:	2010      	movs	r0, #16
 80002c2:	f000 fb29 	bl	8000918 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 80002c6:	f107 030c 	add.w	r3, r7, #12
 80002ca:	461a      	mov	r2, r3
 80002cc:	2117      	movs	r1, #23
 80002ce:	2014      	movs	r0, #20
 80002d0:	f000 fb22 	bl	8000918 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 80002d4:	f107 0308 	add.w	r3, r7, #8
 80002d8:	461a      	mov	r2, r3
 80002da:	211b      	movs	r1, #27
 80002dc:	2018      	movs	r0, #24
 80002de:	f000 fb1b 	bl	8000918 <MCP2515_WriteByteSequence>
  
  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 80002e2:	2104      	movs	r1, #4
 80002e4:	2060      	movs	r0, #96	; 0x60
 80002e6:	f000 faf3 	bl	80008d0 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 80002ea:	2101      	movs	r1, #1
 80002ec:	2070      	movs	r0, #112	; 0x70
 80002ee:	f000 faef 	bl	80008d0 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 80002f2:	2100      	movs	r1, #0
 80002f4:	202a      	movs	r0, #42	; 0x2a
 80002f6:	f000 faeb 	bl	80008d0 <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */  
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 80002fa:	21e5      	movs	r1, #229	; 0xe5
 80002fc:	2029      	movs	r0, #41	; 0x29
 80002fe:	f000 fae7 	bl	80008d0 <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 8000302:	2183      	movs	r1, #131	; 0x83
 8000304:	2028      	movs	r0, #40	; 0x28
 8000306:	f000 fae3 	bl	80008d0 <MCP2515_WriteByte>
  
  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 800030a:	f000 fa7f 	bl	800080c <MCP2515_SetNormalMode>
 800030e:	4603      	mov	r3, r0
 8000310:	f083 0301 	eor.w	r3, r3, #1
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <CANSPI_Initialize+0x156>
    return false;
 800031a:	2300      	movs	r3, #0
 800031c:	e000      	b.n	8000320 <CANSPI_Initialize+0x158>
  
  return true;
 800031e:	2301      	movs	r3, #1
}
 8000320:	4618      	mov	r0, r3
 8000322:	3720      	adds	r7, #32
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}

08000328 <CANSPI_Transmit>:

/* Transmit CAN message */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg) 
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000330:	2300      	movs	r3, #0
 8000332:	73fb      	strb	r3, [r7, #15]
  
  idReg.tempSIDH = 0;
 8000334:	4b36      	ldr	r3, [pc, #216]	; (8000410 <CANSPI_Transmit+0xe8>)
 8000336:	2200      	movs	r2, #0
 8000338:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 800033a:	4b35      	ldr	r3, [pc, #212]	; (8000410 <CANSPI_Transmit+0xe8>)
 800033c:	2200      	movs	r2, #0
 800033e:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000340:	4b33      	ldr	r3, [pc, #204]	; (8000410 <CANSPI_Transmit+0xe8>)
 8000342:	2200      	movs	r2, #0
 8000344:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 8000346:	4b32      	ldr	r3, [pc, #200]	; (8000410 <CANSPI_Transmit+0xe8>)
 8000348:	2200      	movs	r2, #0
 800034a:	70da      	strb	r2, [r3, #3]
  
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 800034c:	f000 fb52 	bl	80009f4 <MCP2515_ReadStatus>
 8000350:	4603      	mov	r3, r0
 8000352:	461a      	mov	r2, r3
 8000354:	4b2f      	ldr	r3, [pc, #188]	; (8000414 <CANSPI_Transmit+0xec>)
 8000356:	701a      	strb	r2, [r3, #0]
  
  /* Finding empty buffer */
  if (ctrlStatus.TXB0REQ != 1)
 8000358:	4b2e      	ldr	r3, [pc, #184]	; (8000414 <CANSPI_Transmit+0xec>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	f003 0304 	and.w	r3, r3, #4
 8000360:	b2db      	uxtb	r3, r3
 8000362:	2b00      	cmp	r3, #0
 8000364:	d115      	bne.n	8000392 <CANSPI_Transmit+0x6a>
  {
    /* convert CAN ID for register */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	6858      	ldr	r0, [r3, #4]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	4a28      	ldr	r2, [pc, #160]	; (8000410 <CANSPI_Transmit+0xe8>)
 8000370:	4619      	mov	r1, r3
 8000372:	f000 f928 	bl	80005c6 <convertCANid2Reg>
    
    /* Load data to Tx Buffer */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	7a1a      	ldrb	r2, [r3, #8]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	3309      	adds	r3, #9
 800037e:	4924      	ldr	r1, [pc, #144]	; (8000410 <CANSPI_Transmit+0xe8>)
 8000380:	2040      	movs	r0, #64	; 0x40
 8000382:	f000 faf3 	bl	800096c <MCP2515_LoadTxSequence>
    
    /* Request to transmit */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 8000386:	2081      	movs	r0, #129	; 0x81
 8000388:	f000 fb1a 	bl	80009c0 <MCP2515_RequestToSend>
    
    returnValue = 1;
 800038c:	2301      	movs	r3, #1
 800038e:	73fb      	strb	r3, [r7, #15]
 8000390:	e038      	b.n	8000404 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 8000392:	4b20      	ldr	r3, [pc, #128]	; (8000414 <CANSPI_Transmit+0xec>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	f003 0310 	and.w	r3, r3, #16
 800039a:	b2db      	uxtb	r3, r3
 800039c:	2b00      	cmp	r3, #0
 800039e:	d115      	bne.n	80003cc <CANSPI_Transmit+0xa4>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	6858      	ldr	r0, [r3, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	4a19      	ldr	r2, [pc, #100]	; (8000410 <CANSPI_Transmit+0xe8>)
 80003aa:	4619      	mov	r1, r3
 80003ac:	f000 f90b 	bl	80005c6 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	7a1a      	ldrb	r2, [r3, #8]
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	3309      	adds	r3, #9
 80003b8:	4915      	ldr	r1, [pc, #84]	; (8000410 <CANSPI_Transmit+0xe8>)
 80003ba:	2042      	movs	r0, #66	; 0x42
 80003bc:	f000 fad6 	bl	800096c <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 80003c0:	2082      	movs	r0, #130	; 0x82
 80003c2:	f000 fafd 	bl	80009c0 <MCP2515_RequestToSend>
    
    returnValue = 1;
 80003c6:	2301      	movs	r3, #1
 80003c8:	73fb      	strb	r3, [r7, #15]
 80003ca:	e01b      	b.n	8000404 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 80003cc:	4b11      	ldr	r3, [pc, #68]	; (8000414 <CANSPI_Transmit+0xec>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d114      	bne.n	8000404 <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	6858      	ldr	r0, [r3, #4]
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	4a0b      	ldr	r2, [pc, #44]	; (8000410 <CANSPI_Transmit+0xe8>)
 80003e4:	4619      	mov	r1, r3
 80003e6:	f000 f8ee 	bl	80005c6 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	7a1a      	ldrb	r2, [r3, #8]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	3309      	adds	r3, #9
 80003f2:	4907      	ldr	r1, [pc, #28]	; (8000410 <CANSPI_Transmit+0xe8>)
 80003f4:	2044      	movs	r0, #68	; 0x44
 80003f6:	f000 fab9 	bl	800096c <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 80003fa:	2084      	movs	r0, #132	; 0x84
 80003fc:	f000 fae0 	bl	80009c0 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000400:	2301      	movs	r3, #1
 8000402:	73fb      	strb	r3, [r7, #15]
  }
  
  return (returnValue);
 8000404:	7bfb      	ldrb	r3, [r7, #15]
}
 8000406:	4618      	mov	r0, r3
 8000408:	3710      	adds	r7, #16
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	2000002c 	.word	0x2000002c
 8000414:	20000028 	.word	0x20000028

08000418 <CANSPI_Receive>:

/* Receive CAN message */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg) 
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b088      	sub	sp, #32
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000420:	2300      	movs	r3, #0
 8000422:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 8000424:	f000 fb02 	bl	8000a2c <MCP2515_GetRxStatus>
 8000428:	4603      	mov	r3, r0
 800042a:	733b      	strb	r3, [r7, #12]
  
  /* Check receive buffer */
  if (rxStatus.rxBuffer != 0)
 800042c:	7b3b      	ldrb	r3, [r7, #12]
 800042e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000432:	b2db      	uxtb	r3, r3
 8000434:	2b00      	cmp	r3, #0
 8000436:	d066      	beq.n	8000506 <CANSPI_Receive+0xee>
  {
    /* finding buffer which has a message */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8000438:	7b3b      	ldrb	r3, [r7, #12]
 800043a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800043e:	b2db      	uxtb	r3, r3
 8000440:	2b40      	cmp	r3, #64	; 0x40
 8000442:	bf0c      	ite	eq
 8000444:	2301      	moveq	r3, #1
 8000446:	2300      	movne	r3, #0
 8000448:	b2da      	uxtb	r2, r3
 800044a:	7b3b      	ldrb	r3, [r7, #12]
 800044c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000450:	b2db      	uxtb	r3, r3
 8000452:	2bc0      	cmp	r3, #192	; 0xc0
 8000454:	bf0c      	ite	eq
 8000456:	2301      	moveq	r3, #1
 8000458:	2300      	movne	r3, #0
 800045a:	b2db      	uxtb	r3, r3
 800045c:	4313      	orrs	r3, r2
 800045e:	b2db      	uxtb	r3, r3
 8000460:	2b00      	cmp	r3, #0
 8000462:	d007      	beq.n	8000474 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000464:	f107 0310 	add.w	r3, r7, #16
 8000468:	220d      	movs	r2, #13
 800046a:	4619      	mov	r1, r3
 800046c:	2090      	movs	r0, #144	; 0x90
 800046e:	f000 fa0d 	bl	800088c <MCP2515_ReadRxSequence>
 8000472:	e00c      	b.n	800048e <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8000474:	7b3b      	ldrb	r3, [r7, #12]
 8000476:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800047a:	b2db      	uxtb	r3, r3
 800047c:	2b80      	cmp	r3, #128	; 0x80
 800047e:	d106      	bne.n	800048e <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000480:	f107 0310 	add.w	r3, r7, #16
 8000484:	220d      	movs	r2, #13
 8000486:	4619      	mov	r1, r3
 8000488:	2094      	movs	r0, #148	; 0x94
 800048a:	f000 f9ff 	bl	800088c <MCP2515_ReadRxSequence>
    }
    
    /* if the message is extended CAN type */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 800048e:	7b3b      	ldrb	r3, [r7, #12]
 8000490:	f003 0318 	and.w	r3, r3, #24
 8000494:	b2db      	uxtb	r3, r3
 8000496:	2b10      	cmp	r3, #16
 8000498:	d10c      	bne.n	80004b4 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	2202      	movs	r2, #2
 800049e:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80004a0:	7cb8      	ldrb	r0, [r7, #18]
 80004a2:	7cf9      	ldrb	r1, [r7, #19]
 80004a4:	7c3a      	ldrb	r2, [r7, #16]
 80004a6:	7c7b      	ldrb	r3, [r7, #17]
 80004a8:	f000 f832 	bl	8000510 <convertReg2ExtendedCANid>
 80004ac:	4602      	mov	r2, r0
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	e00b      	b.n	80004cc <CANSPI_Receive+0xb4>
    } 
    else 
    {
      /* Standard type */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2201      	movs	r2, #1
 80004b8:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80004ba:	7c3b      	ldrb	r3, [r7, #16]
 80004bc:	7c7a      	ldrb	r2, [r7, #17]
 80004be:	4611      	mov	r1, r2
 80004c0:	4618      	mov	r0, r3
 80004c2:	f000 f863 	bl	800058c <convertReg2StandardCANid>
 80004c6:	4602      	mov	r2, r0
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	605a      	str	r2, [r3, #4]
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 80004cc:	7d3a      	ldrb	r2, [r7, #20]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 80004d2:	7d7a      	ldrb	r2, [r7, #21]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 80004d8:	7dba      	ldrb	r2, [r7, #22]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 80004de:	7dfa      	ldrb	r2, [r7, #23]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 80004e4:	7e3a      	ldrb	r2, [r7, #24]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 80004ea:	7e7a      	ldrb	r2, [r7, #25]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 80004f0:	7eba      	ldrb	r2, [r7, #26]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 80004f6:	7efa      	ldrb	r2, [r7, #27]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 80004fc:	7f3a      	ldrb	r2, [r7, #28]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	741a      	strb	r2, [r3, #16]
    
    returnValue = 1;
 8000502:	2301      	movs	r3, #1
 8000504:	77fb      	strb	r3, [r7, #31]
  }
  
  return (returnValue);
 8000506:	7ffb      	ldrb	r3, [r7, #31]
}
 8000508:	4618      	mov	r0, r3
 800050a:	3720      	adds	r7, #32
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* convert register value to extended CAN ID */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 8000510:	b490      	push	{r4, r7}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0
 8000516:	4604      	mov	r4, r0
 8000518:	4608      	mov	r0, r1
 800051a:	4611      	mov	r1, r2
 800051c:	461a      	mov	r2, r3
 800051e:	4623      	mov	r3, r4
 8000520:	71fb      	strb	r3, [r7, #7]
 8000522:	4603      	mov	r3, r0
 8000524:	71bb      	strb	r3, [r7, #6]
 8000526:	460b      	mov	r3, r1
 8000528:	717b      	strb	r3, [r7, #5]
 800052a:	4613      	mov	r3, r2
 800052c:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 800052e:	2300      	movs	r3, #0
 8000530:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 8000536:	793b      	ldrb	r3, [r7, #4]
 8000538:	f003 0303 	and.w	r3, r3, #3
 800053c:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 800053e:	793b      	ldrb	r3, [r7, #4]
 8000540:	095b      	lsrs	r3, r3, #5
 8000542:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 8000544:	797b      	ldrb	r3, [r7, #5]
 8000546:	00db      	lsls	r3, r3, #3
 8000548:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 800054a:	7bbb      	ldrb	r3, [r7, #14]
 800054c:	693a      	ldr	r2, [r7, #16]
 800054e:	4413      	add	r3, r2
 8000550:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 8000552:	693b      	ldr	r3, [r7, #16]
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8000558:	7bfb      	ldrb	r3, [r7, #15]
 800055a:	693a      	ldr	r2, [r7, #16]
 800055c:	4413      	add	r3, r2
 800055e:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8000560:	693b      	ldr	r3, [r7, #16]
 8000562:	021b      	lsls	r3, r3, #8
 8000564:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	693a      	ldr	r2, [r7, #16]
 800056a:	4413      	add	r3, r2
 800056c:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 800056e:	693b      	ldr	r3, [r7, #16]
 8000570:	021b      	lsls	r3, r3, #8
 8000572:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8000574:	79bb      	ldrb	r3, [r7, #6]
 8000576:	693a      	ldr	r2, [r7, #16]
 8000578:	4413      	add	r3, r2
 800057a:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;    
 800057c:	693b      	ldr	r3, [r7, #16]
 800057e:	617b      	str	r3, [r7, #20]
  return (returnValue);
 8000580:	697b      	ldr	r3, [r7, #20]
}
 8000582:	4618      	mov	r0, r3
 8000584:	3718      	adds	r7, #24
 8000586:	46bd      	mov	sp, r7
 8000588:	bc90      	pop	{r4, r7}
 800058a:	4770      	bx	lr

0800058c <convertReg2StandardCANid>:

/* convert register value to standard CAN ID */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	460a      	mov	r2, r1
 8000596:	71fb      	strb	r3, [r7, #7]
 8000598:	4613      	mov	r3, r2
 800059a:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;
  
  ConvertedID = (tempRXBn_SIDH << 3);
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	00db      	lsls	r3, r3, #3
 80005a4:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 80005a6:	79bb      	ldrb	r3, [r7, #6]
 80005a8:	095b      	lsrs	r3, r3, #5
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	461a      	mov	r2, r3
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	4413      	add	r3, r2
 80005b2:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	60fb      	str	r3, [r7, #12]
  
  return (returnValue);
 80005b8:	68fb      	ldr	r3, [r7, #12]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <convertCANid2Reg>:

/* convert CAN ID to register value */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
 80005c6:	b480      	push	{r7}
 80005c8:	b087      	sub	sp, #28
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	60f8      	str	r0, [r7, #12]
 80005ce:	460b      	mov	r3, r1
 80005d0:	607a      	str	r2, [r7, #4]
 80005d2:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	75fb      	strb	r3, [r7, #23]
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 80005d8:	7afb      	ldrb	r3, [r7, #11]
 80005da:	2b02      	cmp	r3, #2
 80005dc:	d12e      	bne.n	800063c <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	0a1b      	lsrs	r3, r3, #8
 80005ea:	60fb      	str	r3, [r7, #12]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	0a1b      	lsrs	r3, r3, #8
 80005f8:	60fb      	str	r3, [r7, #12]
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	f003 0303 	and.w	r3, r3, #3
 8000602:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	00db      	lsls	r3, r3, #3
 8000608:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	f023 031f 	bic.w	r3, r3, #31
 8000612:	b2da      	uxtb	r2, r3
 8000614:	7dfb      	ldrb	r3, [r7, #23]
 8000616:	4413      	add	r3, r2
 8000618:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 800061a:	7dfb      	ldrb	r3, [r7, #23]
 800061c:	3308      	adds	r3, #8
 800061e:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8000620:	7dfb      	ldrb	r3, [r7, #23]
 8000622:	f023 0314 	bic.w	r3, r3, #20
 8000626:	b2da      	uxtb	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	705a      	strb	r2, [r3, #1]
    
    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	0a1b      	lsrs	r3, r3, #8
 8000630:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	b2da      	uxtb	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 800063a:	e013      	b.n	8000664 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2200      	movs	r2, #0
 8000640:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2200      	movs	r2, #0
 8000646:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	015b      	lsls	r3, r3, #5
 800064c:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	b2da      	uxtb	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	0a1b      	lsrs	r3, r3, #8
 800065a:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	b2da      	uxtb	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	701a      	strb	r2, [r3, #0]
}
 8000664:	bf00      	nop
 8000666:	371c      	adds	r7, #28
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <HAL_GPIO_EXTI_Callback>:
uint8_t cmd;
uint8_t cmdli;
uint32_t code;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	80fb      	strh	r3, [r7, #6]

  if(GPIO_Pin == IRF_IRQ_Pin)
 800067a:	88fb      	ldrh	r3, [r7, #6]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d167      	bne.n	8000750 <HAL_GPIO_EXTI_Callback+0xe0>
  {
	  if (__HAL_TIM_GET_COUNTER(&htim1) > 8000)
 8000680:	4b36      	ldr	r3, [pc, #216]	; (800075c <HAL_GPIO_EXTI_Callback+0xec>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000686:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800068a:	d906      	bls.n	800069a <HAL_GPIO_EXTI_Callback+0x2a>
	  {
		  tempCode = 0;
 800068c:	4b34      	ldr	r3, [pc, #208]	; (8000760 <HAL_GPIO_EXTI_Callback+0xf0>)
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
		  bitIndex = 0;
 8000692:	4b34      	ldr	r3, [pc, #208]	; (8000764 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
 8000698:	e031      	b.n	80006fe <HAL_GPIO_EXTI_Callback+0x8e>
	  }
	  else if (__HAL_TIM_GET_COUNTER(&htim1) > 1700)
 800069a:	4b30      	ldr	r3, [pc, #192]	; (800075c <HAL_GPIO_EXTI_Callback+0xec>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a0:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d912      	bls.n	80006ce <HAL_GPIO_EXTI_Callback+0x5e>
	  {
		  tempCode |= (1UL << (31-bitIndex));   // write 1
 80006a8:	4b2e      	ldr	r3, [pc, #184]	; (8000764 <HAL_GPIO_EXTI_Callback+0xf4>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	461a      	mov	r2, r3
 80006ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80006b2:	fa23 f202 	lsr.w	r2, r3, r2
 80006b6:	4b2a      	ldr	r3, [pc, #168]	; (8000760 <HAL_GPIO_EXTI_Callback+0xf0>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	4a28      	ldr	r2, [pc, #160]	; (8000760 <HAL_GPIO_EXTI_Callback+0xf0>)
 80006be:	6013      	str	r3, [r2, #0]
		  bitIndex++;
 80006c0:	4b28      	ldr	r3, [pc, #160]	; (8000764 <HAL_GPIO_EXTI_Callback+0xf4>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	3301      	adds	r3, #1
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	4b26      	ldr	r3, [pc, #152]	; (8000764 <HAL_GPIO_EXTI_Callback+0xf4>)
 80006ca:	701a      	strb	r2, [r3, #0]
 80006cc:	e017      	b.n	80006fe <HAL_GPIO_EXTI_Callback+0x8e>
	  }
	  else if (__HAL_TIM_GET_COUNTER(&htim1) > 1000)
 80006ce:	4b23      	ldr	r3, [pc, #140]	; (800075c <HAL_GPIO_EXTI_Callback+0xec>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006d8:	d911      	bls.n	80006fe <HAL_GPIO_EXTI_Callback+0x8e>
	  {
		  tempCode &= ~(1UL << (31-bitIndex));  // write 0
 80006da:	4b22      	ldr	r3, [pc, #136]	; (8000764 <HAL_GPIO_EXTI_Callback+0xf4>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	461a      	mov	r2, r3
 80006e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80006e4:	40d3      	lsrs	r3, r2
 80006e6:	43da      	mvns	r2, r3
 80006e8:	4b1d      	ldr	r3, [pc, #116]	; (8000760 <HAL_GPIO_EXTI_Callback+0xf0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4013      	ands	r3, r2
 80006ee:	4a1c      	ldr	r2, [pc, #112]	; (8000760 <HAL_GPIO_EXTI_Callback+0xf0>)
 80006f0:	6013      	str	r3, [r2, #0]
		  bitIndex++;
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <HAL_GPIO_EXTI_Callback+0xf4>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	3301      	adds	r3, #1
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <HAL_GPIO_EXTI_Callback+0xf4>)
 80006fc:	701a      	strb	r2, [r3, #0]
	  }
	  if(bitIndex == 32)
 80006fe:	4b19      	ldr	r3, [pc, #100]	; (8000764 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b20      	cmp	r3, #32
 8000704:	d120      	bne.n	8000748 <HAL_GPIO_EXTI_Callback+0xd8>
	  {
		  cmdli = ~tempCode; // Logical inverted last 8 bits
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	b2db      	uxtb	r3, r3
 800070c:	43db      	mvns	r3, r3
 800070e:	b2da      	uxtb	r2, r3
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000712:	701a      	strb	r2, [r3, #0]
		  cmd = tempCode >> 8; // Second last 8 bits
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	b2da      	uxtb	r2, r3
 800071c:	4b13      	ldr	r3, [pc, #76]	; (800076c <HAL_GPIO_EXTI_Callback+0xfc>)
 800071e:	701a      	strb	r2, [r3, #0]
		  if(cmdli == cmd) // Check for errors
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000722:	781a      	ldrb	r2, [r3, #0]
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <HAL_GPIO_EXTI_Callback+0xfc>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	429a      	cmp	r2, r3
 800072a:	d10a      	bne.n	8000742 <HAL_GPIO_EXTI_Callback+0xd2>
		  {
			  code = tempCode; // If no bit errors
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <HAL_GPIO_EXTI_Callback+0xf0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a0f      	ldr	r2, [pc, #60]	; (8000770 <HAL_GPIO_EXTI_Callback+0x100>)
 8000732:	6013      	str	r3, [r2, #0]
			  irfState.irfFlag = IRF_FLAG_ON;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <HAL_GPIO_EXTI_Callback+0x104>)
 8000736:	2201      	movs	r2, #1
 8000738:	701a      	strb	r2, [r3, #0]
			  irfState.code = tempCode;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <HAL_GPIO_EXTI_Callback+0xf0>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a0d      	ldr	r2, [pc, #52]	; (8000774 <HAL_GPIO_EXTI_Callback+0x104>)
 8000740:	6053      	str	r3, [r2, #4]
			  // Do your main work HERE
		  }
		  bitIndex = 0;
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
	  }
	  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000748:	4b04      	ldr	r3, [pc, #16]	; (800075c <HAL_GPIO_EXTI_Callback+0xec>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2200      	movs	r2, #0
 800074e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	200000a8 	.word	0x200000a8
 8000760:	20000038 	.word	0x20000038
 8000764:	2000003c 	.word	0x2000003c
 8000768:	2000003e 	.word	0x2000003e
 800076c:	2000003d 	.word	0x2000003d
 8000770:	20000040 	.word	0x20000040
 8000774:	20000030 	.word	0x20000030

08000778 <IRF_Init>:


void IRF_Init()
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim1);
 800077c:	4802      	ldr	r0, [pc, #8]	; (8000788 <IRF_Init+0x10>)
 800077e:	f003 fbb1 	bl	8003ee4 <HAL_TIM_Base_Start>
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000a8 	.word	0x200000a8

0800078c <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();    
 8000792:	2201      	movs	r2, #1
 8000794:	2140      	movs	r1, #64	; 0x40
 8000796:	480c      	ldr	r0, [pc, #48]	; (80007c8 <MCP2515_Initialize+0x3c>)
 8000798:	f001 f836 	bl	8001808 <HAL_GPIO_WritePin>
  
  uint8_t loop = 10;
 800079c:	230a      	movs	r3, #10
 800079e:	71fb      	strb	r3, [r7, #7]
  
  do {
    /* check SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 80007a0:	480a      	ldr	r0, [pc, #40]	; (80007cc <MCP2515_Initialize+0x40>)
 80007a2:	f003 f97c 	bl	8003a9e <HAL_SPI_GetState>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d101      	bne.n	80007b0 <MCP2515_Initialize+0x24>
      return true;
 80007ac:	2301      	movs	r3, #1
 80007ae:	e006      	b.n	80007be <MCP2515_Initialize+0x32>
    
    loop--;
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d1f1      	bne.n	80007a0 <MCP2515_Initialize+0x14>
      
  return false;
 80007bc:	2300      	movs	r3, #0
  /*ilgili SPI hattının boş olup olmadığını 10 defa kontrol ediyor*/
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	48000400 	.word	0x48000400
 80007cc:	20000044 	.word	0x20000044

080007d0 <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 80007d6:	2180      	movs	r1, #128	; 0x80
 80007d8:	200f      	movs	r0, #15
 80007da:	f000 f879 	bl	80008d0 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 80007de:	230a      	movs	r3, #10
 80007e0:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 80007e2:	200e      	movs	r0, #14
 80007e4:	f000 f830 	bl	8000848 <MCP2515_ReadByte>
 80007e8:	4603      	mov	r3, r0
 80007ea:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80007ee:	2b80      	cmp	r3, #128	; 0x80
 80007f0:	d101      	bne.n	80007f6 <MCP2515_SetConfigMode+0x26>
      return true;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e006      	b.n	8000804 <MCP2515_SetConfigMode+0x34>
    
    loop--;
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	3b01      	subs	r3, #1
 80007fa:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d1ef      	bne.n	80007e2 <MCP2515_SetConfigMode+0x12>
  
  return false;
 8000802:	2300      	movs	r3, #0
}
 8000804:	4618      	mov	r0, r3
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <MCP2515_SetNormalMode>:

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8000812:	2100      	movs	r1, #0
 8000814:	200f      	movs	r0, #15
 8000816:	f000 f85b 	bl	80008d0 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 800081a:	230a      	movs	r3, #10
 800081c:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 800081e:	200e      	movs	r0, #14
 8000820:	f000 f812 	bl	8000848 <MCP2515_ReadByte>
 8000824:	4603      	mov	r3, r0
 8000826:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d101      	bne.n	8000832 <MCP2515_SetNormalMode+0x26>
      return true;
 800082e:	2301      	movs	r3, #1
 8000830:	e006      	b.n	8000840 <MCP2515_SetNormalMode+0x34>
    
    loop--;
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	3b01      	subs	r3, #1
 8000836:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d1ef      	bne.n	800081e <MCP2515_SetNormalMode+0x12>
  
  return false;
 800083e:	2300      	movs	r3, #0
}
 8000840:	4618      	mov	r0, r3
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 8000852:	2200      	movs	r2, #0
 8000854:	2140      	movs	r1, #64	; 0x40
 8000856:	480c      	ldr	r0, [pc, #48]	; (8000888 <MCP2515_ReadByte+0x40>)
 8000858:	f000 ffd6 	bl	8001808 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ);
 800085c:	2003      	movs	r0, #3
 800085e:	f000 f901 	bl	8000a64 <SPI_Tx>
  SPI_Tx(address);
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	4618      	mov	r0, r3
 8000866:	f000 f8fd 	bl	8000a64 <SPI_Tx>
  retVal = SPI_Rx();
 800086a:	f000 f921 	bl	8000ab0 <SPI_Rx>
 800086e:	4603      	mov	r3, r0
 8000870:	73fb      	strb	r3, [r7, #15]
      
  MCP2515_CS_HIGH();
 8000872:	2201      	movs	r2, #1
 8000874:	2140      	movs	r1, #64	; 0x40
 8000876:	4804      	ldr	r0, [pc, #16]	; (8000888 <MCP2515_ReadByte+0x40>)
 8000878:	f000 ffc6 	bl	8001808 <HAL_GPIO_WritePin>
  
  return retVal;
 800087c:	7bfb      	ldrb	r3, [r7, #15]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	48000400 	.word	0x48000400

0800088c <MCP2515_ReadRxSequence>:

/* read buffer */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	6039      	str	r1, [r7, #0]
 8000896:	71fb      	strb	r3, [r7, #7]
 8000898:	4613      	mov	r3, r2
 800089a:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 800089c:	2200      	movs	r2, #0
 800089e:	2140      	movs	r1, #64	; 0x40
 80008a0:	480a      	ldr	r0, [pc, #40]	; (80008cc <MCP2515_ReadRxSequence+0x40>)
 80008a2:	f000 ffb1 	bl	8001808 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);        
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 f8db 	bl	8000a64 <SPI_Tx>
  SPI_RxBuffer(data, length);
 80008ae:	79bb      	ldrb	r3, [r7, #6]
 80008b0:	4619      	mov	r1, r3
 80008b2:	6838      	ldr	r0, [r7, #0]
 80008b4:	f000 f90c 	bl	8000ad0 <SPI_RxBuffer>
    
  MCP2515_CS_HIGH();
 80008b8:	2201      	movs	r2, #1
 80008ba:	2140      	movs	r1, #64	; 0x40
 80008bc:	4803      	ldr	r0, [pc, #12]	; (80008cc <MCP2515_ReadRxSequence+0x40>)
 80008be:	f000 ffa3 	bl	8001808 <HAL_GPIO_WritePin>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	48000400 	.word	0x48000400

080008d0 <MCP2515_WriteByte>:

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{    
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	460a      	mov	r2, r1
 80008da:	71fb      	strb	r3, [r7, #7]
 80008dc:	4613      	mov	r3, r2
 80008de:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();  
 80008e0:	2200      	movs	r2, #0
 80008e2:	2140      	movs	r1, #64	; 0x40
 80008e4:	480b      	ldr	r0, [pc, #44]	; (8000914 <MCP2515_WriteByte+0x44>)
 80008e6:	f000 ff8f 	bl	8001808 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 80008ea:	2002      	movs	r0, #2
 80008ec:	f000 f8ba 	bl	8000a64 <SPI_Tx>
  SPI_Tx(address);
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f8b6 	bl	8000a64 <SPI_Tx>
  SPI_Tx(data);  
 80008f8:	79bb      	ldrb	r3, [r7, #6]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 f8b2 	bl	8000a64 <SPI_Tx>
    
  MCP2515_CS_HIGH();
 8000900:	2201      	movs	r2, #1
 8000902:	2140      	movs	r1, #64	; 0x40
 8000904:	4803      	ldr	r0, [pc, #12]	; (8000914 <MCP2515_WriteByte+0x44>)
 8000906:	f000 ff7f 	bl	8001808 <HAL_GPIO_WritePin>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	48000400 	.word	0x48000400

08000918 <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	603a      	str	r2, [r7, #0]
 8000922:	71fb      	strb	r3, [r7, #7]
 8000924:	460b      	mov	r3, r1
 8000926:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000928:	2200      	movs	r2, #0
 800092a:	2140      	movs	r1, #64	; 0x40
 800092c:	480e      	ldr	r0, [pc, #56]	; (8000968 <MCP2515_WriteByteSequence+0x50>)
 800092e:	f000 ff6b 	bl	8001808 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 8000932:	2002      	movs	r0, #2
 8000934:	f000 f896 	bl	8000a64 <SPI_Tx>
  SPI_Tx(startAddress);
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	4618      	mov	r0, r3
 800093c:	f000 f892 	bl	8000a64 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8000940:	79ba      	ldrb	r2, [r7, #6]
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	b2db      	uxtb	r3, r3
 8000948:	3301      	adds	r3, #1
 800094a:	b2db      	uxtb	r3, r3
 800094c:	4619      	mov	r1, r3
 800094e:	6838      	ldr	r0, [r7, #0]
 8000950:	f000 f89a 	bl	8000a88 <SPI_TxBuffer>
  
  MCP2515_CS_HIGH();
 8000954:	2201      	movs	r2, #1
 8000956:	2140      	movs	r1, #64	; 0x40
 8000958:	4803      	ldr	r0, [pc, #12]	; (8000968 <MCP2515_WriteByteSequence+0x50>)
 800095a:	f000 ff55 	bl	8001808 <HAL_GPIO_WritePin>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	48000400 	.word	0x48000400

0800096c <MCP2515_LoadTxSequence>:

/* write to TxBuffer */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{    
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	60b9      	str	r1, [r7, #8]
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4603      	mov	r3, r0
 8000978:	73fb      	strb	r3, [r7, #15]
 800097a:	4613      	mov	r3, r2
 800097c:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 800097e:	2200      	movs	r2, #0
 8000980:	2140      	movs	r1, #64	; 0x40
 8000982:	480e      	ldr	r0, [pc, #56]	; (80009bc <MCP2515_LoadTxSequence+0x50>)
 8000984:	f000 ff40 	bl	8001808 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f86a 	bl	8000a64 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 8000990:	2104      	movs	r1, #4
 8000992:	68b8      	ldr	r0, [r7, #8]
 8000994:	f000 f878 	bl	8000a88 <SPI_TxBuffer>
  SPI_Tx(dlc);
 8000998:	7bbb      	ldrb	r3, [r7, #14]
 800099a:	4618      	mov	r0, r3
 800099c:	f000 f862 	bl	8000a64 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 80009a0:	7bbb      	ldrb	r3, [r7, #14]
 80009a2:	4619      	mov	r1, r3
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f000 f86f 	bl	8000a88 <SPI_TxBuffer>
       
  MCP2515_CS_HIGH();
 80009aa:	2201      	movs	r2, #1
 80009ac:	2140      	movs	r1, #64	; 0x40
 80009ae:	4803      	ldr	r0, [pc, #12]	; (80009bc <MCP2515_LoadTxSequence+0x50>)
 80009b0:	f000 ff2a 	bl	8001808 <HAL_GPIO_WritePin>
}
 80009b4:	bf00      	nop
 80009b6:	3710      	adds	r7, #16
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	48000400 	.word	0x48000400

080009c0 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* request to send */
void MCP2515_RequestToSend(uint8_t instruction)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 80009ca:	2200      	movs	r2, #0
 80009cc:	2140      	movs	r1, #64	; 0x40
 80009ce:	4808      	ldr	r0, [pc, #32]	; (80009f0 <MCP2515_RequestToSend+0x30>)
 80009d0:	f000 ff1a 	bl	8001808 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 f844 	bl	8000a64 <SPI_Tx>
      
  MCP2515_CS_HIGH();
 80009dc:	2201      	movs	r2, #1
 80009de:	2140      	movs	r1, #64	; 0x40
 80009e0:	4803      	ldr	r0, [pc, #12]	; (80009f0 <MCP2515_RequestToSend+0x30>)
 80009e2:	f000 ff11 	bl	8001808 <HAL_GPIO_WritePin>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	48000400 	.word	0x48000400

080009f4 <MCP2515_ReadStatus>:

/* read status */
uint8_t MCP2515_ReadStatus(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 80009fa:	2200      	movs	r2, #0
 80009fc:	2140      	movs	r1, #64	; 0x40
 80009fe:	480a      	ldr	r0, [pc, #40]	; (8000a28 <MCP2515_ReadStatus+0x34>)
 8000a00:	f000 ff02 	bl	8001808 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ_STATUS);
 8000a04:	20a0      	movs	r0, #160	; 0xa0
 8000a06:	f000 f82d 	bl	8000a64 <SPI_Tx>
  retVal = SPI_Rx();
 8000a0a:	f000 f851 	bl	8000ab0 <SPI_Rx>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 8000a12:	2201      	movs	r2, #1
 8000a14:	2140      	movs	r1, #64	; 0x40
 8000a16:	4804      	ldr	r0, [pc, #16]	; (8000a28 <MCP2515_ReadStatus+0x34>)
 8000a18:	f000 fef6 	bl	8001808 <HAL_GPIO_WritePin>
  
  return retVal;
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	48000400 	.word	0x48000400

08000a2c <MCP2515_GetRxStatus>:

/* read RX STATUS register */
uint8_t MCP2515_GetRxStatus(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 8000a32:	2200      	movs	r2, #0
 8000a34:	2140      	movs	r1, #64	; 0x40
 8000a36:	480a      	ldr	r0, [pc, #40]	; (8000a60 <MCP2515_GetRxStatus+0x34>)
 8000a38:	f000 fee6 	bl	8001808 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_RX_STATUS);
 8000a3c:	20b0      	movs	r0, #176	; 0xb0
 8000a3e:	f000 f811 	bl	8000a64 <SPI_Tx>
  retVal = SPI_Rx();
 8000a42:	f000 f835 	bl	8000ab0 <SPI_Rx>
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2140      	movs	r1, #64	; 0x40
 8000a4e:	4804      	ldr	r0, [pc, #16]	; (8000a60 <MCP2515_GetRxStatus+0x34>)
 8000a50:	f000 feda 	bl	8001808 <HAL_GPIO_WritePin>
  
  return retVal;
 8000a54:	79fb      	ldrb	r3, [r7, #7]
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	48000400 	.word	0x48000400

08000a64 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 8000a6e:	1df9      	adds	r1, r7, #7
 8000a70:	230a      	movs	r3, #10
 8000a72:	2201      	movs	r2, #1
 8000a74:	4803      	ldr	r0, [pc, #12]	; (8000a84 <SPI_Tx+0x20>)
 8000a76:	f002 fb44 	bl	8003102 <HAL_SPI_Transmit>
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000044 	.word	0x20000044

08000a88 <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 8000a94:	78fb      	ldrb	r3, [r7, #3]
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	230a      	movs	r3, #10
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	4803      	ldr	r0, [pc, #12]	; (8000aac <SPI_TxBuffer+0x24>)
 8000a9e:	f002 fb30 	bl	8003102 <HAL_SPI_Transmit>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000044 	.word	0x20000044

08000ab0 <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8000ab6:	1df9      	adds	r1, r7, #7
 8000ab8:	230a      	movs	r3, #10
 8000aba:	2201      	movs	r2, #1
 8000abc:	4803      	ldr	r0, [pc, #12]	; (8000acc <SPI_Rx+0x1c>)
 8000abe:	f002 fc95 	bl	80033ec <HAL_SPI_Receive>
  return retVal;
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000044 	.word	0x20000044

08000ad0 <SPI_RxBuffer>:

/* SPI Rx wrapper function */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8000adc:	78fb      	ldrb	r3, [r7, #3]
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	230a      	movs	r3, #10
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	4803      	ldr	r0, [pc, #12]	; (8000af4 <SPI_RxBuffer+0x24>)
 8000ae6:	f002 fc81 	bl	80033ec <HAL_SPI_Receive>
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000044 	.word	0x20000044

08000af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000afc:	f000 fb76 	bl	80011ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b00:	f000 f880 	bl	8000c04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b04:	f000 f99e 	bl	8000e44 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b08:	f000 f96c 	bl	8000de4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000b0c:	f000 f916 	bl	8000d3c <MX_TIM1_Init>
  MX_SPI1_Init();
 8000b10:	f000 f8d6 	bl	8000cc0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  IRF_Init();
 8000b14:	f7ff fe30 	bl	8000778 <IRF_Init>
  CANSPI_Initialize();
 8000b18:	f7ff fb56 	bl	80001c8 <CANSPI_Initialize>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(irfState.irfFlag == IRF_FLAG_ON)		//check the remote controller
 8000b1c:	4b35      	ldr	r3, [pc, #212]	; (8000bf4 <main+0xfc>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d11f      	bne.n	8000b64 <main+0x6c>
	  {
		    txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;	//standart can
 8000b24:	4b34      	ldr	r3, [pc, #208]	; (8000bf8 <main+0x100>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	701a      	strb	r2, [r3, #0]
		    txMessage.frame.id = 0x0A;
 8000b2a:	4b33      	ldr	r3, [pc, #204]	; (8000bf8 <main+0x100>)
 8000b2c:	220a      	movs	r2, #10
 8000b2e:	605a      	str	r2, [r3, #4]
		    txMessage.frame.dlc = 3;
 8000b30:	4b31      	ldr	r3, [pc, #196]	; (8000bf8 <main+0x100>)
 8000b32:	2203      	movs	r2, #3
 8000b34:	721a      	strb	r2, [r3, #8]
		    txMessage.frame.data0 = irfState.code & 0xFF;
 8000b36:	4b2f      	ldr	r3, [pc, #188]	; (8000bf4 <main+0xfc>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	4b2e      	ldr	r3, [pc, #184]	; (8000bf8 <main+0x100>)
 8000b3e:	725a      	strb	r2, [r3, #9]
		    txMessage.frame.data1 = (irfState.code >> 8) & 0xFF;
 8000b40:	4b2c      	ldr	r3, [pc, #176]	; (8000bf4 <main+0xfc>)
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	0a1b      	lsrs	r3, r3, #8
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	4b2b      	ldr	r3, [pc, #172]	; (8000bf8 <main+0x100>)
 8000b4a:	729a      	strb	r2, [r3, #10]
		    txMessage.frame.data2 = (irfState.code >> 16) & 0xFF;
 8000b4c:	4b29      	ldr	r3, [pc, #164]	; (8000bf4 <main+0xfc>)
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	0c1b      	lsrs	r3, r3, #16
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	4b28      	ldr	r3, [pc, #160]	; (8000bf8 <main+0x100>)
 8000b56:	72da      	strb	r2, [r3, #11]
		    irfState.irfFlag = IRF_FLAG_OFF;
 8000b58:	4b26      	ldr	r3, [pc, #152]	; (8000bf4 <main+0xfc>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	701a      	strb	r2, [r3, #0]
		    CANSPI_Transmit(&txMessage);
 8000b5e:	4826      	ldr	r0, [pc, #152]	; (8000bf8 <main+0x100>)
 8000b60:	f7ff fbe2 	bl	8000328 <CANSPI_Transmit>
	  }
	  if(CANSPI_Receive(&rxMessage))			//if take can message
 8000b64:	4825      	ldr	r0, [pc, #148]	; (8000bfc <main+0x104>)
 8000b66:	f7ff fc57 	bl	8000418 <CANSPI_Receive>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d0d5      	beq.n	8000b1c <main+0x24>
	  {
		  if(rxMessage.frame.id == 0xA && rxMessage.frame.dlc == 1 &&  rxMessage.frame.idType == dSTANDARD_CAN_MSG_ID_2_0B)
 8000b70:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <main+0x104>)
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	2b0a      	cmp	r3, #10
 8000b76:	d1d1      	bne.n	8000b1c <main+0x24>
 8000b78:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <main+0x104>)
 8000b7a:	7a1b      	ldrb	r3, [r3, #8]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d1cd      	bne.n	8000b1c <main+0x24>
 8000b80:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <main+0x104>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d1c9      	bne.n	8000b1c <main+0x24>
		  {
			  if(rxMessage.frame.data0 == ALARM_ENABLE || rxMessage.frame.data0 == CAR_OPEN)
 8000b88:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <main+0x104>)
 8000b8a:	7a5b      	ldrb	r3, [r3, #9]
 8000b8c:	2b07      	cmp	r3, #7
 8000b8e:	d003      	beq.n	8000b98 <main+0xa0>
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <main+0x104>)
 8000b92:	7a5b      	ldrb	r3, [r3, #9]
 8000b94:	2b06      	cmp	r3, #6
 8000b96:	d11c      	bne.n	8000bd2 <main+0xda>
			  {
				  HAL_GPIO_WritePin(ALARM_BUZZER_GPIO_Port, ALARM_BUZZER_Pin, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba2:	f000 fe31 	bl	8001808 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(ALARM_LED_GPIO_Port, ALARM_LED_Pin, GPIO_PIN_SET);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	2180      	movs	r1, #128	; 0x80
 8000baa:	4815      	ldr	r0, [pc, #84]	; (8000c00 <main+0x108>)
 8000bac:	f000 fe2c 	bl	8001808 <HAL_GPIO_WritePin>
				  HAL_Delay(600);
 8000bb0:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000bb4:	f000 fb80 	bl	80012b8 <HAL_Delay>
				  HAL_GPIO_WritePin(ALARM_BUZZER_GPIO_Port, ALARM_BUZZER_Pin, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc2:	f000 fe21 	bl	8001808 <HAL_GPIO_WritePin>
				  memset(&rxMessage, 0, sizeof(rxMessage));
 8000bc6:	2214      	movs	r2, #20
 8000bc8:	2100      	movs	r1, #0
 8000bca:	480c      	ldr	r0, [pc, #48]	; (8000bfc <main+0x104>)
 8000bcc:	f003 ffe6 	bl	8004b9c <memset>
 8000bd0:	e00f      	b.n	8000bf2 <main+0xfa>

			  }
			  else if(rxMessage.frame.data0 == CAR_CLOSE)
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <main+0x104>)
 8000bd4:	7a5b      	ldrb	r3, [r3, #9]
 8000bd6:	2b05      	cmp	r3, #5
 8000bd8:	d1a0      	bne.n	8000b1c <main+0x24>
			  {
				  HAL_GPIO_WritePin(ALARM_BUZZER_GPIO_Port, ALARM_BUZZER_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be4:	f000 fe10 	bl	8001808 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(ALARM_LED_GPIO_Port, ALARM_LED_Pin, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2180      	movs	r1, #128	; 0x80
 8000bec:	4804      	ldr	r0, [pc, #16]	; (8000c00 <main+0x108>)
 8000bee:	f000 fe0b 	bl	8001808 <HAL_GPIO_WritePin>
	  if(irfState.irfFlag == IRF_FLAG_ON)		//check the remote controller
 8000bf2:	e793      	b.n	8000b1c <main+0x24>
 8000bf4:	20000030 	.word	0x20000030
 8000bf8:	2000017c 	.word	0x2000017c
 8000bfc:	20000190 	.word	0x20000190
 8000c00:	48000800 	.word	0x48000800

08000c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b096      	sub	sp, #88	; 0x58
 8000c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c0e:	2228      	movs	r2, #40	; 0x28
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f003 ffc2 	bl	8004b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c28:	463b      	mov	r3, r7
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]
 8000c36:	615a      	str	r2, [r3, #20]
 8000c38:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c3e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c42:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c54:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c56:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c5a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 fe01 	bl	8001868 <HAL_RCC_OscConfig>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000c6c:	f000 f982 	bl	8000f74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c70:	230f      	movs	r3, #15
 8000c72:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c74:	2302      	movs	r3, #2
 8000c76:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	2102      	movs	r1, #2
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f001 fe29 	bl	80028e4 <HAL_RCC_ClockConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c98:	f000 f96c 	bl	8000f74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f002 f851 	bl	8002d50 <HAL_RCCEx_PeriphCLKConfig>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000cb4:	f000 f95e 	bl	8000f74 <Error_Handler>
  }
}
 8000cb8:	bf00      	nop
 8000cba:	3758      	adds	r7, #88	; 0x58
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000cc6:	4a1c      	ldr	r2, [pc, #112]	; (8000d38 <MX_SPI1_Init+0x78>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000ccc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cd2:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cd8:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000cda:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000cde:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ce6:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000cee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cf2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000cf6:	2208      	movs	r2, #8
 8000cf8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d0c:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000d0e:	2207      	movs	r2, #7
 8000d10:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000d1a:	2208      	movs	r2, #8
 8000d1c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d1e:	4805      	ldr	r0, [pc, #20]	; (8000d34 <MX_SPI1_Init+0x74>)
 8000d20:	f002 f94c 	bl	8002fbc <HAL_SPI_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d2a:	f000 f923 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000044 	.word	0x20000044
 8000d38:	40013000 	.word	0x40013000

08000d3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b088      	sub	sp, #32
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d42:	f107 0310 	add.w	r3, r7, #16
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d5a:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <MX_TIM1_Init+0xa0>)
 8000d5c:	4a20      	ldr	r2, [pc, #128]	; (8000de0 <MX_TIM1_Init+0xa4>)
 8000d5e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000d60:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <MX_TIM1_Init+0xa0>)
 8000d62:	2247      	movs	r2, #71	; 0x47
 8000d64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d66:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <MX_TIM1_Init+0xa0>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <MX_TIM1_Init+0xa0>)
 8000d6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d72:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d74:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <MX_TIM1_Init+0xa0>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <MX_TIM1_Init+0xa0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <MX_TIM1_Init+0xa0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d86:	4815      	ldr	r0, [pc, #84]	; (8000ddc <MX_TIM1_Init+0xa0>)
 8000d88:	f003 f854 	bl	8003e34 <HAL_TIM_Base_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000d92:	f000 f8ef 	bl	8000f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	4619      	mov	r1, r3
 8000da2:	480e      	ldr	r0, [pc, #56]	; (8000ddc <MX_TIM1_Init+0xa0>)
 8000da4:	f003 f8f2 	bl	8003f8c <HAL_TIM_ConfigClockSource>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000dae:	f000 f8e1 	bl	8000f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4806      	ldr	r0, [pc, #24]	; (8000ddc <MX_TIM1_Init+0xa0>)
 8000dc4:	f003 fabe 	bl	8004344 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000dce:	f000 f8d1 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	3720      	adds	r7, #32
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200000a8 	.word	0x200000a8
 8000de0:	40012c00 	.word	0x40012c00

08000de4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <MX_USART2_UART_Init+0x58>)
 8000dea:	4a15      	ldr	r2, [pc, #84]	; (8000e40 <MX_USART2_UART_Init+0x5c>)
 8000dec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <MX_USART2_UART_Init+0x58>)
 8000df0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000df4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <MX_USART2_UART_Init+0x58>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <MX_USART2_UART_Init+0x58>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <MX_USART2_UART_Init+0x58>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <MX_USART2_UART_Init+0x58>)
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <MX_USART2_UART_Init+0x58>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <MX_USART2_UART_Init+0x58>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <MX_USART2_UART_Init+0x58>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <MX_USART2_UART_Init+0x58>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <MX_USART2_UART_Init+0x58>)
 8000e28:	f003 fafa 	bl	8004420 <HAL_UART_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e32:	f000 f89f 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200000f4 	.word	0x200000f4
 8000e40:	40004400 	.word	0x40004400

08000e44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5a:	4b43      	ldr	r3, [pc, #268]	; (8000f68 <MX_GPIO_Init+0x124>)
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	4a42      	ldr	r2, [pc, #264]	; (8000f68 <MX_GPIO_Init+0x124>)
 8000e60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e64:	6153      	str	r3, [r2, #20]
 8000e66:	4b40      	ldr	r3, [pc, #256]	; (8000f68 <MX_GPIO_Init+0x124>)
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e72:	4b3d      	ldr	r3, [pc, #244]	; (8000f68 <MX_GPIO_Init+0x124>)
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	4a3c      	ldr	r2, [pc, #240]	; (8000f68 <MX_GPIO_Init+0x124>)
 8000e78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e7c:	6153      	str	r3, [r2, #20]
 8000e7e:	4b3a      	ldr	r3, [pc, #232]	; (8000f68 <MX_GPIO_Init+0x124>)
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	4b37      	ldr	r3, [pc, #220]	; (8000f68 <MX_GPIO_Init+0x124>)
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	4a36      	ldr	r2, [pc, #216]	; (8000f68 <MX_GPIO_Init+0x124>)
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e94:	6153      	str	r3, [r2, #20]
 8000e96:	4b34      	ldr	r3, [pc, #208]	; (8000f68 <MX_GPIO_Init+0x124>)
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea2:	4b31      	ldr	r3, [pc, #196]	; (8000f68 <MX_GPIO_Init+0x124>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a30      	ldr	r2, [pc, #192]	; (8000f68 <MX_GPIO_Init+0x124>)
 8000ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eac:	6153      	str	r3, [r2, #20]
 8000eae:	4b2e      	ldr	r3, [pc, #184]	; (8000f68 <MX_GPIO_Init+0x124>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ALARM_LED_GPIO_Port, ALARM_LED_Pin, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2180      	movs	r1, #128	; 0x80
 8000ebe:	482b      	ldr	r0, [pc, #172]	; (8000f6c <MX_GPIO_Init+0x128>)
 8000ec0:	f000 fca2 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ALARM_BUZZER_GPIO_Port, ALARM_BUZZER_Pin, GPIO_PIN_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ece:	f000 fc9b 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2140      	movs	r1, #64	; 0x40
 8000ed6:	4826      	ldr	r0, [pc, #152]	; (8000f70 <MX_GPIO_Init+0x12c>)
 8000ed8:	f000 fc96 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin IRF_IRQ_Pin */
  GPIO_InitStruct.Pin = B1_Pin|IRF_IRQ_Pin;
 8000edc:	f242 0301 	movw	r3, #8193	; 0x2001
 8000ee0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ee2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ee6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	481e      	ldr	r0, [pc, #120]	; (8000f6c <MX_GPIO_Init+0x128>)
 8000ef4:	f000 fb16 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALARM_LED_Pin */
  GPIO_InitStruct.Pin = ALARM_LED_Pin;
 8000ef8:	2380      	movs	r3, #128	; 0x80
 8000efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ALARM_LED_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4817      	ldr	r0, [pc, #92]	; (8000f6c <MX_GPIO_Init+0x128>)
 8000f10:	f000 fb08 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALARM_BUZZER_Pin */
  GPIO_InitStruct.Pin = ALARM_BUZZER_Pin;
 8000f14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ALARM_BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f30:	f000 faf8 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_CS_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8000f34:	2340      	movs	r3, #64	; 0x40
 8000f36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4809      	ldr	r0, [pc, #36]	; (8000f70 <MX_GPIO_Init+0x12c>)
 8000f4c:	f000 faea 	bl	8001524 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	2006      	movs	r0, #6
 8000f56:	f000 faae 	bl	80014b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f5a:	2006      	movs	r0, #6
 8000f5c:	f000 fac7 	bl	80014ee <HAL_NVIC_EnableIRQ>

}
 8000f60:	bf00      	nop
 8000f62:	3728      	adds	r7, #40	; 0x28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	48000800 	.word	0x48000800
 8000f70:	48000400 	.word	0x48000400

08000f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f78:	b672      	cpsid	i
}
 8000f7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <Error_Handler+0x8>
	...

08000f80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <HAL_MspInit+0x44>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	4a0e      	ldr	r2, [pc, #56]	; (8000fc4 <HAL_MspInit+0x44>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6193      	str	r3, [r2, #24]
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <HAL_MspInit+0x44>)
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <HAL_MspInit+0x44>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	4a08      	ldr	r2, [pc, #32]	; (8000fc4 <HAL_MspInit+0x44>)
 8000fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	61d3      	str	r3, [r2, #28]
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_MspInit+0x44>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fb6:	2007      	movs	r0, #7
 8000fb8:	f000 fa72 	bl	80014a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a17      	ldr	r2, [pc, #92]	; (8001044 <HAL_SPI_MspInit+0x7c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d128      	bne.n	800103c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <HAL_SPI_MspInit+0x80>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	4a16      	ldr	r2, [pc, #88]	; (8001048 <HAL_SPI_MspInit+0x80>)
 8000ff0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ff4:	6193      	str	r3, [r2, #24]
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <HAL_SPI_MspInit+0x80>)
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <HAL_SPI_MspInit+0x80>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	4a10      	ldr	r2, [pc, #64]	; (8001048 <HAL_SPI_MspInit+0x80>)
 8001008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800100c:	6153      	str	r3, [r2, #20]
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <HAL_SPI_MspInit+0x80>)
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800101a:	23e0      	movs	r3, #224	; 0xe0
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800102a:	2305      	movs	r3, #5
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001038:	f000 fa74 	bl	8001524 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800103c:	bf00      	nop
 800103e:	3728      	adds	r7, #40	; 0x28
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40013000 	.word	0x40013000
 8001048:	40021000 	.word	0x40021000

0800104c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <HAL_TIM_Base_MspInit+0x38>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d10b      	bne.n	8001076 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <HAL_TIM_Base_MspInit+0x3c>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	4a09      	ldr	r2, [pc, #36]	; (8001088 <HAL_TIM_Base_MspInit+0x3c>)
 8001064:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001068:	6193      	str	r3, [r2, #24]
 800106a:	4b07      	ldr	r3, [pc, #28]	; (8001088 <HAL_TIM_Base_MspInit+0x3c>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001076:	bf00      	nop
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40012c00 	.word	0x40012c00
 8001088:	40021000 	.word	0x40021000

0800108c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a17      	ldr	r2, [pc, #92]	; (8001108 <HAL_UART_MspInit+0x7c>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d128      	bne.n	8001100 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <HAL_UART_MspInit+0x80>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	4a16      	ldr	r2, [pc, #88]	; (800110c <HAL_UART_MspInit+0x80>)
 80010b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b8:	61d3      	str	r3, [r2, #28]
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <HAL_UART_MspInit+0x80>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <HAL_UART_MspInit+0x80>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	4a10      	ldr	r2, [pc, #64]	; (800110c <HAL_UART_MspInit+0x80>)
 80010cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d0:	6153      	str	r3, [r2, #20]
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <HAL_UART_MspInit+0x80>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010de:	230c      	movs	r3, #12
 80010e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ea:	2303      	movs	r3, #3
 80010ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ee:	2307      	movs	r3, #7
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fc:	f000 fa12 	bl	8001524 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001100:	bf00      	nop
 8001102:	3728      	adds	r7, #40	; 0x28
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40004400 	.word	0x40004400
 800110c:	40021000 	.word	0x40021000

08001110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <NMI_Handler+0x4>

08001116 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111a:	e7fe      	b.n	800111a <HardFault_Handler+0x4>

0800111c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <MemManage_Handler+0x4>

08001122 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001126:	e7fe      	b.n	8001126 <BusFault_Handler+0x4>

08001128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800112c:	e7fe      	b.n	800112c <UsageFault_Handler+0x4>

0800112e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800115c:	f000 f88c 	bl	8001278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}

08001164 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRF_IRQ_Pin);
 8001168:	2001      	movs	r0, #1
 800116a:	f000 fb65 	bl	8001838 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <SystemInit+0x20>)
 800117a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800117e:	4a05      	ldr	r2, [pc, #20]	; (8001194 <SystemInit+0x20>)
 8001180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001198:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800119c:	f7ff ffea 	bl	8001174 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a0:	480c      	ldr	r0, [pc, #48]	; (80011d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80011a2:	490d      	ldr	r1, [pc, #52]	; (80011d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011a4:	4a0d      	ldr	r2, [pc, #52]	; (80011dc <LoopForever+0xe>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a8:	e002      	b.n	80011b0 <LoopCopyDataInit>

080011aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ae:	3304      	adds	r3, #4

080011b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b4:	d3f9      	bcc.n	80011aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b6:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011b8:	4c0a      	ldr	r4, [pc, #40]	; (80011e4 <LoopForever+0x16>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011bc:	e001      	b.n	80011c2 <LoopFillZerobss>

080011be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c0:	3204      	adds	r2, #4

080011c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c4:	d3fb      	bcc.n	80011be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011c6:	f003 fcc5 	bl	8004b54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ca:	f7ff fc95 	bl	8000af8 <main>

080011ce <LoopForever>:

LoopForever:
    b LoopForever
 80011ce:	e7fe      	b.n	80011ce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011d0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80011d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011dc:	08004c04 	.word	0x08004c04
  ldr r2, =_sbss
 80011e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011e4:	200001a8 	.word	0x200001a8

080011e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011e8:	e7fe      	b.n	80011e8 <ADC1_2_IRQHandler>
	...

080011ec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <HAL_Init+0x28>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a07      	ldr	r2, [pc, #28]	; (8001214 <HAL_Init+0x28>)
 80011f6:	f043 0310 	orr.w	r3, r3, #16
 80011fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fc:	2003      	movs	r0, #3
 80011fe:	f000 f94f 	bl	80014a0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001202:	2000      	movs	r0, #0
 8001204:	f000 f808 	bl	8001218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001208:	f7ff feba 	bl	8000f80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40022000 	.word	0x40022000

08001218 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_InitTick+0x54>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_InitTick+0x58>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001232:	fbb2 f3f3 	udiv	r3, r2, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f967 	bl	800150a <HAL_SYSTICK_Config>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e00e      	b.n	8001264 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b0f      	cmp	r3, #15
 800124a:	d80a      	bhi.n	8001262 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800124c:	2200      	movs	r2, #0
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	f000 f92f 	bl	80014b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001258:	4a06      	ldr	r2, [pc, #24]	; (8001274 <HAL_InitTick+0x5c>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	e000      	b.n	8001264 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000000 	.word	0x20000000
 8001270:	20000008 	.word	0x20000008
 8001274:	20000004 	.word	0x20000004

08001278 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_IncTick+0x20>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_IncTick+0x24>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4413      	add	r3, r2
 8001288:	4a04      	ldr	r2, [pc, #16]	; (800129c <HAL_IncTick+0x24>)
 800128a:	6013      	str	r3, [r2, #0]
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000008 	.word	0x20000008
 800129c:	200001a4 	.word	0x200001a4

080012a0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return uwTick;  
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <HAL_GetTick+0x14>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	200001a4 	.word	0x200001a4

080012b8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c0:	f7ff ffee 	bl	80012a0 <HAL_GetTick>
 80012c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d0:	d005      	beq.n	80012de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_Delay+0x44>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80012de:	bf00      	nop
 80012e0:	f7ff ffde 	bl	80012a0 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d8f7      	bhi.n	80012e0 <HAL_Delay+0x28>
  {
  }
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000008 	.word	0x20000008

08001300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800131c:	4013      	ands	r3, r2
 800131e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800132c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001332:	4a04      	ldr	r2, [pc, #16]	; (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	60d3      	str	r3, [r2, #12]
}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <__NVIC_GetPriorityGrouping+0x18>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	f003 0307 	and.w	r3, r3, #7
}
 8001356:	4618      	mov	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	2b00      	cmp	r3, #0
 8001374:	db0b      	blt.n	800138e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	f003 021f 	and.w	r2, r3, #31
 800137c:	4907      	ldr	r1, [pc, #28]	; (800139c <__NVIC_EnableIRQ+0x38>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	095b      	lsrs	r3, r3, #5
 8001384:	2001      	movs	r0, #1
 8001386:	fa00 f202 	lsl.w	r2, r0, r2
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000e100 	.word	0xe000e100

080013a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	db0a      	blt.n	80013ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	490c      	ldr	r1, [pc, #48]	; (80013ec <__NVIC_SetPriority+0x4c>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	0112      	lsls	r2, r2, #4
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	440b      	add	r3, r1
 80013c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c8:	e00a      	b.n	80013e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4908      	ldr	r1, [pc, #32]	; (80013f0 <__NVIC_SetPriority+0x50>)
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	3b04      	subs	r3, #4
 80013d8:	0112      	lsls	r2, r2, #4
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	440b      	add	r3, r1
 80013de:	761a      	strb	r2, [r3, #24]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000e100 	.word	0xe000e100
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	; 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f1c3 0307 	rsb	r3, r3, #7
 800140e:	2b04      	cmp	r3, #4
 8001410:	bf28      	it	cs
 8001412:	2304      	movcs	r3, #4
 8001414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3304      	adds	r3, #4
 800141a:	2b06      	cmp	r3, #6
 800141c:	d902      	bls.n	8001424 <NVIC_EncodePriority+0x30>
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3b03      	subs	r3, #3
 8001422:	e000      	b.n	8001426 <NVIC_EncodePriority+0x32>
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	f04f 32ff 	mov.w	r2, #4294967295
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43da      	mvns	r2, r3
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	401a      	ands	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800143c:	f04f 31ff 	mov.w	r1, #4294967295
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa01 f303 	lsl.w	r3, r1, r3
 8001446:	43d9      	mvns	r1, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	4313      	orrs	r3, r2
         );
}
 800144e:	4618      	mov	r0, r3
 8001450:	3724      	adds	r7, #36	; 0x24
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800146c:	d301      	bcc.n	8001472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146e:	2301      	movs	r3, #1
 8001470:	e00f      	b.n	8001492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001472:	4a0a      	ldr	r2, [pc, #40]	; (800149c <SysTick_Config+0x40>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3b01      	subs	r3, #1
 8001478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147a:	210f      	movs	r1, #15
 800147c:	f04f 30ff 	mov.w	r0, #4294967295
 8001480:	f7ff ff8e 	bl	80013a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001484:	4b05      	ldr	r3, [pc, #20]	; (800149c <SysTick_Config+0x40>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148a:	4b04      	ldr	r3, [pc, #16]	; (800149c <SysTick_Config+0x40>)
 800148c:	2207      	movs	r2, #7
 800148e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	e000e010 	.word	0xe000e010

080014a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ff29 	bl	8001300 <__NVIC_SetPriorityGrouping>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	4603      	mov	r3, r0
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
 80014c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c8:	f7ff ff3e 	bl	8001348 <__NVIC_GetPriorityGrouping>
 80014cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	68b9      	ldr	r1, [r7, #8]
 80014d2:	6978      	ldr	r0, [r7, #20]
 80014d4:	f7ff ff8e 	bl	80013f4 <NVIC_EncodePriority>
 80014d8:	4602      	mov	r2, r0
 80014da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff5d 	bl	80013a0 <__NVIC_SetPriority>
}
 80014e6:	bf00      	nop
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff31 	bl	8001364 <__NVIC_EnableIRQ>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff ffa2 	bl	800145c <SysTick_Config>
 8001518:	4603      	mov	r3, r0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001524:	b480      	push	{r7}
 8001526:	b087      	sub	sp, #28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001532:	e14e      	b.n	80017d2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	2101      	movs	r1, #1
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	fa01 f303 	lsl.w	r3, r1, r3
 8001540:	4013      	ands	r3, r2
 8001542:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 8140 	beq.w	80017cc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	2b01      	cmp	r3, #1
 8001556:	d005      	beq.n	8001564 <HAL_GPIO_Init+0x40>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d130      	bne.n	80015c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	2203      	movs	r2, #3
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	68da      	ldr	r2, [r3, #12]
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800159a:	2201      	movs	r2, #1
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	4013      	ands	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	091b      	lsrs	r3, r3, #4
 80015b0:	f003 0201 	and.w	r2, r3, #1
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d017      	beq.n	8001602 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	2203      	movs	r2, #3
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4013      	ands	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d123      	bne.n	8001656 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	08da      	lsrs	r2, r3, #3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3208      	adds	r2, #8
 8001616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	220f      	movs	r2, #15
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	691a      	ldr	r2, [r3, #16]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	08da      	lsrs	r2, r3, #3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3208      	adds	r2, #8
 8001650:	6939      	ldr	r1, [r7, #16]
 8001652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	2203      	movs	r2, #3
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4013      	ands	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 0203 	and.w	r2, r3, #3
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4313      	orrs	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 809a 	beq.w	80017cc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001698:	4b55      	ldr	r3, [pc, #340]	; (80017f0 <HAL_GPIO_Init+0x2cc>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	4a54      	ldr	r2, [pc, #336]	; (80017f0 <HAL_GPIO_Init+0x2cc>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	6193      	str	r3, [r2, #24]
 80016a4:	4b52      	ldr	r3, [pc, #328]	; (80017f0 <HAL_GPIO_Init+0x2cc>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016b0:	4a50      	ldr	r2, [pc, #320]	; (80017f4 <HAL_GPIO_Init+0x2d0>)
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	089b      	lsrs	r3, r3, #2
 80016b6:	3302      	adds	r3, #2
 80016b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	f003 0303 	and.w	r3, r3, #3
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	220f      	movs	r2, #15
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016da:	d013      	beq.n	8001704 <HAL_GPIO_Init+0x1e0>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a46      	ldr	r2, [pc, #280]	; (80017f8 <HAL_GPIO_Init+0x2d4>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d00d      	beq.n	8001700 <HAL_GPIO_Init+0x1dc>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a45      	ldr	r2, [pc, #276]	; (80017fc <HAL_GPIO_Init+0x2d8>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d007      	beq.n	80016fc <HAL_GPIO_Init+0x1d8>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a44      	ldr	r2, [pc, #272]	; (8001800 <HAL_GPIO_Init+0x2dc>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d101      	bne.n	80016f8 <HAL_GPIO_Init+0x1d4>
 80016f4:	2303      	movs	r3, #3
 80016f6:	e006      	b.n	8001706 <HAL_GPIO_Init+0x1e2>
 80016f8:	2305      	movs	r3, #5
 80016fa:	e004      	b.n	8001706 <HAL_GPIO_Init+0x1e2>
 80016fc:	2302      	movs	r3, #2
 80016fe:	e002      	b.n	8001706 <HAL_GPIO_Init+0x1e2>
 8001700:	2301      	movs	r3, #1
 8001702:	e000      	b.n	8001706 <HAL_GPIO_Init+0x1e2>
 8001704:	2300      	movs	r3, #0
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	f002 0203 	and.w	r2, r2, #3
 800170c:	0092      	lsls	r2, r2, #2
 800170e:	4093      	lsls	r3, r2
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4313      	orrs	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001716:	4937      	ldr	r1, [pc, #220]	; (80017f4 <HAL_GPIO_Init+0x2d0>)
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	089b      	lsrs	r3, r3, #2
 800171c:	3302      	adds	r3, #2
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001724:	4b37      	ldr	r3, [pc, #220]	; (8001804 <HAL_GPIO_Init+0x2e0>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	43db      	mvns	r3, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	4313      	orrs	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001748:	4a2e      	ldr	r2, [pc, #184]	; (8001804 <HAL_GPIO_Init+0x2e0>)
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800174e:	4b2d      	ldr	r3, [pc, #180]	; (8001804 <HAL_GPIO_Init+0x2e0>)
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	43db      	mvns	r3, r3
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4013      	ands	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4313      	orrs	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001772:	4a24      	ldr	r2, [pc, #144]	; (8001804 <HAL_GPIO_Init+0x2e0>)
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001778:	4b22      	ldr	r3, [pc, #136]	; (8001804 <HAL_GPIO_Init+0x2e0>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	43db      	mvns	r3, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	4313      	orrs	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800179c:	4a19      	ldr	r2, [pc, #100]	; (8001804 <HAL_GPIO_Init+0x2e0>)
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <HAL_GPIO_Init+0x2e0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	43db      	mvns	r3, r3
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	4013      	ands	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017c6:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <HAL_GPIO_Init+0x2e0>)
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	3301      	adds	r3, #1
 80017d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	fa22 f303 	lsr.w	r3, r2, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f47f aea9 	bne.w	8001534 <HAL_GPIO_Init+0x10>
  }
}
 80017e2:	bf00      	nop
 80017e4:	bf00      	nop
 80017e6:	371c      	adds	r7, #28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40010000 	.word	0x40010000
 80017f8:	48000400 	.word	0x48000400
 80017fc:	48000800 	.word	0x48000800
 8001800:	48000c00 	.word	0x48000c00
 8001804:	40010400 	.word	0x40010400

08001808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	807b      	strh	r3, [r7, #2]
 8001814:	4613      	mov	r3, r2
 8001816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001818:	787b      	ldrb	r3, [r7, #1]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001824:	e002      	b.n	800182c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001826:	887a      	ldrh	r2, [r7, #2]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001842:	4b08      	ldr	r3, [pc, #32]	; (8001864 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001844:	695a      	ldr	r2, [r3, #20]
 8001846:	88fb      	ldrh	r3, [r7, #6]
 8001848:	4013      	ands	r3, r2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d006      	beq.n	800185c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800184e:	4a05      	ldr	r2, [pc, #20]	; (8001864 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001850:	88fb      	ldrh	r3, [r7, #6]
 8001852:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe ff0a 	bl	8000670 <HAL_GPIO_EXTI_Callback>
  }
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40010400 	.word	0x40010400

08001868 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800186e:	af00      	add	r7, sp, #0
 8001870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001874:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001878:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800187a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d102      	bne.n	800188e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	f001 b823 	b.w	80028d4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800188e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001892:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 817d 	beq.w	8001b9e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018a4:	4bbc      	ldr	r3, [pc, #752]	; (8001b98 <HAL_RCC_OscConfig+0x330>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d00c      	beq.n	80018ca <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018b0:	4bb9      	ldr	r3, [pc, #740]	; (8001b98 <HAL_RCC_OscConfig+0x330>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 030c 	and.w	r3, r3, #12
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d15c      	bne.n	8001976 <HAL_RCC_OscConfig+0x10e>
 80018bc:	4bb6      	ldr	r3, [pc, #728]	; (8001b98 <HAL_RCC_OscConfig+0x330>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c8:	d155      	bne.n	8001976 <HAL_RCC_OscConfig+0x10e>
 80018ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018ce:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80018d6:	fa93 f3a3 	rbit	r3, r3
 80018da:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018de:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e2:	fab3 f383 	clz	r3, r3
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	095b      	lsrs	r3, r3, #5
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d102      	bne.n	80018fc <HAL_RCC_OscConfig+0x94>
 80018f6:	4ba8      	ldr	r3, [pc, #672]	; (8001b98 <HAL_RCC_OscConfig+0x330>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	e015      	b.n	8001928 <HAL_RCC_OscConfig+0xc0>
 80018fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001900:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001904:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001908:	fa93 f3a3 	rbit	r3, r3
 800190c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001910:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001914:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001918:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800191c:	fa93 f3a3 	rbit	r3, r3
 8001920:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001924:	4b9c      	ldr	r3, [pc, #624]	; (8001b98 <HAL_RCC_OscConfig+0x330>)
 8001926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001928:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800192c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001930:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001934:	fa92 f2a2 	rbit	r2, r2
 8001938:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800193c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001940:	fab2 f282 	clz	r2, r2
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	f042 0220 	orr.w	r2, r2, #32
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	f002 021f 	and.w	r2, r2, #31
 8001950:	2101      	movs	r1, #1
 8001952:	fa01 f202 	lsl.w	r2, r1, r2
 8001956:	4013      	ands	r3, r2
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 811f 	beq.w	8001b9c <HAL_RCC_OscConfig+0x334>
 800195e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001962:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	f040 8116 	bne.w	8001b9c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	f000 bfaf 	b.w	80028d4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001986:	d106      	bne.n	8001996 <HAL_RCC_OscConfig+0x12e>
 8001988:	4b83      	ldr	r3, [pc, #524]	; (8001b98 <HAL_RCC_OscConfig+0x330>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a82      	ldr	r2, [pc, #520]	; (8001b98 <HAL_RCC_OscConfig+0x330>)
 800198e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	e036      	b.n	8001a04 <HAL_RCC_OscConfig+0x19c>
 8001996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10c      	bne.n	80019c0 <HAL_RCC_OscConfig+0x158>
 80019a6:	4b7c      	ldr	r3, [pc, #496]	; (8001b98 <HAL_RCC_OscConfig+0x330>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a7b      	ldr	r2, [pc, #492]	; (8001b98 <HAL_RCC_OscConfig+0x330>)
 80019ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	4b79      	ldr	r3, [pc, #484]	; (8001b98 <HAL_RCC_OscConfig+0x330>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a78      	ldr	r2, [pc, #480]	; (8001b98 <HAL_RCC_OscConfig+0x330>)
 80019b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e021      	b.n	8001a04 <HAL_RCC_OscConfig+0x19c>
 80019c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019d0:	d10c      	bne.n	80019ec <HAL_RCC_OscConfig+0x184>
 80019d2:	4b71      	ldr	r3, [pc, #452]	; (8001b98 <HAL_RCC_OscConfig+0x330>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a70      	ldr	r2, [pc, #448]	; (8001b98 <HAL_RCC_OscConfig+0x330>)
 80019d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	4b6e      	ldr	r3, [pc, #440]	; (8001b98 <HAL_RCC_OscConfig+0x330>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a6d      	ldr	r2, [pc, #436]	; (8001b98 <HAL_RCC_OscConfig+0x330>)
 80019e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	e00b      	b.n	8001a04 <HAL_RCC_OscConfig+0x19c>
 80019ec:	4b6a      	ldr	r3, [pc, #424]	; (8001b98 <HAL_RCC_OscConfig+0x330>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a69      	ldr	r2, [pc, #420]	; (8001b98 <HAL_RCC_OscConfig+0x330>)
 80019f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	4b67      	ldr	r3, [pc, #412]	; (8001b98 <HAL_RCC_OscConfig+0x330>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a66      	ldr	r2, [pc, #408]	; (8001b98 <HAL_RCC_OscConfig+0x330>)
 80019fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a02:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a04:	4b64      	ldr	r3, [pc, #400]	; (8001b98 <HAL_RCC_OscConfig+0x330>)
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	f023 020f 	bic.w	r2, r3, #15
 8001a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	495f      	ldr	r1, [pc, #380]	; (8001b98 <HAL_RCC_OscConfig+0x330>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d059      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2e:	f7ff fc37 	bl	80012a0 <HAL_GetTick>
 8001a32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a36:	e00a      	b.n	8001a4e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a38:	f7ff fc32 	bl	80012a0 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b64      	cmp	r3, #100	; 0x64
 8001a46:	d902      	bls.n	8001a4e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	f000 bf43 	b.w	80028d4 <HAL_RCC_OscConfig+0x106c>
 8001a4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a52:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a56:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001a5a:	fa93 f3a3 	rbit	r3, r3
 8001a5e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001a62:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a66:	fab3 f383 	clz	r3, r3
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	095b      	lsrs	r3, r3, #5
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d102      	bne.n	8001a80 <HAL_RCC_OscConfig+0x218>
 8001a7a:	4b47      	ldr	r3, [pc, #284]	; (8001b98 <HAL_RCC_OscConfig+0x330>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	e015      	b.n	8001aac <HAL_RCC_OscConfig+0x244>
 8001a80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a84:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a88:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001a8c:	fa93 f3a3 	rbit	r3, r3
 8001a90:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001a94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a98:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001a9c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001aa0:	fa93 f3a3 	rbit	r3, r3
 8001aa4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001aa8:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <HAL_RCC_OscConfig+0x330>)
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ab0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001ab4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001ab8:	fa92 f2a2 	rbit	r2, r2
 8001abc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001ac0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001ac4:	fab2 f282 	clz	r2, r2
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	f042 0220 	orr.w	r2, r2, #32
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	f002 021f 	and.w	r2, r2, #31
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8001ada:	4013      	ands	r3, r2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0ab      	beq.n	8001a38 <HAL_RCC_OscConfig+0x1d0>
 8001ae0:	e05d      	b.n	8001b9e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae2:	f7ff fbdd 	bl	80012a0 <HAL_GetTick>
 8001ae6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aea:	e00a      	b.n	8001b02 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aec:	f7ff fbd8 	bl	80012a0 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b64      	cmp	r3, #100	; 0x64
 8001afa:	d902      	bls.n	8001b02 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	f000 bee9 	b.w	80028d4 <HAL_RCC_OscConfig+0x106c>
 8001b02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b06:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001b0e:	fa93 f3a3 	rbit	r3, r3
 8001b12:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001b16:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1a:	fab3 f383 	clz	r3, r3
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	095b      	lsrs	r3, r3, #5
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d102      	bne.n	8001b34 <HAL_RCC_OscConfig+0x2cc>
 8001b2e:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <HAL_RCC_OscConfig+0x330>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	e015      	b.n	8001b60 <HAL_RCC_OscConfig+0x2f8>
 8001b34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b38:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001b40:	fa93 f3a3 	rbit	r3, r3
 8001b44:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001b48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b4c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001b50:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001b54:	fa93 f3a3 	rbit	r3, r3
 8001b58:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001b5c:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <HAL_RCC_OscConfig+0x330>)
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b64:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001b68:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001b6c:	fa92 f2a2 	rbit	r2, r2
 8001b70:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001b74:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001b78:	fab2 f282 	clz	r2, r2
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	f042 0220 	orr.w	r2, r2, #32
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	f002 021f 	and.w	r2, r2, #31
 8001b88:	2101      	movs	r1, #1
 8001b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1ab      	bne.n	8001aec <HAL_RCC_OscConfig+0x284>
 8001b94:	e003      	b.n	8001b9e <HAL_RCC_OscConfig+0x336>
 8001b96:	bf00      	nop
 8001b98:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 817d 	beq.w	8001eae <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bb4:	4ba6      	ldr	r3, [pc, #664]	; (8001e50 <HAL_RCC_OscConfig+0x5e8>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 030c 	and.w	r3, r3, #12
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00b      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bc0:	4ba3      	ldr	r3, [pc, #652]	; (8001e50 <HAL_RCC_OscConfig+0x5e8>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 030c 	and.w	r3, r3, #12
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d172      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x44a>
 8001bcc:	4ba0      	ldr	r3, [pc, #640]	; (8001e50 <HAL_RCC_OscConfig+0x5e8>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d16c      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x44a>
 8001bd8:	2302      	movs	r3, #2
 8001bda:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bde:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001be2:	fa93 f3a3 	rbit	r3, r3
 8001be6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001bea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bee:	fab3 f383 	clz	r3, r3
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	095b      	lsrs	r3, r3, #5
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d102      	bne.n	8001c08 <HAL_RCC_OscConfig+0x3a0>
 8001c02:	4b93      	ldr	r3, [pc, #588]	; (8001e50 <HAL_RCC_OscConfig+0x5e8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	e013      	b.n	8001c30 <HAL_RCC_OscConfig+0x3c8>
 8001c08:	2302      	movs	r3, #2
 8001c0a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001c12:	fa93 f3a3 	rbit	r3, r3
 8001c16:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001c20:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001c24:	fa93 f3a3 	rbit	r3, r3
 8001c28:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001c2c:	4b88      	ldr	r3, [pc, #544]	; (8001e50 <HAL_RCC_OscConfig+0x5e8>)
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	2202      	movs	r2, #2
 8001c32:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001c36:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c3a:	fa92 f2a2 	rbit	r2, r2
 8001c3e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001c42:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001c46:	fab2 f282 	clz	r2, r2
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	f042 0220 	orr.w	r2, r2, #32
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	f002 021f 	and.w	r2, r2, #31
 8001c56:	2101      	movs	r1, #1
 8001c58:	fa01 f202 	lsl.w	r2, r1, r2
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00a      	beq.n	8001c78 <HAL_RCC_OscConfig+0x410>
 8001c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d002      	beq.n	8001c78 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	f000 be2e 	b.w	80028d4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c78:	4b75      	ldr	r3, [pc, #468]	; (8001e50 <HAL_RCC_OscConfig+0x5e8>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	21f8      	movs	r1, #248	; 0xf8
 8001c8e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001c96:	fa91 f1a1 	rbit	r1, r1
 8001c9a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001c9e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001ca2:	fab1 f181 	clz	r1, r1
 8001ca6:	b2c9      	uxtb	r1, r1
 8001ca8:	408b      	lsls	r3, r1
 8001caa:	4969      	ldr	r1, [pc, #420]	; (8001e50 <HAL_RCC_OscConfig+0x5e8>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb0:	e0fd      	b.n	8001eae <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 8088 	beq.w	8001dd4 <HAL_RCC_OscConfig+0x56c>
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001cce:	fa93 f3a3 	rbit	r3, r3
 8001cd2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001cd6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cda:	fab3 f383 	clz	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ce4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	461a      	mov	r2, r3
 8001cec:	2301      	movs	r3, #1
 8001cee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf0:	f7ff fad6 	bl	80012a0 <HAL_GetTick>
 8001cf4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf8:	e00a      	b.n	8001d10 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cfa:	f7ff fad1 	bl	80012a0 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d902      	bls.n	8001d10 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	f000 bde2 	b.w	80028d4 <HAL_RCC_OscConfig+0x106c>
 8001d10:	2302      	movs	r3, #2
 8001d12:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001d1a:	fa93 f3a3 	rbit	r3, r3
 8001d1e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001d22:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d26:	fab3 f383 	clz	r3, r3
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	095b      	lsrs	r3, r3, #5
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d102      	bne.n	8001d40 <HAL_RCC_OscConfig+0x4d8>
 8001d3a:	4b45      	ldr	r3, [pc, #276]	; (8001e50 <HAL_RCC_OscConfig+0x5e8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	e013      	b.n	8001d68 <HAL_RCC_OscConfig+0x500>
 8001d40:	2302      	movs	r3, #2
 8001d42:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d46:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001d4a:	fa93 f3a3 	rbit	r3, r3
 8001d4e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001d52:	2302      	movs	r3, #2
 8001d54:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001d58:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001d5c:	fa93 f3a3 	rbit	r3, r3
 8001d60:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001d64:	4b3a      	ldr	r3, [pc, #232]	; (8001e50 <HAL_RCC_OscConfig+0x5e8>)
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	2202      	movs	r2, #2
 8001d6a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001d6e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001d72:	fa92 f2a2 	rbit	r2, r2
 8001d76:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001d7a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001d7e:	fab2 f282 	clz	r2, r2
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	f042 0220 	orr.w	r2, r2, #32
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	f002 021f 	and.w	r2, r2, #31
 8001d8e:	2101      	movs	r1, #1
 8001d90:	fa01 f202 	lsl.w	r2, r1, r2
 8001d94:	4013      	ands	r3, r2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0af      	beq.n	8001cfa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9a:	4b2d      	ldr	r3, [pc, #180]	; (8001e50 <HAL_RCC_OscConfig+0x5e8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	21f8      	movs	r1, #248	; 0xf8
 8001db0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001db8:	fa91 f1a1 	rbit	r1, r1
 8001dbc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001dc0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001dc4:	fab1 f181 	clz	r1, r1
 8001dc8:	b2c9      	uxtb	r1, r1
 8001dca:	408b      	lsls	r3, r1
 8001dcc:	4920      	ldr	r1, [pc, #128]	; (8001e50 <HAL_RCC_OscConfig+0x5e8>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]
 8001dd2:	e06c      	b.n	8001eae <HAL_RCC_OscConfig+0x646>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001dde:	fa93 f3a3 	rbit	r3, r3
 8001de2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001de6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dea:	fab3 f383 	clz	r3, r3
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001df4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e00:	f7ff fa4e 	bl	80012a0 <HAL_GetTick>
 8001e04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e08:	e00a      	b.n	8001e20 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e0a:	f7ff fa49 	bl	80012a0 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d902      	bls.n	8001e20 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	f000 bd5a 	b.w	80028d4 <HAL_RCC_OscConfig+0x106c>
 8001e20:	2302      	movs	r3, #2
 8001e22:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e26:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001e2a:	fa93 f3a3 	rbit	r3, r3
 8001e2e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001e32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e36:	fab3 f383 	clz	r3, r3
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	095b      	lsrs	r3, r3, #5
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d104      	bne.n	8001e54 <HAL_RCC_OscConfig+0x5ec>
 8001e4a:	4b01      	ldr	r3, [pc, #4]	; (8001e50 <HAL_RCC_OscConfig+0x5e8>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	e015      	b.n	8001e7c <HAL_RCC_OscConfig+0x614>
 8001e50:	40021000 	.word	0x40021000
 8001e54:	2302      	movs	r3, #2
 8001e56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e5e:	fa93 f3a3 	rbit	r3, r3
 8001e62:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001e66:	2302      	movs	r3, #2
 8001e68:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001e6c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e70:	fa93 f3a3 	rbit	r3, r3
 8001e74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001e78:	4bc8      	ldr	r3, [pc, #800]	; (800219c <HAL_RCC_OscConfig+0x934>)
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001e82:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001e86:	fa92 f2a2 	rbit	r2, r2
 8001e8a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001e8e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001e92:	fab2 f282 	clz	r2, r2
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	f042 0220 	orr.w	r2, r2, #32
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	f002 021f 	and.w	r2, r2, #31
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1ad      	bne.n	8001e0a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 8110 	beq.w	80020e4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d079      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x760>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eda:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001ede:	fa93 f3a3 	rbit	r3, r3
 8001ee2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eea:	fab3 f383 	clz	r3, r3
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4bab      	ldr	r3, [pc, #684]	; (80021a0 <HAL_RCC_OscConfig+0x938>)
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	461a      	mov	r2, r3
 8001efa:	2301      	movs	r3, #1
 8001efc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efe:	f7ff f9cf 	bl	80012a0 <HAL_GetTick>
 8001f02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f06:	e00a      	b.n	8001f1e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f08:	f7ff f9ca 	bl	80012a0 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d902      	bls.n	8001f1e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	f000 bcdb 	b.w	80028d4 <HAL_RCC_OscConfig+0x106c>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001f28:	fa93 f3a3 	rbit	r3, r3
 8001f2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f34:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f38:	2202      	movs	r2, #2
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f40:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	fa93 f2a3 	rbit	r2, r3
 8001f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f5c:	2202      	movs	r2, #2
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	fa93 f2a3 	rbit	r2, r3
 8001f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f72:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f76:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f78:	4b88      	ldr	r3, [pc, #544]	; (800219c <HAL_RCC_OscConfig+0x934>)
 8001f7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f80:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f84:	2102      	movs	r1, #2
 8001f86:	6019      	str	r1, [r3, #0]
 8001f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	fa93 f1a3 	rbit	r1, r3
 8001f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f9e:	6019      	str	r1, [r3, #0]
  return result;
 8001fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	fab3 f383 	clz	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	f003 031f 	and.w	r3, r3, #31
 8001fba:	2101      	movs	r1, #1
 8001fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0a0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x6a0>
 8001fc6:	e08d      	b.n	80020e4 <HAL_RCC_OscConfig+0x87c>
 8001fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fcc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	fa93 f2a3 	rbit	r2, r3
 8001fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001fea:	601a      	str	r2, [r3, #0]
  return result;
 8001fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ff4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ff6:	fab3 f383 	clz	r3, r3
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b68      	ldr	r3, [pc, #416]	; (80021a0 <HAL_RCC_OscConfig+0x938>)
 8002000:	4413      	add	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	461a      	mov	r2, r3
 8002006:	2300      	movs	r3, #0
 8002008:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200a:	f7ff f949 	bl	80012a0 <HAL_GetTick>
 800200e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002012:	e00a      	b.n	800202a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002014:	f7ff f944 	bl	80012a0 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d902      	bls.n	800202a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	f000 bc55 	b.w	80028d4 <HAL_RCC_OscConfig+0x106c>
 800202a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002032:	2202      	movs	r2, #2
 8002034:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800203a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	fa93 f2a3 	rbit	r2, r3
 8002044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002048:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002052:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002056:	2202      	movs	r2, #2
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	fa93 f2a3 	rbit	r2, r3
 8002068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002076:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800207a:	2202      	movs	r2, #2
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002082:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	fa93 f2a3 	rbit	r2, r3
 800208c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002090:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002094:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002096:	4b41      	ldr	r3, [pc, #260]	; (800219c <HAL_RCC_OscConfig+0x934>)
 8002098:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800209a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80020a2:	2102      	movs	r1, #2
 80020a4:	6019      	str	r1, [r3, #0]
 80020a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020aa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	fa93 f1a3 	rbit	r1, r3
 80020b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80020bc:	6019      	str	r1, [r3, #0]
  return result;
 80020be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	fab3 f383 	clz	r3, r3
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	f003 031f 	and.w	r3, r3, #31
 80020d8:	2101      	movs	r1, #1
 80020da:	fa01 f303 	lsl.w	r3, r1, r3
 80020de:	4013      	ands	r3, r2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d197      	bne.n	8002014 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 81a1 	beq.w	800243c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020fa:	2300      	movs	r3, #0
 80020fc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002100:	4b26      	ldr	r3, [pc, #152]	; (800219c <HAL_RCC_OscConfig+0x934>)
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d116      	bne.n	800213a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800210c:	4b23      	ldr	r3, [pc, #140]	; (800219c <HAL_RCC_OscConfig+0x934>)
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	4a22      	ldr	r2, [pc, #136]	; (800219c <HAL_RCC_OscConfig+0x934>)
 8002112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002116:	61d3      	str	r3, [r2, #28]
 8002118:	4b20      	ldr	r3, [pc, #128]	; (800219c <HAL_RCC_OscConfig+0x934>)
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002124:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002132:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002134:	2301      	movs	r3, #1
 8002136:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213a:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <HAL_RCC_OscConfig+0x93c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002142:	2b00      	cmp	r3, #0
 8002144:	d11a      	bne.n	800217c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002146:	4b17      	ldr	r3, [pc, #92]	; (80021a4 <HAL_RCC_OscConfig+0x93c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a16      	ldr	r2, [pc, #88]	; (80021a4 <HAL_RCC_OscConfig+0x93c>)
 800214c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002150:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002152:	f7ff f8a5 	bl	80012a0 <HAL_GetTick>
 8002156:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215a:	e009      	b.n	8002170 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800215c:	f7ff f8a0 	bl	80012a0 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b64      	cmp	r3, #100	; 0x64
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e3b1      	b.n	80028d4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <HAL_RCC_OscConfig+0x93c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0ef      	beq.n	800215c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800217c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002180:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d10d      	bne.n	80021a8 <HAL_RCC_OscConfig+0x940>
 800218c:	4b03      	ldr	r3, [pc, #12]	; (800219c <HAL_RCC_OscConfig+0x934>)
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	4a02      	ldr	r2, [pc, #8]	; (800219c <HAL_RCC_OscConfig+0x934>)
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	6213      	str	r3, [r2, #32]
 8002198:	e03c      	b.n	8002214 <HAL_RCC_OscConfig+0x9ac>
 800219a:	bf00      	nop
 800219c:	40021000 	.word	0x40021000
 80021a0:	10908120 	.word	0x10908120
 80021a4:	40007000 	.word	0x40007000
 80021a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10c      	bne.n	80021d2 <HAL_RCC_OscConfig+0x96a>
 80021b8:	4bc1      	ldr	r3, [pc, #772]	; (80024c0 <HAL_RCC_OscConfig+0xc58>)
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	4ac0      	ldr	r2, [pc, #768]	; (80024c0 <HAL_RCC_OscConfig+0xc58>)
 80021be:	f023 0301 	bic.w	r3, r3, #1
 80021c2:	6213      	str	r3, [r2, #32]
 80021c4:	4bbe      	ldr	r3, [pc, #760]	; (80024c0 <HAL_RCC_OscConfig+0xc58>)
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	4abd      	ldr	r2, [pc, #756]	; (80024c0 <HAL_RCC_OscConfig+0xc58>)
 80021ca:	f023 0304 	bic.w	r3, r3, #4
 80021ce:	6213      	str	r3, [r2, #32]
 80021d0:	e020      	b.n	8002214 <HAL_RCC_OscConfig+0x9ac>
 80021d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	2b05      	cmp	r3, #5
 80021e0:	d10c      	bne.n	80021fc <HAL_RCC_OscConfig+0x994>
 80021e2:	4bb7      	ldr	r3, [pc, #732]	; (80024c0 <HAL_RCC_OscConfig+0xc58>)
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	4ab6      	ldr	r2, [pc, #728]	; (80024c0 <HAL_RCC_OscConfig+0xc58>)
 80021e8:	f043 0304 	orr.w	r3, r3, #4
 80021ec:	6213      	str	r3, [r2, #32]
 80021ee:	4bb4      	ldr	r3, [pc, #720]	; (80024c0 <HAL_RCC_OscConfig+0xc58>)
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	4ab3      	ldr	r2, [pc, #716]	; (80024c0 <HAL_RCC_OscConfig+0xc58>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	6213      	str	r3, [r2, #32]
 80021fa:	e00b      	b.n	8002214 <HAL_RCC_OscConfig+0x9ac>
 80021fc:	4bb0      	ldr	r3, [pc, #704]	; (80024c0 <HAL_RCC_OscConfig+0xc58>)
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	4aaf      	ldr	r2, [pc, #700]	; (80024c0 <HAL_RCC_OscConfig+0xc58>)
 8002202:	f023 0301 	bic.w	r3, r3, #1
 8002206:	6213      	str	r3, [r2, #32]
 8002208:	4bad      	ldr	r3, [pc, #692]	; (80024c0 <HAL_RCC_OscConfig+0xc58>)
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	4aac      	ldr	r2, [pc, #688]	; (80024c0 <HAL_RCC_OscConfig+0xc58>)
 800220e:	f023 0304 	bic.w	r3, r3, #4
 8002212:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002218:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 8081 	beq.w	8002328 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002226:	f7ff f83b 	bl	80012a0 <HAL_GetTick>
 800222a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800222e:	e00b      	b.n	8002248 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002230:	f7ff f836 	bl	80012a0 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002240:	4293      	cmp	r3, r2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e345      	b.n	80028d4 <HAL_RCC_OscConfig+0x106c>
 8002248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002250:	2202      	movs	r2, #2
 8002252:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002258:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	fa93 f2a3 	rbit	r2, r3
 8002262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002266:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002270:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002274:	2202      	movs	r2, #2
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	fa93 f2a3 	rbit	r2, r3
 8002286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800228e:	601a      	str	r2, [r3, #0]
  return result;
 8002290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002294:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002298:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	095b      	lsrs	r3, r3, #5
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	f043 0302 	orr.w	r3, r3, #2
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d102      	bne.n	80022b4 <HAL_RCC_OscConfig+0xa4c>
 80022ae:	4b84      	ldr	r3, [pc, #528]	; (80024c0 <HAL_RCC_OscConfig+0xc58>)
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	e013      	b.n	80022dc <HAL_RCC_OscConfig+0xa74>
 80022b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80022bc:	2202      	movs	r2, #2
 80022be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	fa93 f2a3 	rbit	r2, r3
 80022ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	4b79      	ldr	r3, [pc, #484]	; (80024c0 <HAL_RCC_OscConfig+0xc58>)
 80022da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022e0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80022e4:	2102      	movs	r1, #2
 80022e6:	6011      	str	r1, [r2, #0]
 80022e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022ec:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	fa92 f1a2 	rbit	r1, r2
 80022f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022fa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80022fe:	6011      	str	r1, [r2, #0]
  return result;
 8002300:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002304:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002308:	6812      	ldr	r2, [r2, #0]
 800230a:	fab2 f282 	clz	r2, r2
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	f002 021f 	and.w	r2, r2, #31
 800231a:	2101      	movs	r1, #1
 800231c:	fa01 f202 	lsl.w	r2, r1, r2
 8002320:	4013      	ands	r3, r2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d084      	beq.n	8002230 <HAL_RCC_OscConfig+0x9c8>
 8002326:	e07f      	b.n	8002428 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002328:	f7fe ffba 	bl	80012a0 <HAL_GetTick>
 800232c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002330:	e00b      	b.n	800234a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002332:	f7fe ffb5 	bl	80012a0 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e2c4      	b.n	80028d4 <HAL_RCC_OscConfig+0x106c>
 800234a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002352:	2202      	movs	r2, #2
 8002354:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	fa93 f2a3 	rbit	r2, r3
 8002364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002368:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002372:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002376:	2202      	movs	r2, #2
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	fa93 f2a3 	rbit	r2, r3
 8002388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002390:	601a      	str	r2, [r3, #0]
  return result;
 8002392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002396:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800239a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800239c:	fab3 f383 	clz	r3, r3
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	095b      	lsrs	r3, r3, #5
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	f043 0302 	orr.w	r3, r3, #2
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d102      	bne.n	80023b6 <HAL_RCC_OscConfig+0xb4e>
 80023b0:	4b43      	ldr	r3, [pc, #268]	; (80024c0 <HAL_RCC_OscConfig+0xc58>)
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	e013      	b.n	80023de <HAL_RCC_OscConfig+0xb76>
 80023b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ba:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80023be:	2202      	movs	r2, #2
 80023c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	fa93 f2a3 	rbit	r2, r3
 80023d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <HAL_RCC_OscConfig+0xc58>)
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023e2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80023e6:	2102      	movs	r1, #2
 80023e8:	6011      	str	r1, [r2, #0]
 80023ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023ee:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80023f2:	6812      	ldr	r2, [r2, #0]
 80023f4:	fa92 f1a2 	rbit	r1, r2
 80023f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023fc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002400:	6011      	str	r1, [r2, #0]
  return result;
 8002402:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002406:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800240a:	6812      	ldr	r2, [r2, #0]
 800240c:	fab2 f282 	clz	r2, r2
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	f002 021f 	and.w	r2, r2, #31
 800241c:	2101      	movs	r1, #1
 800241e:	fa01 f202 	lsl.w	r2, r1, r2
 8002422:	4013      	ands	r3, r2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d184      	bne.n	8002332 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002428:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800242c:	2b01      	cmp	r3, #1
 800242e:	d105      	bne.n	800243c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002430:	4b23      	ldr	r3, [pc, #140]	; (80024c0 <HAL_RCC_OscConfig+0xc58>)
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	4a22      	ldr	r2, [pc, #136]	; (80024c0 <HAL_RCC_OscConfig+0xc58>)
 8002436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800243a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800243c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002440:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 8242 	beq.w	80028d2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800244e:	4b1c      	ldr	r3, [pc, #112]	; (80024c0 <HAL_RCC_OscConfig+0xc58>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b08      	cmp	r3, #8
 8002458:	f000 8213 	beq.w	8002882 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800245c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002460:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	2b02      	cmp	r3, #2
 800246a:	f040 8162 	bne.w	8002732 <HAL_RCC_OscConfig+0xeca>
 800246e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002472:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002476:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800247a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002480:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	fa93 f2a3 	rbit	r2, r3
 800248a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002492:	601a      	str	r2, [r3, #0]
  return result;
 8002494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002498:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800249c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249e:	fab3 f383 	clz	r3, r3
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	461a      	mov	r2, r3
 80024b0:	2300      	movs	r3, #0
 80024b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b4:	f7fe fef4 	bl	80012a0 <HAL_GetTick>
 80024b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024bc:	e00c      	b.n	80024d8 <HAL_RCC_OscConfig+0xc70>
 80024be:	bf00      	nop
 80024c0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c4:	f7fe feec 	bl	80012a0 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e1fd      	b.n	80028d4 <HAL_RCC_OscConfig+0x106c>
 80024d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024dc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80024e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ea:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	fa93 f2a3 	rbit	r2, r3
 80024f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80024fc:	601a      	str	r2, [r3, #0]
  return result;
 80024fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002502:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002506:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002508:	fab3 f383 	clz	r3, r3
 800250c:	b2db      	uxtb	r3, r3
 800250e:	095b      	lsrs	r3, r3, #5
 8002510:	b2db      	uxtb	r3, r3
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b01      	cmp	r3, #1
 800251a:	d102      	bne.n	8002522 <HAL_RCC_OscConfig+0xcba>
 800251c:	4bb0      	ldr	r3, [pc, #704]	; (80027e0 <HAL_RCC_OscConfig+0xf78>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	e027      	b.n	8002572 <HAL_RCC_OscConfig+0xd0a>
 8002522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002526:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800252a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800252e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002534:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	fa93 f2a3 	rbit	r2, r3
 800253e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002542:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002550:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	fa93 f2a3 	rbit	r2, r3
 8002564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002568:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	4b9c      	ldr	r3, [pc, #624]	; (80027e0 <HAL_RCC_OscConfig+0xf78>)
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002576:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800257a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800257e:	6011      	str	r1, [r2, #0]
 8002580:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002584:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	fa92 f1a2 	rbit	r1, r2
 800258e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002592:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002596:	6011      	str	r1, [r2, #0]
  return result;
 8002598:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800259c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	fab2 f282 	clz	r2, r2
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	f042 0220 	orr.w	r2, r2, #32
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	f002 021f 	and.w	r2, r2, #31
 80025b2:	2101      	movs	r1, #1
 80025b4:	fa01 f202 	lsl.w	r2, r1, r2
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d182      	bne.n	80024c4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025be:	4b88      	ldr	r3, [pc, #544]	; (80027e0 <HAL_RCC_OscConfig+0xf78>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80025d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	430b      	orrs	r3, r1
 80025e0:	497f      	ldr	r1, [pc, #508]	; (80027e0 <HAL_RCC_OscConfig+0xf78>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	604b      	str	r3, [r1, #4]
 80025e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ea:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80025ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	fa93 f2a3 	rbit	r2, r3
 8002602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002606:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800260a:	601a      	str	r2, [r3, #0]
  return result;
 800260c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002610:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002614:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002616:	fab3 f383 	clz	r3, r3
 800261a:	b2db      	uxtb	r3, r3
 800261c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002620:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	461a      	mov	r2, r3
 8002628:	2301      	movs	r3, #1
 800262a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262c:	f7fe fe38 	bl	80012a0 <HAL_GetTick>
 8002630:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002634:	e009      	b.n	800264a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002636:	f7fe fe33 	bl	80012a0 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e144      	b.n	80028d4 <HAL_RCC_OscConfig+0x106c>
 800264a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002652:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002656:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	fa93 f2a3 	rbit	r2, r3
 8002666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800266e:	601a      	str	r2, [r3, #0]
  return result;
 8002670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002674:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002678:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800267a:	fab3 f383 	clz	r3, r3
 800267e:	b2db      	uxtb	r3, r3
 8002680:	095b      	lsrs	r3, r3, #5
 8002682:	b2db      	uxtb	r3, r3
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b01      	cmp	r3, #1
 800268c:	d102      	bne.n	8002694 <HAL_RCC_OscConfig+0xe2c>
 800268e:	4b54      	ldr	r3, [pc, #336]	; (80027e0 <HAL_RCC_OscConfig+0xf78>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	e027      	b.n	80026e4 <HAL_RCC_OscConfig+0xe7c>
 8002694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002698:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800269c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	fa93 f2a3 	rbit	r2, r3
 80026b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026be:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80026c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026cc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	fa93 f2a3 	rbit	r2, r3
 80026d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026da:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	4b3f      	ldr	r3, [pc, #252]	; (80027e0 <HAL_RCC_OscConfig+0xf78>)
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026e8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80026ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026f0:	6011      	str	r1, [r2, #0]
 80026f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026f6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	fa92 f1a2 	rbit	r1, r2
 8002700:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002704:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002708:	6011      	str	r1, [r2, #0]
  return result;
 800270a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800270e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	fab2 f282 	clz	r2, r2
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	f042 0220 	orr.w	r2, r2, #32
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	f002 021f 	and.w	r2, r2, #31
 8002724:	2101      	movs	r1, #1
 8002726:	fa01 f202 	lsl.w	r2, r1, r2
 800272a:	4013      	ands	r3, r2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d082      	beq.n	8002636 <HAL_RCC_OscConfig+0xdce>
 8002730:	e0cf      	b.n	80028d2 <HAL_RCC_OscConfig+0x106a>
 8002732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002736:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800273a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800273e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002744:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	fa93 f2a3 	rbit	r2, r3
 800274e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002752:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002756:	601a      	str	r2, [r3, #0]
  return result;
 8002758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002760:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002762:	fab3 f383 	clz	r3, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800276c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	461a      	mov	r2, r3
 8002774:	2300      	movs	r3, #0
 8002776:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7fe fd92 	bl	80012a0 <HAL_GetTick>
 800277c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002780:	e009      	b.n	8002796 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002782:	f7fe fd8d 	bl	80012a0 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e09e      	b.n	80028d4 <HAL_RCC_OscConfig+0x106c>
 8002796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800279e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	fa93 f2a3 	rbit	r2, r3
 80027b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80027ba:	601a      	str	r2, [r3, #0]
  return result;
 80027bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80027c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	095b      	lsrs	r3, r3, #5
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d104      	bne.n	80027e4 <HAL_RCC_OscConfig+0xf7c>
 80027da:	4b01      	ldr	r3, [pc, #4]	; (80027e0 <HAL_RCC_OscConfig+0xf78>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	e029      	b.n	8002834 <HAL_RCC_OscConfig+0xfcc>
 80027e0:	40021000 	.word	0x40021000
 80027e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80027ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	fa93 f2a3 	rbit	r2, r3
 8002800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002804:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002812:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	fa93 f2a3 	rbit	r2, r3
 8002826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	4b2b      	ldr	r3, [pc, #172]	; (80028e0 <HAL_RCC_OscConfig+0x1078>)
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002838:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800283c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002840:	6011      	str	r1, [r2, #0]
 8002842:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002846:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800284a:	6812      	ldr	r2, [r2, #0]
 800284c:	fa92 f1a2 	rbit	r1, r2
 8002850:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002854:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002858:	6011      	str	r1, [r2, #0]
  return result;
 800285a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800285e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	fab2 f282 	clz	r2, r2
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	f042 0220 	orr.w	r2, r2, #32
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	f002 021f 	and.w	r2, r2, #31
 8002874:	2101      	movs	r1, #1
 8002876:	fa01 f202 	lsl.w	r2, r1, r2
 800287a:	4013      	ands	r3, r2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d180      	bne.n	8002782 <HAL_RCC_OscConfig+0xf1a>
 8002880:	e027      	b.n	80028d2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002886:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d101      	bne.n	8002896 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e01e      	b.n	80028d4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002896:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <HAL_RCC_OscConfig+0x1078>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800289e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80028a2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d10b      	bne.n	80028ce <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80028b6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80028ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d001      	beq.n	80028d2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000

080028e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b09e      	sub	sp, #120	; 0x78
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e162      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028fc:	4b90      	ldr	r3, [pc, #576]	; (8002b40 <HAL_RCC_ClockConfig+0x25c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d910      	bls.n	800292c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290a:	4b8d      	ldr	r3, [pc, #564]	; (8002b40 <HAL_RCC_ClockConfig+0x25c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 0207 	bic.w	r2, r3, #7
 8002912:	498b      	ldr	r1, [pc, #556]	; (8002b40 <HAL_RCC_ClockConfig+0x25c>)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	4313      	orrs	r3, r2
 8002918:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800291a:	4b89      	ldr	r3, [pc, #548]	; (8002b40 <HAL_RCC_ClockConfig+0x25c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e14a      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002938:	4b82      	ldr	r3, [pc, #520]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	497f      	ldr	r1, [pc, #508]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 8002946:	4313      	orrs	r3, r2
 8002948:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 80dc 	beq.w	8002b10 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d13c      	bne.n	80029da <HAL_RCC_ClockConfig+0xf6>
 8002960:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002964:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002968:	fa93 f3a3 	rbit	r3, r3
 800296c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800296e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002970:	fab3 f383 	clz	r3, r3
 8002974:	b2db      	uxtb	r3, r3
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	b2db      	uxtb	r3, r3
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b01      	cmp	r3, #1
 8002982:	d102      	bne.n	800298a <HAL_RCC_ClockConfig+0xa6>
 8002984:	4b6f      	ldr	r3, [pc, #444]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	e00f      	b.n	80029aa <HAL_RCC_ClockConfig+0xc6>
 800298a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800298e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002990:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	667b      	str	r3, [r7, #100]	; 0x64
 8002998:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800299c:	663b      	str	r3, [r7, #96]	; 0x60
 800299e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029a0:	fa93 f3a3 	rbit	r3, r3
 80029a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029a6:	4b67      	ldr	r3, [pc, #412]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80029b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029b2:	fa92 f2a2 	rbit	r2, r2
 80029b6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80029b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029ba:	fab2 f282 	clz	r2, r2
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	f042 0220 	orr.w	r2, r2, #32
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	f002 021f 	and.w	r2, r2, #31
 80029ca:	2101      	movs	r1, #1
 80029cc:	fa01 f202 	lsl.w	r2, r1, r2
 80029d0:	4013      	ands	r3, r2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d17b      	bne.n	8002ace <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e0f3      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d13c      	bne.n	8002a5c <HAL_RCC_ClockConfig+0x178>
 80029e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ea:	fa93 f3a3 	rbit	r3, r3
 80029ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80029f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	095b      	lsrs	r3, r3, #5
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d102      	bne.n	8002a0c <HAL_RCC_ClockConfig+0x128>
 8002a06:	4b4f      	ldr	r3, [pc, #316]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	e00f      	b.n	8002a2c <HAL_RCC_ClockConfig+0x148>
 8002a0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a10:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a14:	fa93 f3a3 	rbit	r3, r3
 8002a18:	647b      	str	r3, [r7, #68]	; 0x44
 8002a1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a1e:	643b      	str	r3, [r7, #64]	; 0x40
 8002a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a22:	fa93 f3a3 	rbit	r3, r3
 8002a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a28:	4b46      	ldr	r3, [pc, #280]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a30:	63ba      	str	r2, [r7, #56]	; 0x38
 8002a32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a34:	fa92 f2a2 	rbit	r2, r2
 8002a38:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002a3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a3c:	fab2 f282 	clz	r2, r2
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	f042 0220 	orr.w	r2, r2, #32
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	f002 021f 	and.w	r2, r2, #31
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a52:	4013      	ands	r3, r2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d13a      	bne.n	8002ace <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e0b2      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x2de>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a62:	fa93 f3a3 	rbit	r3, r3
 8002a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6a:	fab3 f383 	clz	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	095b      	lsrs	r3, r3, #5
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d102      	bne.n	8002a84 <HAL_RCC_ClockConfig+0x1a0>
 8002a7e:	4b31      	ldr	r3, [pc, #196]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	e00d      	b.n	8002aa0 <HAL_RCC_ClockConfig+0x1bc>
 8002a84:	2302      	movs	r3, #2
 8002a86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8a:	fa93 f3a3 	rbit	r3, r3
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a90:	2302      	movs	r3, #2
 8002a92:	623b      	str	r3, [r7, #32]
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	fa93 f3a3 	rbit	r3, r3
 8002a9a:	61fb      	str	r3, [r7, #28]
 8002a9c:	4b29      	ldr	r3, [pc, #164]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	61ba      	str	r2, [r7, #24]
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	fa92 f2a2 	rbit	r2, r2
 8002aaa:	617a      	str	r2, [r7, #20]
  return result;
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	fab2 f282 	clz	r2, r2
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	f042 0220 	orr.w	r2, r2, #32
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	f002 021f 	and.w	r2, r2, #31
 8002abe:	2101      	movs	r1, #1
 8002ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e079      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ace:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f023 0203 	bic.w	r2, r3, #3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	491a      	ldr	r1, [pc, #104]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ae0:	f7fe fbde 	bl	80012a0 <HAL_GetTick>
 8002ae4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae6:	e00a      	b.n	8002afe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae8:	f7fe fbda 	bl	80012a0 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e061      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afe:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f003 020c 	and.w	r2, r3, #12
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d1eb      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_RCC_ClockConfig+0x25c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d214      	bcs.n	8002b48 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1e:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <HAL_RCC_ClockConfig+0x25c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 0207 	bic.w	r2, r3, #7
 8002b26:	4906      	ldr	r1, [pc, #24]	; (8002b40 <HAL_RCC_ClockConfig+0x25c>)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2e:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <HAL_RCC_ClockConfig+0x25c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e040      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x2de>
 8002b40:	40022000 	.word	0x40022000
 8002b44:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d008      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b54:	4b1d      	ldr	r3, [pc, #116]	; (8002bcc <HAL_RCC_ClockConfig+0x2e8>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	491a      	ldr	r1, [pc, #104]	; (8002bcc <HAL_RCC_ClockConfig+0x2e8>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d009      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b72:	4b16      	ldr	r3, [pc, #88]	; (8002bcc <HAL_RCC_ClockConfig+0x2e8>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4912      	ldr	r1, [pc, #72]	; (8002bcc <HAL_RCC_ClockConfig+0x2e8>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b86:	f000 f829 	bl	8002bdc <HAL_RCC_GetSysClockFreq>
 8002b8a:	4601      	mov	r1, r0
 8002b8c:	4b0f      	ldr	r3, [pc, #60]	; (8002bcc <HAL_RCC_ClockConfig+0x2e8>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b94:	22f0      	movs	r2, #240	; 0xf0
 8002b96:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	fa92 f2a2 	rbit	r2, r2
 8002b9e:	60fa      	str	r2, [r7, #12]
  return result;
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	fab2 f282 	clz	r2, r2
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	40d3      	lsrs	r3, r2
 8002baa:	4a09      	ldr	r2, [pc, #36]	; (8002bd0 <HAL_RCC_ClockConfig+0x2ec>)
 8002bac:	5cd3      	ldrb	r3, [r2, r3]
 8002bae:	fa21 f303 	lsr.w	r3, r1, r3
 8002bb2:	4a08      	ldr	r2, [pc, #32]	; (8002bd4 <HAL_RCC_ClockConfig+0x2f0>)
 8002bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002bb6:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <HAL_RCC_ClockConfig+0x2f4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe fb2c 	bl	8001218 <HAL_InitTick>
  
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3778      	adds	r7, #120	; 0x78
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	08004bc4 	.word	0x08004bc4
 8002bd4:	20000000 	.word	0x20000000
 8002bd8:	20000004 	.word	0x20000004

08002bdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b08b      	sub	sp, #44	; 0x2c
 8002be0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	61fb      	str	r3, [r7, #28]
 8002be6:	2300      	movs	r3, #0
 8002be8:	61bb      	str	r3, [r7, #24]
 8002bea:	2300      	movs	r3, #0
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002bf6:	4b29      	ldr	r3, [pc, #164]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d002      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0x30>
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d003      	beq.n	8002c12 <HAL_RCC_GetSysClockFreq+0x36>
 8002c0a:	e03c      	b.n	8002c86 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c0c:	4b24      	ldr	r3, [pc, #144]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c0e:	623b      	str	r3, [r7, #32]
      break;
 8002c10:	e03c      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002c18:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002c1c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	fa92 f2a2 	rbit	r2, r2
 8002c24:	607a      	str	r2, [r7, #4]
  return result;
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	fab2 f282 	clz	r2, r2
 8002c2c:	b2d2      	uxtb	r2, r2
 8002c2e:	40d3      	lsrs	r3, r2
 8002c30:	4a1c      	ldr	r2, [pc, #112]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c32:	5cd3      	ldrb	r3, [r2, r3]
 8002c34:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002c36:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	220f      	movs	r2, #15
 8002c40:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	fa92 f2a2 	rbit	r2, r2
 8002c48:	60fa      	str	r2, [r7, #12]
  return result;
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	fab2 f282 	clz	r2, r2
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	40d3      	lsrs	r3, r2
 8002c54:	4a14      	ldr	r2, [pc, #80]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c56:	5cd3      	ldrb	r3, [r2, r3]
 8002c58:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c64:	4a0e      	ldr	r2, [pc, #56]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	fb02 f303 	mul.w	r3, r2, r3
 8002c72:	627b      	str	r3, [r7, #36]	; 0x24
 8002c74:	e004      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	4a0c      	ldr	r2, [pc, #48]	; (8002cac <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c7a:	fb02 f303 	mul.w	r3, r2, r3
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	623b      	str	r3, [r7, #32]
      break;
 8002c84:	e002      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c86:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c88:	623b      	str	r3, [r7, #32]
      break;
 8002c8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	372c      	adds	r7, #44	; 0x2c
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	007a1200 	.word	0x007a1200
 8002ca4:	08004bdc 	.word	0x08004bdc
 8002ca8:	08004bec 	.word	0x08004bec
 8002cac:	003d0900 	.word	0x003d0900

08002cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb4:	4b03      	ldr	r3, [pc, #12]	; (8002cc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	20000000 	.word	0x20000000

08002cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002cce:	f7ff ffef 	bl	8002cb0 <HAL_RCC_GetHCLKFreq>
 8002cd2:	4601      	mov	r1, r0
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002cdc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ce0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	fa92 f2a2 	rbit	r2, r2
 8002ce8:	603a      	str	r2, [r7, #0]
  return result;
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	fab2 f282 	clz	r2, r2
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	40d3      	lsrs	r3, r2
 8002cf4:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002cf6:	5cd3      	ldrb	r3, [r2, r3]
 8002cf8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40021000 	.word	0x40021000
 8002d08:	08004bd4 	.word	0x08004bd4

08002d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002d12:	f7ff ffcd 	bl	8002cb0 <HAL_RCC_GetHCLKFreq>
 8002d16:	4601      	mov	r1, r0
 8002d18:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002d20:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002d24:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	fa92 f2a2 	rbit	r2, r2
 8002d2c:	603a      	str	r2, [r7, #0]
  return result;
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	fab2 f282 	clz	r2, r2
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	40d3      	lsrs	r3, r2
 8002d38:	4a04      	ldr	r2, [pc, #16]	; (8002d4c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002d3a:	5cd3      	ldrb	r3, [r2, r3]
 8002d3c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002d40:	4618      	mov	r0, r3
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	08004bd4 	.word	0x08004bd4

08002d50 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b092      	sub	sp, #72	; 0x48
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002d60:	2300      	movs	r3, #0
 8002d62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 80cd 	beq.w	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d74:	4b8e      	ldr	r3, [pc, #568]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10e      	bne.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d80:	4b8b      	ldr	r3, [pc, #556]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	4a8a      	ldr	r2, [pc, #552]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d8a:	61d3      	str	r3, [r2, #28]
 8002d8c:	4b88      	ldr	r3, [pc, #544]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9e:	4b85      	ldr	r3, [pc, #532]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d118      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002daa:	4b82      	ldr	r3, [pc, #520]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a81      	ldr	r2, [pc, #516]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002db6:	f7fe fa73 	bl	80012a0 <HAL_GetTick>
 8002dba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dbe:	f7fe fa6f 	bl	80012a0 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b64      	cmp	r3, #100	; 0x64
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e0ea      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd0:	4b78      	ldr	r3, [pc, #480]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0f0      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ddc:	4b74      	ldr	r3, [pc, #464]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002de4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d07d      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d076      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dfa:	4b6d      	ldr	r3, [pc, #436]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e08:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0c:	fa93 f3a3 	rbit	r3, r3
 8002e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e14:	fab3 f383 	clz	r3, r3
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	4b66      	ldr	r3, [pc, #408]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	461a      	mov	r2, r3
 8002e24:	2301      	movs	r3, #1
 8002e26:	6013      	str	r3, [r2, #0]
 8002e28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e30:	fa93 f3a3 	rbit	r3, r3
 8002e34:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e38:	fab3 f383 	clz	r3, r3
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	461a      	mov	r2, r3
 8002e40:	4b5d      	ldr	r3, [pc, #372]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e42:	4413      	add	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	461a      	mov	r2, r3
 8002e48:	2300      	movs	r3, #0
 8002e4a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e4c:	4a58      	ldr	r2, [pc, #352]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e50:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d045      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5c:	f7fe fa20 	bl	80012a0 <HAL_GetTick>
 8002e60:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e62:	e00a      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e64:	f7fe fa1c 	bl	80012a0 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e095      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e80:	fa93 f3a3 	rbit	r3, r3
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
 8002e86:	2302      	movs	r3, #2
 8002e88:	623b      	str	r3, [r7, #32]
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	fa93 f3a3 	rbit	r3, r3
 8002e90:	61fb      	str	r3, [r7, #28]
  return result;
 8002e92:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e94:	fab3 f383 	clz	r3, r3
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	095b      	lsrs	r3, r3, #5
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	f043 0302 	orr.w	r3, r3, #2
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d102      	bne.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002ea8:	4b41      	ldr	r3, [pc, #260]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	e007      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	fa93 f3a3 	rbit	r3, r3
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	4b3d      	ldr	r3, [pc, #244]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	613a      	str	r2, [r7, #16]
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	fa92 f2a2 	rbit	r2, r2
 8002ec8:	60fa      	str	r2, [r7, #12]
  return result;
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	fab2 f282 	clz	r2, r2
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	f002 021f 	and.w	r2, r2, #31
 8002edc:	2101      	movs	r1, #1
 8002ede:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0bd      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002ee8:	4b31      	ldr	r3, [pc, #196]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	492e      	ldr	r1, [pc, #184]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002efa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d105      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f02:	4b2b      	ldr	r3, [pc, #172]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	4a2a      	ldr	r2, [pc, #168]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f0c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d008      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f1a:	4b25      	ldr	r3, [pc, #148]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	f023 0203 	bic.w	r2, r3, #3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	4922      	ldr	r1, [pc, #136]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0320 	and.w	r3, r3, #32
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f38:	4b1d      	ldr	r3, [pc, #116]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3c:	f023 0210 	bic.w	r2, r3, #16
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	491a      	ldr	r1, [pc, #104]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d008      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f56:	4b16      	ldr	r3, [pc, #88]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	4913      	ldr	r1, [pc, #76]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d008      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f74:	4b0e      	ldr	r3, [pc, #56]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	490b      	ldr	r1, [pc, #44]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d008      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002f92:	4b07      	ldr	r3, [pc, #28]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	4904      	ldr	r1, [pc, #16]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3748      	adds	r7, #72	; 0x48
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	40007000 	.word	0x40007000
 8002fb8:	10908100 	.word	0x10908100

08002fbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e095      	b.n	80030fa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d108      	bne.n	8002fe8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fde:	d009      	beq.n	8002ff4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	61da      	str	r2, [r3, #28]
 8002fe6:	e005      	b.n	8002ff4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7fd ffda 	bl	8000fc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800302a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003034:	d902      	bls.n	800303c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	e002      	b.n	8003042 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800303c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003040:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800304a:	d007      	beq.n	800305c <HAL_SPI_Init+0xa0>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003054:	d002      	beq.n	800305c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003094:	431a      	orrs	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309e:	ea42 0103 	orr.w	r1, r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	0c1b      	lsrs	r3, r3, #16
 80030b8:	f003 0204 	and.w	r2, r3, #4
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80030d8:	ea42 0103 	orr.w	r1, r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b088      	sub	sp, #32
 8003106:	af00      	add	r7, sp, #0
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	603b      	str	r3, [r7, #0]
 800310e:	4613      	mov	r3, r2
 8003110:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800311c:	2b01      	cmp	r3, #1
 800311e:	d101      	bne.n	8003124 <HAL_SPI_Transmit+0x22>
 8003120:	2302      	movs	r3, #2
 8003122:	e15f      	b.n	80033e4 <HAL_SPI_Transmit+0x2e2>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800312c:	f7fe f8b8 	bl	80012a0 <HAL_GetTick>
 8003130:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003132:	88fb      	ldrh	r3, [r7, #6]
 8003134:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b01      	cmp	r3, #1
 8003140:	d002      	beq.n	8003148 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003142:	2302      	movs	r3, #2
 8003144:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003146:	e148      	b.n	80033da <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d002      	beq.n	8003154 <HAL_SPI_Transmit+0x52>
 800314e:	88fb      	ldrh	r3, [r7, #6]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d102      	bne.n	800315a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003158:	e13f      	b.n	80033da <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2203      	movs	r2, #3
 800315e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	88fa      	ldrh	r2, [r7, #6]
 8003172:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	88fa      	ldrh	r2, [r7, #6]
 8003178:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031a4:	d10f      	bne.n	80031c6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d0:	2b40      	cmp	r3, #64	; 0x40
 80031d2:	d007      	beq.n	80031e4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031ec:	d94f      	bls.n	800328e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d002      	beq.n	80031fc <HAL_SPI_Transmit+0xfa>
 80031f6:	8afb      	ldrh	r3, [r7, #22]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d142      	bne.n	8003282 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003200:	881a      	ldrh	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320c:	1c9a      	adds	r2, r3, #2
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003216:	b29b      	uxth	r3, r3
 8003218:	3b01      	subs	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003220:	e02f      	b.n	8003282 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b02      	cmp	r3, #2
 800322e:	d112      	bne.n	8003256 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003234:	881a      	ldrh	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003240:	1c9a      	adds	r2, r3, #2
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800324a:	b29b      	uxth	r3, r3
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003254:	e015      	b.n	8003282 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003256:	f7fe f823 	bl	80012a0 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d803      	bhi.n	800326e <HAL_SPI_Transmit+0x16c>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326c:	d102      	bne.n	8003274 <HAL_SPI_Transmit+0x172>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d106      	bne.n	8003282 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003280:	e0ab      	b.n	80033da <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003286:	b29b      	uxth	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1ca      	bne.n	8003222 <HAL_SPI_Transmit+0x120>
 800328c:	e080      	b.n	8003390 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <HAL_SPI_Transmit+0x19a>
 8003296:	8afb      	ldrh	r3, [r7, #22]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d174      	bne.n	8003386 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d912      	bls.n	80032cc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032aa:	881a      	ldrh	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b6:	1c9a      	adds	r2, r3, #2
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	3b02      	subs	r3, #2
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032ca:	e05c      	b.n	8003386 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	330c      	adds	r3, #12
 80032d6:	7812      	ldrb	r2, [r2, #0]
 80032d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032de:	1c5a      	adds	r2, r3, #1
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	3b01      	subs	r3, #1
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80032f2:	e048      	b.n	8003386 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d12b      	bne.n	800335a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003306:	b29b      	uxth	r3, r3
 8003308:	2b01      	cmp	r3, #1
 800330a:	d912      	bls.n	8003332 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003310:	881a      	ldrh	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	1c9a      	adds	r2, r3, #2
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003326:	b29b      	uxth	r3, r3
 8003328:	3b02      	subs	r3, #2
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003330:	e029      	b.n	8003386 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	330c      	adds	r3, #12
 800333c:	7812      	ldrb	r2, [r2, #0]
 800333e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800334e:	b29b      	uxth	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003358:	e015      	b.n	8003386 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800335a:	f7fd ffa1 	bl	80012a0 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d803      	bhi.n	8003372 <HAL_SPI_Transmit+0x270>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003370:	d102      	bne.n	8003378 <HAL_SPI_Transmit+0x276>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d106      	bne.n	8003386 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003384:	e029      	b.n	80033da <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800338a:	b29b      	uxth	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1b1      	bne.n	80032f4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	6839      	ldr	r1, [r7, #0]
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 fd07 	bl	8003da8 <SPI_EndRxTxTransaction>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d002      	beq.n	80033a6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2220      	movs	r2, #32
 80033a4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10a      	bne.n	80033c4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033ae:	2300      	movs	r3, #0
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	613b      	str	r3, [r7, #16]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	613b      	str	r3, [r7, #16]
 80033c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d002      	beq.n	80033d2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	77fb      	strb	r3, [r7, #31]
 80033d0:	e003      	b.n	80033da <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80033e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3720      	adds	r7, #32
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	603b      	str	r3, [r7, #0]
 80033f8:	4613      	mov	r3, r2
 80033fa:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b01      	cmp	r3, #1
 800340a:	d002      	beq.n	8003412 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800340c:	2302      	movs	r3, #2
 800340e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003410:	e11a      	b.n	8003648 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800341a:	d112      	bne.n	8003442 <HAL_SPI_Receive+0x56>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10e      	bne.n	8003442 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2204      	movs	r2, #4
 8003428:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800342c:	88fa      	ldrh	r2, [r7, #6]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	4613      	mov	r3, r2
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	68b9      	ldr	r1, [r7, #8]
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 f90e 	bl	800365a <HAL_SPI_TransmitReceive>
 800343e:	4603      	mov	r3, r0
 8003440:	e107      	b.n	8003652 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_SPI_Receive+0x64>
 800344c:	2302      	movs	r3, #2
 800344e:	e100      	b.n	8003652 <HAL_SPI_Receive+0x266>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003458:	f7fd ff22 	bl	80012a0 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d002      	beq.n	800346a <HAL_SPI_Receive+0x7e>
 8003464:	88fb      	ldrh	r3, [r7, #6]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d102      	bne.n	8003470 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800346e:	e0eb      	b.n	8003648 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2204      	movs	r2, #4
 8003474:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	88fa      	ldrh	r2, [r7, #6]
 8003488:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	88fa      	ldrh	r2, [r7, #6]
 8003490:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034ba:	d908      	bls.n	80034ce <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034ca:	605a      	str	r2, [r3, #4]
 80034cc:	e007      	b.n	80034de <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034dc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034e6:	d10f      	bne.n	8003508 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003506:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003512:	2b40      	cmp	r3, #64	; 0x40
 8003514:	d007      	beq.n	8003526 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003524:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800352e:	d86f      	bhi.n	8003610 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003530:	e034      	b.n	800359c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b01      	cmp	r3, #1
 800353e:	d117      	bne.n	8003570 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f103 020c 	add.w	r2, r3, #12
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	7812      	ldrb	r2, [r2, #0]
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003562:	b29b      	uxth	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800356e:	e015      	b.n	800359c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003570:	f7fd fe96 	bl	80012a0 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d803      	bhi.n	8003588 <HAL_SPI_Receive+0x19c>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003586:	d102      	bne.n	800358e <HAL_SPI_Receive+0x1a2>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d106      	bne.n	800359c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800359a:	e055      	b.n	8003648 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1c4      	bne.n	8003532 <HAL_SPI_Receive+0x146>
 80035a8:	e038      	b.n	800361c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d115      	bne.n	80035e4 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	b292      	uxth	r2, r2
 80035c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	1c9a      	adds	r2, r3, #2
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80035e2:	e015      	b.n	8003610 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035e4:	f7fd fe5c 	bl	80012a0 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d803      	bhi.n	80035fc <HAL_SPI_Receive+0x210>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fa:	d102      	bne.n	8003602 <HAL_SPI_Receive+0x216>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800360e:	e01b      	b.n	8003648 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003616:	b29b      	uxth	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1c6      	bne.n	80035aa <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	6839      	ldr	r1, [r7, #0]
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 fb69 	bl	8003cf8 <SPI_EndRxTransaction>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	75fb      	strb	r3, [r7, #23]
 800363e:	e003      	b.n	8003648 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003650:	7dfb      	ldrb	r3, [r7, #23]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b08a      	sub	sp, #40	; 0x28
 800365e:	af00      	add	r7, sp, #0
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	607a      	str	r2, [r7, #4]
 8003666:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003668:	2301      	movs	r3, #1
 800366a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800366c:	2300      	movs	r3, #0
 800366e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003678:	2b01      	cmp	r3, #1
 800367a:	d101      	bne.n	8003680 <HAL_SPI_TransmitReceive+0x26>
 800367c:	2302      	movs	r3, #2
 800367e:	e20a      	b.n	8003a96 <HAL_SPI_TransmitReceive+0x43c>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003688:	f7fd fe0a 	bl	80012a0 <HAL_GetTick>
 800368c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003694:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800369c:	887b      	ldrh	r3, [r7, #2]
 800369e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80036a0:	887b      	ldrh	r3, [r7, #2]
 80036a2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036a4:	7efb      	ldrb	r3, [r7, #27]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d00e      	beq.n	80036c8 <HAL_SPI_TransmitReceive+0x6e>
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036b0:	d106      	bne.n	80036c0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d102      	bne.n	80036c0 <HAL_SPI_TransmitReceive+0x66>
 80036ba:	7efb      	ldrb	r3, [r7, #27]
 80036bc:	2b04      	cmp	r3, #4
 80036be:	d003      	beq.n	80036c8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80036c0:	2302      	movs	r3, #2
 80036c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80036c6:	e1e0      	b.n	8003a8a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d005      	beq.n	80036da <HAL_SPI_TransmitReceive+0x80>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d002      	beq.n	80036da <HAL_SPI_TransmitReceive+0x80>
 80036d4:	887b      	ldrh	r3, [r7, #2]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d103      	bne.n	80036e2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80036e0:	e1d3      	b.n	8003a8a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d003      	beq.n	80036f6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2205      	movs	r2, #5
 80036f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	887a      	ldrh	r2, [r7, #2]
 8003706:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	887a      	ldrh	r2, [r7, #2]
 800370e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	887a      	ldrh	r2, [r7, #2]
 800371c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	887a      	ldrh	r2, [r7, #2]
 8003722:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003738:	d802      	bhi.n	8003740 <HAL_SPI_TransmitReceive+0xe6>
 800373a:	8a3b      	ldrh	r3, [r7, #16]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d908      	bls.n	8003752 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800374e:	605a      	str	r2, [r3, #4]
 8003750:	e007      	b.n	8003762 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003760:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376c:	2b40      	cmp	r3, #64	; 0x40
 800376e:	d007      	beq.n	8003780 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800377e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003788:	f240 8081 	bls.w	800388e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <HAL_SPI_TransmitReceive+0x140>
 8003794:	8a7b      	ldrh	r3, [r7, #18]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d16d      	bne.n	8003876 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379e:	881a      	ldrh	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037aa:	1c9a      	adds	r2, r3, #2
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	3b01      	subs	r3, #1
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037be:	e05a      	b.n	8003876 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d11b      	bne.n	8003806 <HAL_SPI_TransmitReceive+0x1ac>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d016      	beq.n	8003806 <HAL_SPI_TransmitReceive+0x1ac>
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d113      	bne.n	8003806 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e2:	881a      	ldrh	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ee:	1c9a      	adds	r2, r3, #2
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003802:	2300      	movs	r3, #0
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b01      	cmp	r3, #1
 8003812:	d11c      	bne.n	800384e <HAL_SPI_TransmitReceive+0x1f4>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800381a:	b29b      	uxth	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d016      	beq.n	800384e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68da      	ldr	r2, [r3, #12]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	b292      	uxth	r2, r2
 800382c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	1c9a      	adds	r2, r3, #2
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800383e:	b29b      	uxth	r3, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800384a:	2301      	movs	r3, #1
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800384e:	f7fd fd27 	bl	80012a0 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800385a:	429a      	cmp	r2, r3
 800385c:	d80b      	bhi.n	8003876 <HAL_SPI_TransmitReceive+0x21c>
 800385e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003864:	d007      	beq.n	8003876 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003874:	e109      	b.n	8003a8a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800387a:	b29b      	uxth	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d19f      	bne.n	80037c0 <HAL_SPI_TransmitReceive+0x166>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d199      	bne.n	80037c0 <HAL_SPI_TransmitReceive+0x166>
 800388c:	e0e3      	b.n	8003a56 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_SPI_TransmitReceive+0x244>
 8003896:	8a7b      	ldrh	r3, [r7, #18]
 8003898:	2b01      	cmp	r3, #1
 800389a:	f040 80cf 	bne.w	8003a3c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d912      	bls.n	80038ce <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ac:	881a      	ldrh	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b8:	1c9a      	adds	r2, r3, #2
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b02      	subs	r3, #2
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038cc:	e0b6      	b.n	8003a3c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	330c      	adds	r3, #12
 80038d8:	7812      	ldrb	r2, [r2, #0]
 80038da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038f4:	e0a2      	b.n	8003a3c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b02      	cmp	r3, #2
 8003902:	d134      	bne.n	800396e <HAL_SPI_TransmitReceive+0x314>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003908:	b29b      	uxth	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d02f      	beq.n	800396e <HAL_SPI_TransmitReceive+0x314>
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	2b01      	cmp	r3, #1
 8003912:	d12c      	bne.n	800396e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b01      	cmp	r3, #1
 800391c:	d912      	bls.n	8003944 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003922:	881a      	ldrh	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	1c9a      	adds	r2, r3, #2
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003938:	b29b      	uxth	r3, r3
 800393a:	3b02      	subs	r3, #2
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003942:	e012      	b.n	800396a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	330c      	adds	r3, #12
 800394e:	7812      	ldrb	r2, [r2, #0]
 8003950:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003956:	1c5a      	adds	r2, r3, #1
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003960:	b29b      	uxth	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b01      	cmp	r3, #1
 800397a:	d148      	bne.n	8003a0e <HAL_SPI_TransmitReceive+0x3b4>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003982:	b29b      	uxth	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	d042      	beq.n	8003a0e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800398e:	b29b      	uxth	r3, r3
 8003990:	2b01      	cmp	r3, #1
 8003992:	d923      	bls.n	80039dc <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	b292      	uxth	r2, r2
 80039a0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	1c9a      	adds	r2, r3, #2
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b02      	subs	r3, #2
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d81f      	bhi.n	8003a0a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039d8:	605a      	str	r2, [r3, #4]
 80039da:	e016      	b.n	8003a0a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f103 020c 	add.w	r2, r3, #12
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	7812      	ldrb	r2, [r2, #0]
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a0e:	f7fd fc47 	bl	80012a0 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d803      	bhi.n	8003a26 <HAL_SPI_TransmitReceive+0x3cc>
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a24:	d102      	bne.n	8003a2c <HAL_SPI_TransmitReceive+0x3d2>
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d107      	bne.n	8003a3c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003a3a:	e026      	b.n	8003a8a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f47f af57 	bne.w	80038f6 <HAL_SPI_TransmitReceive+0x29c>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f47f af50 	bne.w	80038f6 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a56:	69fa      	ldr	r2, [r7, #28]
 8003a58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 f9a4 	bl	8003da8 <SPI_EndRxTxTransaction>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d005      	beq.n	8003a72 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a80:	e003      	b.n	8003a8a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003a92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3728      	adds	r7, #40	; 0x28
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003aac:	b2db      	uxtb	r3, r3
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
	...

08003abc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	603b      	str	r3, [r7, #0]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003acc:	f7fd fbe8 	bl	80012a0 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad4:	1a9b      	subs	r3, r3, r2
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	4413      	add	r3, r2
 8003ada:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003adc:	f7fd fbe0 	bl	80012a0 <HAL_GetTick>
 8003ae0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ae2:	4b39      	ldr	r3, [pc, #228]	; (8003bc8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	015b      	lsls	r3, r3, #5
 8003ae8:	0d1b      	lsrs	r3, r3, #20
 8003aea:	69fa      	ldr	r2, [r7, #28]
 8003aec:	fb02 f303 	mul.w	r3, r2, r3
 8003af0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003af2:	e054      	b.n	8003b9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afa:	d050      	beq.n	8003b9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003afc:	f7fd fbd0 	bl	80012a0 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d902      	bls.n	8003b12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d13d      	bne.n	8003b8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b2a:	d111      	bne.n	8003b50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b34:	d004      	beq.n	8003b40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b3e:	d107      	bne.n	8003b50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b58:	d10f      	bne.n	8003b7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e017      	b.n	8003bbe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	bf0c      	ite	eq
 8003bae:	2301      	moveq	r3, #1
 8003bb0:	2300      	movne	r3, #0
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	79fb      	ldrb	r3, [r7, #7]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d19b      	bne.n	8003af4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3720      	adds	r7, #32
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20000000 	.word	0x20000000

08003bcc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08a      	sub	sp, #40	; 0x28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003bde:	f7fd fb5f 	bl	80012a0 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be6:	1a9b      	subs	r3, r3, r2
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	4413      	add	r3, r2
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003bee:	f7fd fb57 	bl	80012a0 <HAL_GetTick>
 8003bf2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	330c      	adds	r3, #12
 8003bfa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003bfc:	4b3d      	ldr	r3, [pc, #244]	; (8003cf4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	00da      	lsls	r2, r3, #3
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	0d1b      	lsrs	r3, r3, #20
 8003c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0e:	fb02 f303 	mul.w	r3, r2, r3
 8003c12:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c14:	e060      	b.n	8003cd8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c1c:	d107      	bne.n	8003c2e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d104      	bne.n	8003c2e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003c2c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c34:	d050      	beq.n	8003cd8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c36:	f7fd fb33 	bl	80012a0 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d902      	bls.n	8003c4c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d13d      	bne.n	8003cc8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c5a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c64:	d111      	bne.n	8003c8a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c6e:	d004      	beq.n	8003c7a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c78:	d107      	bne.n	8003c8a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c88:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c92:	d10f      	bne.n	8003cb4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cb2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e010      	b.n	8003cea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d196      	bne.n	8003c16 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3728      	adds	r7, #40	; 0x28
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000000 	.word	0x20000000

08003cf8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af02      	add	r7, sp, #8
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d0c:	d111      	bne.n	8003d32 <SPI_EndRxTransaction+0x3a>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d16:	d004      	beq.n	8003d22 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d20:	d107      	bne.n	8003d32 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d30:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	2180      	movs	r1, #128	; 0x80
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f7ff febd 	bl	8003abc <SPI_WaitFlagStateUntilTimeout>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d007      	beq.n	8003d58 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d4c:	f043 0220 	orr.w	r2, r3, #32
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e023      	b.n	8003da0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d60:	d11d      	bne.n	8003d9e <SPI_EndRxTransaction+0xa6>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d6a:	d004      	beq.n	8003d76 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d74:	d113      	bne.n	8003d9e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f7ff ff22 	bl	8003bcc <SPI_WaitFifoStateUntilTimeout>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d007      	beq.n	8003d9e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d92:	f043 0220 	orr.w	r2, r3, #32
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e000      	b.n	8003da0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af02      	add	r7, sp, #8
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f7ff ff03 	bl	8003bcc <SPI_WaitFifoStateUntilTimeout>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d007      	beq.n	8003ddc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd0:	f043 0220 	orr.w	r2, r3, #32
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e027      	b.n	8003e2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2200      	movs	r2, #0
 8003de4:	2180      	movs	r1, #128	; 0x80
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f7ff fe68 	bl	8003abc <SPI_WaitFlagStateUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d007      	beq.n	8003e02 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003df6:	f043 0220 	orr.w	r2, r3, #32
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e014      	b.n	8003e2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f7ff fedc 	bl	8003bcc <SPI_WaitFifoStateUntilTimeout>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d007      	beq.n	8003e2a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e1e:	f043 0220 	orr.w	r2, r3, #32
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e000      	b.n	8003e2c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e049      	b.n	8003eda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d106      	bne.n	8003e60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7fd f8f6 	bl	800104c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3304      	adds	r3, #4
 8003e70:	4619      	mov	r1, r3
 8003e72:	4610      	mov	r0, r2
 8003e74:	f000 f954 	bl	8004120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
	...

08003ee4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d001      	beq.n	8003efc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e038      	b.n	8003f6e <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a1c      	ldr	r2, [pc, #112]	; (8003f7c <HAL_TIM_Base_Start+0x98>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00e      	beq.n	8003f2c <HAL_TIM_Base_Start+0x48>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f16:	d009      	beq.n	8003f2c <HAL_TIM_Base_Start+0x48>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a18      	ldr	r2, [pc, #96]	; (8003f80 <HAL_TIM_Base_Start+0x9c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d004      	beq.n	8003f2c <HAL_TIM_Base_Start+0x48>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a17      	ldr	r2, [pc, #92]	; (8003f84 <HAL_TIM_Base_Start+0xa0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d115      	bne.n	8003f58 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689a      	ldr	r2, [r3, #8]
 8003f32:	4b15      	ldr	r3, [pc, #84]	; (8003f88 <HAL_TIM_Base_Start+0xa4>)
 8003f34:	4013      	ands	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b06      	cmp	r3, #6
 8003f3c:	d015      	beq.n	8003f6a <HAL_TIM_Base_Start+0x86>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f44:	d011      	beq.n	8003f6a <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f042 0201 	orr.w	r2, r2, #1
 8003f54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f56:	e008      	b.n	8003f6a <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0201 	orr.w	r2, r2, #1
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	e000      	b.n	8003f6c <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40012c00 	.word	0x40012c00
 8003f80:	40000400 	.word	0x40000400
 8003f84:	40014000 	.word	0x40014000
 8003f88:	00010007 	.word	0x00010007

08003f8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <HAL_TIM_ConfigClockSource+0x1c>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e0b6      	b.n	8004116 <HAL_TIM_ConfigClockSource+0x18a>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe4:	d03e      	beq.n	8004064 <HAL_TIM_ConfigClockSource+0xd8>
 8003fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fea:	f200 8087 	bhi.w	80040fc <HAL_TIM_ConfigClockSource+0x170>
 8003fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff2:	f000 8086 	beq.w	8004102 <HAL_TIM_ConfigClockSource+0x176>
 8003ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ffa:	d87f      	bhi.n	80040fc <HAL_TIM_ConfigClockSource+0x170>
 8003ffc:	2b70      	cmp	r3, #112	; 0x70
 8003ffe:	d01a      	beq.n	8004036 <HAL_TIM_ConfigClockSource+0xaa>
 8004000:	2b70      	cmp	r3, #112	; 0x70
 8004002:	d87b      	bhi.n	80040fc <HAL_TIM_ConfigClockSource+0x170>
 8004004:	2b60      	cmp	r3, #96	; 0x60
 8004006:	d050      	beq.n	80040aa <HAL_TIM_ConfigClockSource+0x11e>
 8004008:	2b60      	cmp	r3, #96	; 0x60
 800400a:	d877      	bhi.n	80040fc <HAL_TIM_ConfigClockSource+0x170>
 800400c:	2b50      	cmp	r3, #80	; 0x50
 800400e:	d03c      	beq.n	800408a <HAL_TIM_ConfigClockSource+0xfe>
 8004010:	2b50      	cmp	r3, #80	; 0x50
 8004012:	d873      	bhi.n	80040fc <HAL_TIM_ConfigClockSource+0x170>
 8004014:	2b40      	cmp	r3, #64	; 0x40
 8004016:	d058      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0x13e>
 8004018:	2b40      	cmp	r3, #64	; 0x40
 800401a:	d86f      	bhi.n	80040fc <HAL_TIM_ConfigClockSource+0x170>
 800401c:	2b30      	cmp	r3, #48	; 0x30
 800401e:	d064      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0x15e>
 8004020:	2b30      	cmp	r3, #48	; 0x30
 8004022:	d86b      	bhi.n	80040fc <HAL_TIM_ConfigClockSource+0x170>
 8004024:	2b20      	cmp	r3, #32
 8004026:	d060      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0x15e>
 8004028:	2b20      	cmp	r3, #32
 800402a:	d867      	bhi.n	80040fc <HAL_TIM_ConfigClockSource+0x170>
 800402c:	2b00      	cmp	r3, #0
 800402e:	d05c      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0x15e>
 8004030:	2b10      	cmp	r3, #16
 8004032:	d05a      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0x15e>
 8004034:	e062      	b.n	80040fc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6818      	ldr	r0, [r3, #0]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	6899      	ldr	r1, [r3, #8]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f000 f95d 	bl	8004304 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004058:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	609a      	str	r2, [r3, #8]
      break;
 8004062:	e04f      	b.n	8004104 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6818      	ldr	r0, [r3, #0]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	6899      	ldr	r1, [r3, #8]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f000 f946 	bl	8004304 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004086:	609a      	str	r2, [r3, #8]
      break;
 8004088:	e03c      	b.n	8004104 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6818      	ldr	r0, [r3, #0]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	6859      	ldr	r1, [r3, #4]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	461a      	mov	r2, r3
 8004098:	f000 f8ba 	bl	8004210 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2150      	movs	r1, #80	; 0x50
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 f913 	bl	80042ce <TIM_ITRx_SetConfig>
      break;
 80040a8:	e02c      	b.n	8004104 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6818      	ldr	r0, [r3, #0]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	6859      	ldr	r1, [r3, #4]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	461a      	mov	r2, r3
 80040b8:	f000 f8d9 	bl	800426e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2160      	movs	r1, #96	; 0x60
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 f903 	bl	80042ce <TIM_ITRx_SetConfig>
      break;
 80040c8:	e01c      	b.n	8004104 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6818      	ldr	r0, [r3, #0]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	6859      	ldr	r1, [r3, #4]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	461a      	mov	r2, r3
 80040d8:	f000 f89a 	bl	8004210 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2140      	movs	r1, #64	; 0x40
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 f8f3 	bl	80042ce <TIM_ITRx_SetConfig>
      break;
 80040e8:	e00c      	b.n	8004104 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4619      	mov	r1, r3
 80040f4:	4610      	mov	r0, r2
 80040f6:	f000 f8ea 	bl	80042ce <TIM_ITRx_SetConfig>
      break;
 80040fa:	e003      	b.n	8004104 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004100:	e000      	b.n	8004104 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004102:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004114:	7bfb      	ldrb	r3, [r7, #15]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a32      	ldr	r2, [pc, #200]	; (80041fc <TIM_Base_SetConfig+0xdc>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d007      	beq.n	8004148 <TIM_Base_SetConfig+0x28>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800413e:	d003      	beq.n	8004148 <TIM_Base_SetConfig+0x28>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a2f      	ldr	r2, [pc, #188]	; (8004200 <TIM_Base_SetConfig+0xe0>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d108      	bne.n	800415a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4313      	orrs	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a27      	ldr	r2, [pc, #156]	; (80041fc <TIM_Base_SetConfig+0xdc>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d013      	beq.n	800418a <TIM_Base_SetConfig+0x6a>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004168:	d00f      	beq.n	800418a <TIM_Base_SetConfig+0x6a>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a24      	ldr	r2, [pc, #144]	; (8004200 <TIM_Base_SetConfig+0xe0>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d00b      	beq.n	800418a <TIM_Base_SetConfig+0x6a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a23      	ldr	r2, [pc, #140]	; (8004204 <TIM_Base_SetConfig+0xe4>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d007      	beq.n	800418a <TIM_Base_SetConfig+0x6a>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a22      	ldr	r2, [pc, #136]	; (8004208 <TIM_Base_SetConfig+0xe8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d003      	beq.n	800418a <TIM_Base_SetConfig+0x6a>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a21      	ldr	r2, [pc, #132]	; (800420c <TIM_Base_SetConfig+0xec>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d108      	bne.n	800419c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	4313      	orrs	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a0e      	ldr	r2, [pc, #56]	; (80041fc <TIM_Base_SetConfig+0xdc>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d00b      	beq.n	80041e0 <TIM_Base_SetConfig+0xc0>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a0e      	ldr	r2, [pc, #56]	; (8004204 <TIM_Base_SetConfig+0xe4>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d007      	beq.n	80041e0 <TIM_Base_SetConfig+0xc0>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a0d      	ldr	r2, [pc, #52]	; (8004208 <TIM_Base_SetConfig+0xe8>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d003      	beq.n	80041e0 <TIM_Base_SetConfig+0xc0>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a0c      	ldr	r2, [pc, #48]	; (800420c <TIM_Base_SetConfig+0xec>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d103      	bne.n	80041e8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	691a      	ldr	r2, [r3, #16]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	615a      	str	r2, [r3, #20]
}
 80041ee:	bf00      	nop
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	40012c00 	.word	0x40012c00
 8004200:	40000400 	.word	0x40000400
 8004204:	40014000 	.word	0x40014000
 8004208:	40014400 	.word	0x40014400
 800420c:	40014800 	.word	0x40014800

08004210 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	f023 0201 	bic.w	r2, r3, #1
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800423a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f023 030a 	bic.w	r3, r3, #10
 800424c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	4313      	orrs	r3, r2
 8004254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	621a      	str	r2, [r3, #32]
}
 8004262:	bf00      	nop
 8004264:	371c      	adds	r7, #28
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800426e:	b480      	push	{r7}
 8004270:	b087      	sub	sp, #28
 8004272:	af00      	add	r7, sp, #0
 8004274:	60f8      	str	r0, [r7, #12]
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	f023 0210 	bic.w	r2, r3, #16
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004298:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	031b      	lsls	r3, r3, #12
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	621a      	str	r2, [r3, #32]
}
 80042c2:	bf00      	nop
 80042c4:	371c      	adds	r7, #28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b085      	sub	sp, #20
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
 80042d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f043 0307 	orr.w	r3, r3, #7
 80042f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	609a      	str	r2, [r3, #8]
}
 80042f8:	bf00      	nop
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004304:	b480      	push	{r7}
 8004306:	b087      	sub	sp, #28
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
 8004310:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800431e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	021a      	lsls	r2, r3, #8
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	431a      	orrs	r2, r3
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	4313      	orrs	r3, r2
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	4313      	orrs	r3, r2
 8004330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	609a      	str	r2, [r3, #8]
}
 8004338:	bf00      	nop
 800433a:	371c      	adds	r7, #28
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004358:	2302      	movs	r3, #2
 800435a:	e054      	b.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a24      	ldr	r2, [pc, #144]	; (8004414 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d108      	bne.n	8004398 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800438c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	4313      	orrs	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a17      	ldr	r2, [pc, #92]	; (8004414 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d00e      	beq.n	80043da <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c4:	d009      	beq.n	80043da <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a13      	ldr	r2, [pc, #76]	; (8004418 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d004      	beq.n	80043da <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a11      	ldr	r2, [pc, #68]	; (800441c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d10c      	bne.n	80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	40012c00 	.word	0x40012c00
 8004418:	40000400 	.word	0x40000400
 800441c:	40014000 	.word	0x40014000

08004420 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e040      	b.n	80044b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004436:	2b00      	cmp	r3, #0
 8004438:	d106      	bne.n	8004448 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7fc fe22 	bl	800108c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2224      	movs	r2, #36	; 0x24
 800444c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0201 	bic.w	r2, r2, #1
 800445c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f82c 	bl	80044bc <UART_SetConfig>
 8004464:	4603      	mov	r3, r0
 8004466:	2b01      	cmp	r3, #1
 8004468:	d101      	bne.n	800446e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e022      	b.n	80044b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f956 	bl	8004728 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800448a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689a      	ldr	r2, [r3, #8]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800449a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0201 	orr.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 f9dd 	bl	800486c <UART_CheckIdleState>
 80044b2:	4603      	mov	r3, r0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	4313      	orrs	r3, r2
 80044de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	4b8a      	ldr	r3, [pc, #552]	; (8004710 <UART_SetConfig+0x254>)
 80044e8:	4013      	ands	r3, r2
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	6812      	ldr	r2, [r2, #0]
 80044ee:	6979      	ldr	r1, [r7, #20]
 80044f0:	430b      	orrs	r3, r1
 80044f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	4313      	orrs	r3, r2
 8004518:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	430a      	orrs	r2, r1
 800452c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a78      	ldr	r2, [pc, #480]	; (8004714 <UART_SetConfig+0x258>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d120      	bne.n	800457a <UART_SetConfig+0xbe>
 8004538:	4b77      	ldr	r3, [pc, #476]	; (8004718 <UART_SetConfig+0x25c>)
 800453a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453c:	f003 0303 	and.w	r3, r3, #3
 8004540:	2b03      	cmp	r3, #3
 8004542:	d817      	bhi.n	8004574 <UART_SetConfig+0xb8>
 8004544:	a201      	add	r2, pc, #4	; (adr r2, 800454c <UART_SetConfig+0x90>)
 8004546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454a:	bf00      	nop
 800454c:	0800455d 	.word	0x0800455d
 8004550:	08004569 	.word	0x08004569
 8004554:	0800456f 	.word	0x0800456f
 8004558:	08004563 	.word	0x08004563
 800455c:	2300      	movs	r3, #0
 800455e:	77fb      	strb	r3, [r7, #31]
 8004560:	e01d      	b.n	800459e <UART_SetConfig+0xe2>
 8004562:	2302      	movs	r3, #2
 8004564:	77fb      	strb	r3, [r7, #31]
 8004566:	e01a      	b.n	800459e <UART_SetConfig+0xe2>
 8004568:	2304      	movs	r3, #4
 800456a:	77fb      	strb	r3, [r7, #31]
 800456c:	e017      	b.n	800459e <UART_SetConfig+0xe2>
 800456e:	2308      	movs	r3, #8
 8004570:	77fb      	strb	r3, [r7, #31]
 8004572:	e014      	b.n	800459e <UART_SetConfig+0xe2>
 8004574:	2310      	movs	r3, #16
 8004576:	77fb      	strb	r3, [r7, #31]
 8004578:	e011      	b.n	800459e <UART_SetConfig+0xe2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a67      	ldr	r2, [pc, #412]	; (800471c <UART_SetConfig+0x260>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d102      	bne.n	800458a <UART_SetConfig+0xce>
 8004584:	2300      	movs	r3, #0
 8004586:	77fb      	strb	r3, [r7, #31]
 8004588:	e009      	b.n	800459e <UART_SetConfig+0xe2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a64      	ldr	r2, [pc, #400]	; (8004720 <UART_SetConfig+0x264>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d102      	bne.n	800459a <UART_SetConfig+0xde>
 8004594:	2300      	movs	r3, #0
 8004596:	77fb      	strb	r3, [r7, #31]
 8004598:	e001      	b.n	800459e <UART_SetConfig+0xe2>
 800459a:	2310      	movs	r3, #16
 800459c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045a6:	d15a      	bne.n	800465e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80045a8:	7ffb      	ldrb	r3, [r7, #31]
 80045aa:	2b08      	cmp	r3, #8
 80045ac:	d827      	bhi.n	80045fe <UART_SetConfig+0x142>
 80045ae:	a201      	add	r2, pc, #4	; (adr r2, 80045b4 <UART_SetConfig+0xf8>)
 80045b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b4:	080045d9 	.word	0x080045d9
 80045b8:	080045e1 	.word	0x080045e1
 80045bc:	080045e9 	.word	0x080045e9
 80045c0:	080045ff 	.word	0x080045ff
 80045c4:	080045ef 	.word	0x080045ef
 80045c8:	080045ff 	.word	0x080045ff
 80045cc:	080045ff 	.word	0x080045ff
 80045d0:	080045ff 	.word	0x080045ff
 80045d4:	080045f7 	.word	0x080045f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045d8:	f7fe fb76 	bl	8002cc8 <HAL_RCC_GetPCLK1Freq>
 80045dc:	61b8      	str	r0, [r7, #24]
        break;
 80045de:	e013      	b.n	8004608 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045e0:	f7fe fb94 	bl	8002d0c <HAL_RCC_GetPCLK2Freq>
 80045e4:	61b8      	str	r0, [r7, #24]
        break;
 80045e6:	e00f      	b.n	8004608 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045e8:	4b4e      	ldr	r3, [pc, #312]	; (8004724 <UART_SetConfig+0x268>)
 80045ea:	61bb      	str	r3, [r7, #24]
        break;
 80045ec:	e00c      	b.n	8004608 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ee:	f7fe faf5 	bl	8002bdc <HAL_RCC_GetSysClockFreq>
 80045f2:	61b8      	str	r0, [r7, #24]
        break;
 80045f4:	e008      	b.n	8004608 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045fa:	61bb      	str	r3, [r7, #24]
        break;
 80045fc:	e004      	b.n	8004608 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80045fe:	2300      	movs	r3, #0
 8004600:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	77bb      	strb	r3, [r7, #30]
        break;
 8004606:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d074      	beq.n	80046f8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	005a      	lsls	r2, r3, #1
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	085b      	lsrs	r3, r3, #1
 8004618:	441a      	add	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004622:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	2b0f      	cmp	r3, #15
 8004628:	d916      	bls.n	8004658 <UART_SetConfig+0x19c>
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004630:	d212      	bcs.n	8004658 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	b29b      	uxth	r3, r3
 8004636:	f023 030f 	bic.w	r3, r3, #15
 800463a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	085b      	lsrs	r3, r3, #1
 8004640:	b29b      	uxth	r3, r3
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	b29a      	uxth	r2, r3
 8004648:	89fb      	ldrh	r3, [r7, #14]
 800464a:	4313      	orrs	r3, r2
 800464c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	89fa      	ldrh	r2, [r7, #14]
 8004654:	60da      	str	r2, [r3, #12]
 8004656:	e04f      	b.n	80046f8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	77bb      	strb	r3, [r7, #30]
 800465c:	e04c      	b.n	80046f8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800465e:	7ffb      	ldrb	r3, [r7, #31]
 8004660:	2b08      	cmp	r3, #8
 8004662:	d828      	bhi.n	80046b6 <UART_SetConfig+0x1fa>
 8004664:	a201      	add	r2, pc, #4	; (adr r2, 800466c <UART_SetConfig+0x1b0>)
 8004666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466a:	bf00      	nop
 800466c:	08004691 	.word	0x08004691
 8004670:	08004699 	.word	0x08004699
 8004674:	080046a1 	.word	0x080046a1
 8004678:	080046b7 	.word	0x080046b7
 800467c:	080046a7 	.word	0x080046a7
 8004680:	080046b7 	.word	0x080046b7
 8004684:	080046b7 	.word	0x080046b7
 8004688:	080046b7 	.word	0x080046b7
 800468c:	080046af 	.word	0x080046af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004690:	f7fe fb1a 	bl	8002cc8 <HAL_RCC_GetPCLK1Freq>
 8004694:	61b8      	str	r0, [r7, #24]
        break;
 8004696:	e013      	b.n	80046c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004698:	f7fe fb38 	bl	8002d0c <HAL_RCC_GetPCLK2Freq>
 800469c:	61b8      	str	r0, [r7, #24]
        break;
 800469e:	e00f      	b.n	80046c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046a0:	4b20      	ldr	r3, [pc, #128]	; (8004724 <UART_SetConfig+0x268>)
 80046a2:	61bb      	str	r3, [r7, #24]
        break;
 80046a4:	e00c      	b.n	80046c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046a6:	f7fe fa99 	bl	8002bdc <HAL_RCC_GetSysClockFreq>
 80046aa:	61b8      	str	r0, [r7, #24]
        break;
 80046ac:	e008      	b.n	80046c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046b2:	61bb      	str	r3, [r7, #24]
        break;
 80046b4:	e004      	b.n	80046c0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	77bb      	strb	r3, [r7, #30]
        break;
 80046be:	bf00      	nop
    }

    if (pclk != 0U)
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d018      	beq.n	80046f8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	085a      	lsrs	r2, r3, #1
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	441a      	add	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	2b0f      	cmp	r3, #15
 80046de:	d909      	bls.n	80046f4 <UART_SetConfig+0x238>
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046e6:	d205      	bcs.n	80046f4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	60da      	str	r2, [r3, #12]
 80046f2:	e001      	b.n	80046f8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004704:	7fbb      	ldrb	r3, [r7, #30]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3720      	adds	r7, #32
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	efff69f3 	.word	0xefff69f3
 8004714:	40013800 	.word	0x40013800
 8004718:	40021000 	.word	0x40021000
 800471c:	40004400 	.word	0x40004400
 8004720:	40004800 	.word	0x40004800
 8004724:	007a1200 	.word	0x007a1200

08004728 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00a      	beq.n	8004752 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00a      	beq.n	8004774 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	430a      	orrs	r2, r1
 8004772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00a      	beq.n	8004796 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	f003 0308 	and.w	r3, r3, #8
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	f003 0310 	and.w	r3, r3, #16
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	f003 0320 	and.w	r3, r3, #32
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004804:	2b00      	cmp	r3, #0
 8004806:	d01a      	beq.n	800483e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004826:	d10a      	bne.n	800483e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	605a      	str	r2, [r3, #4]
  }
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b098      	sub	sp, #96	; 0x60
 8004870:	af02      	add	r7, sp, #8
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800487c:	f7fc fd10 	bl	80012a0 <HAL_GetTick>
 8004880:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0308 	and.w	r3, r3, #8
 800488c:	2b08      	cmp	r3, #8
 800488e:	d12e      	bne.n	80048ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004890:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004898:	2200      	movs	r2, #0
 800489a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f88c 	bl	80049bc <UART_WaitOnFlagUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d021      	beq.n	80048ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b2:	e853 3f00 	ldrex	r3, [r3]
 80048b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048be:	653b      	str	r3, [r7, #80]	; 0x50
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	461a      	mov	r2, r3
 80048c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048c8:	647b      	str	r3, [r7, #68]	; 0x44
 80048ca:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048d0:	e841 2300 	strex	r3, r2, [r1]
 80048d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1e6      	bne.n	80048aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2220      	movs	r2, #32
 80048e0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e062      	b.n	80049b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	d149      	bne.n	8004990 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004904:	2200      	movs	r2, #0
 8004906:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f856 	bl	80049bc <UART_WaitOnFlagUntilTimeout>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d03c      	beq.n	8004990 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	e853 3f00 	ldrex	r3, [r3]
 8004922:	623b      	str	r3, [r7, #32]
   return(result);
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800492a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	461a      	mov	r2, r3
 8004932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004934:	633b      	str	r3, [r7, #48]	; 0x30
 8004936:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004938:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800493a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800493c:	e841 2300 	strex	r3, r2, [r1]
 8004940:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1e6      	bne.n	8004916 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	3308      	adds	r3, #8
 800494e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	e853 3f00 	ldrex	r3, [r3]
 8004956:	60fb      	str	r3, [r7, #12]
   return(result);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0301 	bic.w	r3, r3, #1
 800495e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3308      	adds	r3, #8
 8004966:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004968:	61fa      	str	r2, [r7, #28]
 800496a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496c:	69b9      	ldr	r1, [r7, #24]
 800496e:	69fa      	ldr	r2, [r7, #28]
 8004970:	e841 2300 	strex	r3, r2, [r1]
 8004974:	617b      	str	r3, [r7, #20]
   return(result);
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1e5      	bne.n	8004948 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2220      	movs	r2, #32
 8004980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e011      	b.n	80049b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2220      	movs	r2, #32
 8004994:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2220      	movs	r2, #32
 800499a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3758      	adds	r7, #88	; 0x58
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	603b      	str	r3, [r7, #0]
 80049c8:	4613      	mov	r3, r2
 80049ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049cc:	e049      	b.n	8004a62 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d4:	d045      	beq.n	8004a62 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049d6:	f7fc fc63 	bl	80012a0 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d302      	bcc.n	80049ec <UART_WaitOnFlagUntilTimeout+0x30>
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e048      	b.n	8004a82 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0304 	and.w	r3, r3, #4
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d031      	beq.n	8004a62 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	f003 0308 	and.w	r3, r3, #8
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d110      	bne.n	8004a2e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2208      	movs	r2, #8
 8004a12:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 f838 	bl	8004a8a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2208      	movs	r2, #8
 8004a1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e029      	b.n	8004a82 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a3c:	d111      	bne.n	8004a62 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 f81e 	bl	8004a8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2220      	movs	r2, #32
 8004a52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e00f      	b.n	8004a82 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	69da      	ldr	r2, [r3, #28]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	bf0c      	ite	eq
 8004a72:	2301      	moveq	r3, #1
 8004a74:	2300      	movne	r3, #0
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	461a      	mov	r2, r3
 8004a7a:	79fb      	ldrb	r3, [r7, #7]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d0a6      	beq.n	80049ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b095      	sub	sp, #84	; 0x54
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9a:	e853 3f00 	ldrex	r3, [r3]
 8004a9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	461a      	mov	r2, r3
 8004aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ab0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ab2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ab6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ab8:	e841 2300 	strex	r3, r2, [r1]
 8004abc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1e6      	bne.n	8004a92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3308      	adds	r3, #8
 8004aca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004acc:	6a3b      	ldr	r3, [r7, #32]
 8004ace:	e853 3f00 	ldrex	r3, [r3]
 8004ad2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	f023 0301 	bic.w	r3, r3, #1
 8004ada:	64bb      	str	r3, [r7, #72]	; 0x48
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3308      	adds	r3, #8
 8004ae2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ae4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ae6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004aea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aec:	e841 2300 	strex	r3, r2, [r1]
 8004af0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1e5      	bne.n	8004ac4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d118      	bne.n	8004b32 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	e853 3f00 	ldrex	r3, [r3]
 8004b0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f023 0310 	bic.w	r3, r3, #16
 8004b14:	647b      	str	r3, [r7, #68]	; 0x44
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b1e:	61bb      	str	r3, [r7, #24]
 8004b20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b22:	6979      	ldr	r1, [r7, #20]
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	e841 2300 	strex	r3, r2, [r1]
 8004b2a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1e6      	bne.n	8004b00 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2220      	movs	r2, #32
 8004b36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004b46:	bf00      	nop
 8004b48:	3754      	adds	r7, #84	; 0x54
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
	...

08004b54 <__libc_init_array>:
 8004b54:	b570      	push	{r4, r5, r6, lr}
 8004b56:	4d0d      	ldr	r5, [pc, #52]	; (8004b8c <__libc_init_array+0x38>)
 8004b58:	4c0d      	ldr	r4, [pc, #52]	; (8004b90 <__libc_init_array+0x3c>)
 8004b5a:	1b64      	subs	r4, r4, r5
 8004b5c:	10a4      	asrs	r4, r4, #2
 8004b5e:	2600      	movs	r6, #0
 8004b60:	42a6      	cmp	r6, r4
 8004b62:	d109      	bne.n	8004b78 <__libc_init_array+0x24>
 8004b64:	4d0b      	ldr	r5, [pc, #44]	; (8004b94 <__libc_init_array+0x40>)
 8004b66:	4c0c      	ldr	r4, [pc, #48]	; (8004b98 <__libc_init_array+0x44>)
 8004b68:	f000 f820 	bl	8004bac <_init>
 8004b6c:	1b64      	subs	r4, r4, r5
 8004b6e:	10a4      	asrs	r4, r4, #2
 8004b70:	2600      	movs	r6, #0
 8004b72:	42a6      	cmp	r6, r4
 8004b74:	d105      	bne.n	8004b82 <__libc_init_array+0x2e>
 8004b76:	bd70      	pop	{r4, r5, r6, pc}
 8004b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b7c:	4798      	blx	r3
 8004b7e:	3601      	adds	r6, #1
 8004b80:	e7ee      	b.n	8004b60 <__libc_init_array+0xc>
 8004b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b86:	4798      	blx	r3
 8004b88:	3601      	adds	r6, #1
 8004b8a:	e7f2      	b.n	8004b72 <__libc_init_array+0x1e>
 8004b8c:	08004bfc 	.word	0x08004bfc
 8004b90:	08004bfc 	.word	0x08004bfc
 8004b94:	08004bfc 	.word	0x08004bfc
 8004b98:	08004c00 	.word	0x08004c00

08004b9c <memset>:
 8004b9c:	4402      	add	r2, r0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d100      	bne.n	8004ba6 <memset+0xa>
 8004ba4:	4770      	bx	lr
 8004ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8004baa:	e7f9      	b.n	8004ba0 <memset+0x4>

08004bac <_init>:
 8004bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bae:	bf00      	nop
 8004bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bb2:	bc08      	pop	{r3}
 8004bb4:	469e      	mov	lr, r3
 8004bb6:	4770      	bx	lr

08004bb8 <_fini>:
 8004bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bba:	bf00      	nop
 8004bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bbe:	bc08      	pop	{r3}
 8004bc0:	469e      	mov	lr, r3
 8004bc2:	4770      	bx	lr
